{
  
    
        "post0": {
            "title": "Socket.io Multiplayer Game",
            "content": "&times; Start Game Invert Restart Settings",
            "url": "http://localhost:4100/Multiplayer/2024/01/08/CSSE-oop-mutliplayer-game.html",
            "relUrl": "/2024/01/08/CSSE-oop-mutliplayer-game.html",
            "date": " • Jan 8, 2024"
        }
        
    
  
    
        ,"post1": {
            "title": "Dynamic Game Levels",
            "content": "Start Game Invert Restart",
            "url": "http://localhost:4100/Multiplayer/2023/11/27/CSSE-oop-game-levels.html",
            "relUrl": "/2023/11/27/CSSE-oop-game-levels.html",
            "date": " • Nov 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Test",
            "content": "Testing testing | .",
            "url": "http://localhost:4100/Multiplayer/2023/01/12/TestCommit.html",
            "relUrl": "/2023/01/12/TestCommit.html",
            "date": " • Jan 12, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Creators of Alien World .",
          "url": "http://localhost:4100/Multiplayer/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
      ,"page4": {
          "title": "Course Outlines",
          "content": "CSSE | Game | . . . Investing in your Technical Future . Explore the Computer Science Pathway at Del Norte High School. All Del Norte CompSci classes are designed to provide a real-world development experience. Grading is focused on time invested, analytics, participation with peers, and engagement in learning. . Project-based learning with teacher support | Tech Talks by teacher complimented with Student Teaching | Course learning includes Coding Languages, DevOps, GitHub, Research and Ceativity | Student teams practice Agile Development Methodologies: planning, communication, collaboration | Class lab time provided and approximately 2-3 hours of homework per week | .",
          "url": "http://localhost:4100/Multiplayer/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page9": {
          "title": "Time Box",
          "content": "",
          "url": "http://localhost:4100/Multiplayer/time/",
          "relUrl": "/time/",
          "date": ""
      }
      
  

  
  

  
  

  
      ,"page12": {
          "title": "1.3.8 / 2022-02-02",
          "content": "1.3.8 / 2022-02-02 . deps: mime-types@~2.1.34 deps: mime-db@~1.51.0 | . | deps: negotiator@0.6.3 | . 1.3.7 / 2019-04-29 . deps: negotiator@0.6.2 Fix sorting charset, encoding, and language with extra parameters | . | . 1.3.6 / 2019-04-28 . deps: mime-types@~2.1.24 deps: mime-db@~1.40.0 | . | . 1.3.5 / 2018-02-28 . deps: mime-types@~2.1.18 deps: mime-db@~1.33.0 | . | . 1.3.4 / 2017-08-22 . deps: mime-types@~2.1.16 deps: mime-db@~1.29.0 | . | . 1.3.3 / 2016-05-02 . deps: mime-types@~2.1.11 deps: mime-db@~1.23.0 | . | deps: negotiator@0.6.1 perf: improve Accept parsing speed | perf: improve Accept-Charset parsing speed | perf: improve Accept-Encoding parsing speed | perf: improve Accept-Language parsing speed | . | . 1.3.2 / 2016-03-08 . deps: mime-types@~2.1.10 Fix extension of application/dash+xml | Update primary extension for audio/mp4 | deps: mime-db@~1.22.0 | . | . 1.3.1 / 2016-01-19 . deps: mime-types@~2.1.9 deps: mime-db@~1.21.0 | . | . 1.3.0 / 2015-09-29 . deps: mime-types@~2.1.7 deps: mime-db@~1.19.0 | . | deps: negotiator@0.6.0 Fix including type extensions in parameters in Accept parsing | Fix parsing Accept parameters with quoted equals | Fix parsing Accept parameters with quoted semicolons | Lazy-load modules from main entry point | perf: delay type concatenation until needed | perf: enable strict mode | perf: hoist regular expressions | perf: remove closures getting spec properties | perf: remove a closure from media type parsing | perf: remove property delete from media type parsing | . | . 1.2.13 / 2015-09-06 . deps: mime-types@~2.1.6 deps: mime-db@~1.18.0 | . | . 1.2.12 / 2015-07-30 . deps: mime-types@~2.1.4 deps: mime-db@~1.16.0 | . | . 1.2.11 / 2015-07-16 . deps: mime-types@~2.1.3 deps: mime-db@~1.15.0 | . | . 1.2.10 / 2015-07-01 . deps: mime-types@~2.1.2 deps: mime-db@~1.14.0 | . | . 1.2.9 / 2015-06-08 . deps: mime-types@~2.1.1 perf: fix deopt during mapping | . | . 1.2.8 / 2015-06-07 . deps: mime-types@~2.1.0 deps: mime-db@~1.13.0 | . | perf: avoid argument reassignment &amp; argument slice | perf: avoid negotiator recursive construction | perf: enable strict mode | perf: remove unnecessary bitwise operator | . 1.2.7 / 2015-05-10 . deps: negotiator@0.5.3 Fix media type parameter matching to be case-insensitive | . | . 1.2.6 / 2015-05-07 . deps: mime-types@~2.0.11 deps: mime-db@~1.9.1 | . | deps: negotiator@0.5.2 Fix comparing media types with quoted values | Fix splitting media types with quoted commas | . | . 1.2.5 / 2015-03-13 . deps: mime-types@~2.0.10 deps: mime-db@~1.8.0 | . | . 1.2.4 / 2015-02-14 . Support Node.js 0.6 | deps: mime-types@~2.0.9 deps: mime-db@~1.7.0 | . | deps: negotiator@0.5.1 Fix preference sorting to be stable for long acceptable lists | . | . 1.2.3 / 2015-01-31 . deps: mime-types@~2.0.8 deps: mime-db@~1.6.0 | . | . 1.2.2 / 2014-12-30 . deps: mime-types@~2.0.7 deps: mime-db@~1.5.0 | . | . 1.2.1 / 2014-12-30 . deps: mime-types@~2.0.5 deps: mime-db@~1.3.1 | . | . 1.2.0 / 2014-12-19 . deps: negotiator@0.5.0 Fix list return order when large accepted list | Fix missing identity encoding when q=0 exists | Remove dynamic building of Negotiator class | . | . 1.1.4 / 2014-12-10 . deps: mime-types@~2.0.4 deps: mime-db@~1.3.0 | . | . 1.1.3 / 2014-11-09 . deps: mime-types@~2.0.3 deps: mime-db@~1.2.0 | . | . 1.1.2 / 2014-10-14 . deps: negotiator@0.4.9 Fix error when media type has invalid parameter | . | . 1.1.1 / 2014-09-28 . deps: mime-types@~2.0.2 deps: mime-db@~1.1.0 | . | deps: negotiator@0.4.8 Fix all negotiations to be case-insensitive | Stable sort preferences of same quality according to client order | . | . 1.1.0 / 2014-09-02 . update mime-types | . 1.0.7 / 2014-07-04 . Fix wrong type returned from type when match after unknown extension | . 1.0.6 / 2014-06-24 . deps: negotiator@0.4.7 | . 1.0.5 / 2014-06-20 . fix crash when unknown extension given | . 1.0.4 / 2014-06-19 . use mime-types | . 1.0.3 / 2014-06-11 . deps: negotiator@0.4.6 Order by specificity when quality is the same | . | . 1.0.2 / 2014-05-29 . Fix interpretation when header not in request | deps: pin negotiator@0.4.5 | . 1.0.1 / 2014-01-18 . Identity encoding isn’t always acceptable | deps: negotiator@~0.4.0 | . 1.0.0 / 2013-12-27 . Genesis | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/accepts/HISTORY.html",
          "relUrl": "/node_backend/node_modules/accepts/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page13": {
          "title": "2.0.0 (2019-05-27)",
          "content": "2.0.0 (2019-05-27) . Code Refactoring . buffer: replace deprecated Buffer constructor usage (#11) (ccfba54) | . BREAKING CHANGES . buffer: drop support for Node.js ≤ 4.4.x and 5.0.0 - 5.9.x | . See: https://nodejs.org/en/docs/guides/buffer-constructor-deprecation/ .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/base64id/CHANGELOG.html",
          "relUrl": "/node_backend/node_modules/base64id/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page14": {
          "title": "0.4.2 / 2022-02-02",
          "content": "0.4.2 / 2022-02-02 . pref: read value only when assigning in parse | pref: remove unnecessary regexp in parse | . 0.4.1 / 2020-04-21 . Fix maxAge option to reject invalid values | . 0.4.0 / 2019-05-15 . Add SameSite=None support | . 0.3.1 / 2016-05-26 . Fix sameSite: true to work with draft-7 clients true now sends SameSite=Strict instead of SameSite | . | . 0.3.0 / 2016-05-26 . Add sameSite option Replaces firstPartyOnly option, never implemented by browsers | . | Improve error message when encode is not a function | Improve error message when expires is not a Date | . 0.2.4 / 2016-05-20 . perf: enable strict mode | perf: use for loop in parse | perf: use string concatination for serialization | . 0.2.3 / 2015-10-25 . Fix cookie Max-Age to never be a floating point number | . 0.2.2 / 2015-09-17 . Fix regression when setting empty cookie value Ease the new restriction, which is just basic header-level validation | . | Fix typo in invalid value errors | . 0.2.1 / 2015-09-17 . Throw on invalid values provided to serialize Ensures the resulting string is a valid HTTP header value | . | . 0.2.0 / 2015-08-13 . Add firstPartyOnly option | Throw better error for invalid argument to parse | perf: hoist regular expression | . 0.1.5 / 2015-09-17 . Fix regression when setting empty cookie value Ease the new restriction, which is just basic header-level validation | . | Fix typo in invalid value errors | . 0.1.4 / 2015-09-17 . Throw better error for invalid argument to parse | Throw on invalid values provided to serialize Ensures the resulting string is a valid HTTP header value | . | . 0.1.3 / 2015-05-19 . Reduce the scope of try-catch deopt | Remove argument reassignments | . 0.1.2 / 2014-04-16 . Remove unnecessary files from npm package | . 0.1.1 / 2014-02-23 . Fix bad parse when cookie value contained a comma | Fix support for maxAge of 0 | . 0.1.0 / 2013-05-01 . Add decode option | Add encode option | . 0.0.6 / 2013-04-08 . Ignore cookie parts missing = | . 0.0.5 / 2012-10-29 . Return raw cookie value if value unescape errors | . 0.0.4 / 2012-06-21 . Use encode/decodeURIComponent for cookie encoding/decoding Improve server/client interoperability | . | . 0.0.3 / 2012-06-06 . Only escape special characters per the cookie RFC | . 0.0.2 / 2012-06-01 . Fix maxAge option to not throw error | . 0.0.1 / 2012-05-28 . Add more tests | . 0.0.0 / 2012-05-28 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/cookie/HISTORY.html",
          "relUrl": "/node_backend/node_modules/cookie/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page15": {
          "title": "2.8.5 / 2018-11-04",
          "content": "2.8.5 / 2018-11-04 . Fix setting maxAge option to 0 | . 2.8.4 / 2017-07-12 . Work-around Safari bug in default pre-flight response | . 2.8.3 / 2017-03-29 . Fix error when options delegate missing methods option | . 2.8.2 / 2017-03-28 . Fix error when frozen options are passed | Send “Vary: Origin” when using regular expressions | Send “Vary: Access-Control-Request-Headers” when dynamic allowedHeaders | . 2.8.1 / 2016-09-08 . This release only changed documentation. . 2.8.0 / 2016-08-23 . Add optionsSuccessStatus option | . 2.7.2 / 2016-08-23 . Fix error when Node.js running in strict mode | . 2.7.1 / 2015-05-28 . Move module into expressjs organization | . 2.7.0 / 2015-05-28 . Allow array of matching condition as origin option | Allow regular expression as origin option | . 2.6.1 / 2015-05-28 . Update license in package.json | . 2.6.0 / 2015-04-27 . Add preflightContinue option | Fix “Vary: Origin” header added for “*” | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/cors/HISTORY.html",
          "relUrl": "/node_backend/node_modules/cors/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page16": {
          "title": "1.52.0 / 2022-02-21",
          "content": "1.52.0 / 2022-02-21 . Add extensions from IANA for more image/* types | Add extension .asc to application/pgp-keys | Add extensions to various XML types | Add new upstream MIME types | . 1.51.0 / 2021-11-08 . Add new upstream MIME types | Mark image/vnd.microsoft.icon as compressible | Mark image/vnd.ms-dds as compressible | . 1.50.0 / 2021-09-15 . Add deprecated iWorks mime types and extensions | Add new upstream MIME types | . 1.49.0 / 2021-07-26 . Add extension .trig to application/trig | Add new upstream MIME types | . 1.48.0 / 2021-05-30 . Add extension .mvt to application/vnd.mapbox-vector-tile | Add new upstream MIME types | Mark text/yaml as compressible | . 1.47.0 / 2021-04-01 . Add new upstream MIME types | Remove ambigious extensions from IANA for application/*+xml types | Update primary extension to .es for application/ecmascript | . 1.46.0 / 2021-02-13 . Add extension .amr to audio/amr | Add extension .m4s to video/iso.segment | Add extension .opus to audio/ogg | Add new upstream MIME types | . 1.45.0 / 2020-09-22 . Add application/ubjson with extension .ubj | Add image/avif with extension .avif | Add image/ktx2 with extension .ktx2 | Add extension .dbf to application/vnd.dbf | Add extension .rar to application/vnd.rar | Add extension .td to application/urc-targetdesc+xml | Add new upstream MIME types | Fix extension of application/vnd.apple.keynote to be .key | . 1.44.0 / 2020-04-22 . Add charsets from IANA | Add extension .cjs to application/node | Add new upstream MIME types | . 1.43.0 / 2020-01-05 . Add application/x-keepass2 with extension .kdbx | Add extension .mxmf to audio/mobile-xmf | Add extensions from IANA for application/*+xml types | Add new upstream MIME types | . 1.42.0 / 2019-09-25 . Add image/vnd.ms-dds with extension .dds | Add new upstream MIME types | Remove compressible from multipart/mixed | . 1.41.0 / 2019-08-30 . Add new upstream MIME types | Add application/toml with extension .toml | Mark font/ttf as compressible | . 1.40.0 / 2019-04-20 . Add extensions from IANA for model/* types | Add text/mdx with extension .mdx | . 1.39.0 / 2019-04-04 . Add extensions .siv and .sieve to application/sieve | Add new upstream MIME types | . 1.38.0 / 2019-02-04 . Add extension .nq to application/n-quads | Add extension .nt to application/n-triples | Add new upstream MIME types | Mark text/less as compressible | . 1.37.0 / 2018-10-19 . Add extensions to HEIC image types | Add new upstream MIME types | . 1.36.0 / 2018-08-20 . Add Apple file extensions from IANA | Add extensions from IANA for image/* types | Add new upstream MIME types | . 1.35.0 / 2018-07-15 . Add extension .owl to application/rdf+xml | Add new upstream MIME types Removes extension .woff from application/font-woff | . | . 1.34.0 / 2018-06-03 . Add extension .csl to application/vnd.citationstyles.style+xml | Add extension .es to application/ecmascript | Add new upstream MIME types | Add UTF-8 as default charset for text/turtle | Mark all XML-derived types as compressible | . 1.33.0 / 2018-02-15 . Add extensions from IANA for message/* types | Add new upstream MIME types | Fix some incorrect OOXML types | Remove application/font-woff2 | . 1.32.0 / 2017-11-29 . Add new upstream MIME types | Update text/hjson to registered application/hjson | Add text/shex with extension .shex | . 1.31.0 / 2017-10-25 . Add application/raml+yaml with extension .raml | Add application/wasm with extension .wasm | Add new font type from IANA | Add new upstream font extensions | Add new upstream MIME types | Add extensions for JPEG-2000 images | . 1.30.0 / 2017-08-27 . Add application/vnd.ms-outlook | Add application/x-arj | Add extension .mjs to application/javascript | Add glTF types and extensions | Add new upstream MIME types | Add text/x-org | Add VirtualBox MIME types | Fix source records for video/* types that are IANA | Update font/opentype to registered font/otf | . 1.29.0 / 2017-07-10 . Add application/fido.trusted-apps+json | Add extension .wadl to application/vnd.sun.wadl+xml | Add new upstream MIME types | Add UTF-8 as default charset for text/css | . 1.28.0 / 2017-05-14 . Add new upstream MIME types | Add extension .gz to application/gzip | Update extensions .md and .markdown to be text/markdown | . 1.27.0 / 2017-03-16 . Add new upstream MIME types | Add image/apng with extension .apng | . 1.26.0 / 2017-01-14 . Add new upstream MIME types | Add extension .geojson to application/geo+json | . 1.25.0 / 2016-11-11 . Add new upstream MIME types | . 1.24.0 / 2016-09-18 . Add audio/mp3 | Add new upstream MIME types | . 1.23.0 / 2016-05-01 . Add new upstream MIME types | Add extension .3gpp to audio/3gpp | . 1.22.0 / 2016-02-15 . Add text/slim | Add extension .rng to application/xml | Add new upstream MIME types | Fix extension of application/dash+xml to be .mpd | Update primary extension to .m4a for audio/mp4 | . 1.21.0 / 2016-01-06 . Add Google document types | Add new upstream MIME types | . 1.20.0 / 2015-11-10 . Add text/x-suse-ymp | Add new upstream MIME types | . 1.19.0 / 2015-09-17 . Add application/vnd.apple.pkpass | Add new upstream MIME types | . 1.18.0 / 2015-09-03 . Add new upstream MIME types | . 1.17.0 / 2015-08-13 . Add application/x-msdos-program | Add audio/g711-0 | Add image/vnd.mozilla.apng | Add extension .exe to application/x-msdos-program | . 1.16.0 / 2015-07-29 . Add application/vnd.uri-map | . 1.15.0 / 2015-07-13 . Add application/x-httpd-php | . 1.14.0 / 2015-06-25 . Add application/scim+json | Add application/vnd.3gpp.ussd+xml | Add application/vnd.biopax.rdf+xml | Add text/x-processing | . 1.13.0 / 2015-06-07 . Add nginx as a source | Add application/x-cocoa | Add application/x-java-archive-diff | Add application/x-makeself | Add application/x-perl | Add application/x-pilot | Add application/x-redhat-package-manager | Add application/x-sea | Add audio/x-m4a | Add audio/x-realaudio | Add image/x-jng | Add text/mathml | . 1.12.0 / 2015-06-05 . Add application/bdoc | Add application/vnd.hyperdrive+json | Add application/x-bdoc | Add extension .rtf to text/rtf | . 1.11.0 / 2015-05-31 . Add audio/wav | Add audio/wave | Add extension .litcoffee to text/coffeescript | Add extension .sfd-hdstx to application/vnd.hydrostatix.sof-data | Add extension .n-gage to application/vnd.nokia.n-gage.symbian.install | . 1.10.0 / 2015-05-19 . Add application/vnd.balsamiq.bmpr | Add application/vnd.microsoft.portable-executable | Add application/x-ns-proxy-autoconfig | . 1.9.1 / 2015-04-19 . Remove .json extension from application/manifest+json This is causing bugs downstream | . | . 1.9.0 / 2015-04-19 . Add application/manifest+json | Add application/vnd.micro+json | Add image/vnd.zbrush.pcx | Add image/x-ms-bmp | . 1.8.0 / 2015-03-13 . Add application/vnd.citationstyles.style+xml | Add application/vnd.fastcopy-disk-image | Add application/vnd.gov.sk.xmldatacontainer+xml | Add extension .jsonld to application/ld+json | . 1.7.0 / 2015-02-08 . Add application/vnd.gerber | Add application/vnd.msa-disk-image | . 1.6.1 / 2015-02-05 . Community extensions ownership transferred from node-mime | . 1.6.0 / 2015-01-29 . Add application/jose | Add application/jose+json | Add application/json-seq | Add application/jwk+json | Add application/jwk-set+json | Add application/jwt | Add application/rdap+json | Add application/vnd.gov.sk.e-form+xml | Add application/vnd.ims.imsccv1p3 | . 1.5.0 / 2014-12-30 . Add application/vnd.oracle.resource+json | Fix various invalid MIME type entries application/mbox+xml | application/oscp-response | application/vwg-multiplexed | audio/g721 | . | . 1.4.0 / 2014-12-21 . Add application/vnd.ims.imsccv1p2 | Fix various invalid MIME type entries application/vnd-acucobol | application/vnd-curl | application/vnd-dart | application/vnd-dxr | application/vnd-fdf | application/vnd-mif | application/vnd-sema | application/vnd-wap-wmlc | application/vnd.adobe.flash-movie | application/vnd.dece-zip | application/vnd.dvb_service | application/vnd.micrografx-igx | application/vnd.sealed-doc | application/vnd.sealed-eml | application/vnd.sealed-mht | application/vnd.sealed-ppt | application/vnd.sealed-tiff | application/vnd.sealed-xls | application/vnd.sealedmedia.softseal-html | application/vnd.sealedmedia.softseal-pdf | application/vnd.wap-slc | application/vnd.wap-wbxml | audio/vnd.sealedmedia.softseal-mpeg | image/vnd-djvu | image/vnd-svf | image/vnd-wap-wbmp | image/vnd.sealed-png | image/vnd.sealedmedia.softseal-gif | image/vnd.sealedmedia.softseal-jpg | model/vnd-dwf | model/vnd.parasolid.transmit-binary | model/vnd.parasolid.transmit-text | text/vnd-a | text/vnd-curl | text/vnd.wap-wml | . | Remove example template MIME types application/example | audio/example | image/example | message/example | model/example | multipart/example | text/example | video/example | . | . 1.3.1 / 2014-12-16 . Fix missing extensions application/json5 | text/hjson | . | . 1.3.0 / 2014-12-07 . Add application/a2l | Add application/aml | Add application/atfx | Add application/atxml | Add application/cdfx+xml | Add application/dii | Add application/json5 | Add application/lxf | Add application/mf4 | Add application/vnd.apache.thrift.compact | Add application/vnd.apache.thrift.json | Add application/vnd.coffeescript | Add application/vnd.enphase.envoy | Add application/vnd.ims.imsccv1p1 | Add text/csv-schema | Add text/hjson | Add text/markdown | Add text/yaml | . 1.2.0 / 2014-11-09 . Add application/cea | Add application/dit | Add application/vnd.gov.sk.e-form+zip | Add application/vnd.tmd.mediaflex.api+xml | Type application/epub+zip is now IANA-registered | . 1.1.2 / 2014-10-23 . Rebuild database for application/x-www-form-urlencoded change | . 1.1.1 / 2014-10-20 . Mark application/x-www-form-urlencoded as compressible. | . 1.1.0 / 2014-09-28 . Add application/font-woff2 | . 1.0.3 / 2014-09-25 . Fix engine requirement in package | . 1.0.2 / 2014-09-25 . Add application/coap-group+json | Add application/dcd | Add application/vnd.apache.thrift.binary | Add image/vnd.tencent.tap | Mark all JSON-derived types as compressible | Update text/vtt data | . 1.0.1 / 2014-08-30 . Fix extension ordering | . 1.0.0 / 2014-08-30 . Add application/atf | Add application/merge-patch+json | Add multipart/x-mixed-replace | Add source: &#39;apache&#39; metadata | Add source: &#39;iana&#39; metadata | Remove badly-assumed charset data | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/mime-db/HISTORY.html",
          "relUrl": "/node_backend/node_modules/mime-db/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page17": {
          "title": "2.1.35 / 2022-03-12",
          "content": "2.1.35 / 2022-03-12 . deps: mime-db@1.52.0 Add extensions from IANA for more image/* types | Add extension .asc to application/pgp-keys | Add extensions to various XML types | Add new upstream MIME types | . | . 2.1.34 / 2021-11-08 . deps: mime-db@1.51.0 Add new upstream MIME types | . | . 2.1.33 / 2021-10-01 . deps: mime-db@1.50.0 Add deprecated iWorks mime types and extensions | Add new upstream MIME types | . | . 2.1.32 / 2021-07-27 . deps: mime-db@1.49.0 Add extension .trig to application/trig | Add new upstream MIME types | . | . 2.1.31 / 2021-06-01 . deps: mime-db@1.48.0 Add extension .mvt to application/vnd.mapbox-vector-tile | Add new upstream MIME types | . | . 2.1.30 / 2021-04-02 . deps: mime-db@1.47.0 Add extension .amr to audio/amr | Remove ambigious extensions from IANA for application/*+xml types | Update primary extension to .es for application/ecmascript | . | . 2.1.29 / 2021-02-17 . deps: mime-db@1.46.0 Add extension .amr to audio/amr | Add extension .m4s to video/iso.segment | Add extension .opus to audio/ogg | Add new upstream MIME types | . | . 2.1.28 / 2021-01-01 . deps: mime-db@1.45.0 Add application/ubjson with extension .ubj | Add image/avif with extension .avif | Add image/ktx2 with extension .ktx2 | Add extension .dbf to application/vnd.dbf | Add extension .rar to application/vnd.rar | Add extension .td to application/urc-targetdesc+xml | Add new upstream MIME types | Fix extension of application/vnd.apple.keynote to be .key | . | . 2.1.27 / 2020-04-23 . deps: mime-db@1.44.0 Add charsets from IANA | Add extension .cjs to application/node | Add new upstream MIME types | . | . 2.1.26 / 2020-01-05 . deps: mime-db@1.43.0 Add application/x-keepass2 with extension .kdbx | Add extension .mxmf to audio/mobile-xmf | Add extensions from IANA for application/*+xml types | Add new upstream MIME types | . | . 2.1.25 / 2019-11-12 . deps: mime-db@1.42.0 Add new upstream MIME types | Add application/toml with extension .toml | Add image/vnd.ms-dds with extension .dds | . | . 2.1.24 / 2019-04-20 . deps: mime-db@1.40.0 Add extensions from IANA for model/* types | Add text/mdx with extension .mdx | . | . 2.1.23 / 2019-04-17 . deps: mime-db@~1.39.0 Add extensions .siv and .sieve to application/sieve | Add new upstream MIME types | . | . 2.1.22 / 2019-02-14 . deps: mime-db@~1.38.0 Add extension .nq to application/n-quads | Add extension .nt to application/n-triples | Add new upstream MIME types | . | . 2.1.21 / 2018-10-19 . deps: mime-db@~1.37.0 Add extensions to HEIC image types | Add new upstream MIME types | . | . 2.1.20 / 2018-08-26 . deps: mime-db@~1.36.0 Add Apple file extensions from IANA | Add extensions from IANA for image/* types | Add new upstream MIME types | . | . 2.1.19 / 2018-07-17 . deps: mime-db@~1.35.0 Add extension .csl to application/vnd.citationstyles.style+xml | Add extension .es to application/ecmascript | Add extension .owl to application/rdf+xml | Add new upstream MIME types | Add UTF-8 as default charset for text/turtle | . | . 2.1.18 / 2018-02-16 . deps: mime-db@~1.33.0 Add application/raml+yaml with extension .raml | Add application/wasm with extension .wasm | Add text/shex with extension .shex | Add extensions for JPEG-2000 images | Add extensions from IANA for message/* types | Add new upstream MIME types | Update font MIME types | Update text/hjson to registered application/hjson | . | . 2.1.17 / 2017-09-01 . deps: mime-db@~1.30.0 Add application/vnd.ms-outlook | Add application/x-arj | Add extension .mjs to application/javascript | Add glTF types and extensions | Add new upstream MIME types | Add text/x-org | Add VirtualBox MIME types | Fix source records for video/* types that are IANA | Update font/opentype to registered font/otf | . | . 2.1.16 / 2017-07-24 . deps: mime-db@~1.29.0 Add application/fido.trusted-apps+json | Add extension .wadl to application/vnd.sun.wadl+xml | Add extension .gz to application/gzip | Add new upstream MIME types | Update extensions .md and .markdown to be text/markdown | . | . 2.1.15 / 2017-03-23 . deps: mime-db@~1.27.0 Add new mime types | Add image/apng | . | . 2.1.14 / 2017-01-14 . deps: mime-db@~1.26.0 Add new mime types | . | . 2.1.13 / 2016-11-18 . deps: mime-db@~1.25.0 Add new mime types | . | . 2.1.12 / 2016-09-18 . deps: mime-db@~1.24.0 Add new mime types | Add audio/mp3 | . | . 2.1.11 / 2016-05-01 . deps: mime-db@~1.23.0 Add new mime types | . | . 2.1.10 / 2016-02-15 . deps: mime-db@~1.22.0 Add new mime types | Fix extension of application/dash+xml | Update primary extension for audio/mp4 | . | . 2.1.9 / 2016-01-06 . deps: mime-db@~1.21.0 Add new mime types | . | . 2.1.8 / 2015-11-30 . deps: mime-db@~1.20.0 Add new mime types | . | . 2.1.7 / 2015-09-20 . deps: mime-db@~1.19.0 Add new mime types | . | . 2.1.6 / 2015-09-03 . deps: mime-db@~1.18.0 Add new mime types | . | . 2.1.5 / 2015-08-20 . deps: mime-db@~1.17.0 Add new mime types | . | . 2.1.4 / 2015-07-30 . deps: mime-db@~1.16.0 Add new mime types | . | . 2.1.3 / 2015-07-13 . deps: mime-db@~1.15.0 Add new mime types | . | . 2.1.2 / 2015-06-25 . deps: mime-db@~1.14.0 Add new mime types | . | . 2.1.1 / 2015-06-08 . perf: fix deopt during mapping | . 2.1.0 / 2015-06-07 . Fix incorrectly treating extension-less file name as extension i.e. &#39;path/to/json&#39; will no longer return application/json | . | Fix .charset(type) to accept parameters | Fix .charset(type) to match case-insensitive | Improve generation of extension to MIME mapping | Refactor internals for readability and no argument reassignment | Prefer application/* MIME types from the same source | Prefer any type over application/octet-stream | deps: mime-db@~1.13.0 Add nginx as a source | Add new mime types | . | . 2.0.14 / 2015-06-06 . deps: mime-db@~1.12.0 Add new mime types | . | . 2.0.13 / 2015-05-31 . deps: mime-db@~1.11.0 Add new mime types | . | . 2.0.12 / 2015-05-19 . deps: mime-db@~1.10.0 Add new mime types | . | . 2.0.11 / 2015-05-05 . deps: mime-db@~1.9.1 Add new mime types | . | . 2.0.10 / 2015-03-13 . deps: mime-db@~1.8.0 Add new mime types | . | . 2.0.9 / 2015-02-09 . deps: mime-db@~1.7.0 Add new mime types | Community extensions ownership transferred from node-mime | . | . 2.0.8 / 2015-01-29 . deps: mime-db@~1.6.0 Add new mime types | . | . 2.0.7 / 2014-12-30 . deps: mime-db@~1.5.0 Add new mime types | Fix various invalid MIME type entries | . | . 2.0.6 / 2014-12-30 . deps: mime-db@~1.4.0 Add new mime types | Fix various invalid MIME type entries | Remove example template MIME types | . | . 2.0.5 / 2014-12-29 . deps: mime-db@~1.3.1 Fix missing extensions | . | . 2.0.4 / 2014-12-10 . deps: mime-db@~1.3.0 Add new mime types | . | . 2.0.3 / 2014-11-09 . deps: mime-db@~1.2.0 Add new mime types | . | . 2.0.2 / 2014-09-28 . deps: mime-db@~1.1.0 Add new mime types | Update charsets | . | . 2.0.1 / 2014-09-07 . Support Node.js 0.6 | . 2.0.0 / 2014-09-02 . Use mime-db | Remove .define() | . 1.0.2 / 2014-08-04 . Set charset=utf-8 for text/javascript | . 1.0.1 / 2014-06-24 . Add text/jsx type | . 1.0.0 / 2014-05-12 . Return false for unknown types | Set charset=utf-8 for application/json | . 0.1.0 / 2014-05-02 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/mime-types/HISTORY.html",
          "relUrl": "/node_backend/node_modules/mime-types/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page18": {
          "title": "0.6.3 / 2022-01-22",
          "content": "0.6.3 / 2022-01-22 . Revert “Lazy-load modules from main entry point” | . 0.6.2 / 2019-04-29 . Fix sorting charset, encoding, and language with extra parameters | . 0.6.1 / 2016-05-02 . perf: improve Accept parsing speed | perf: improve Accept-Charset parsing speed | perf: improve Accept-Encoding parsing speed | perf: improve Accept-Language parsing speed | . 0.6.0 / 2015-09-29 . Fix including type extensions in parameters in Accept parsing | Fix parsing Accept parameters with quoted equals | Fix parsing Accept parameters with quoted semicolons | Lazy-load modules from main entry point | perf: delay type concatenation until needed | perf: enable strict mode | perf: hoist regular expressions | perf: remove closures getting spec properties | perf: remove a closure from media type parsing | perf: remove property delete from media type parsing | . 0.5.3 / 2015-05-10 . Fix media type parameter matching to be case-insensitive | . 0.5.2 / 2015-05-06 . Fix comparing media types with quoted values | Fix splitting media types with quoted commas | . 0.5.1 / 2015-02-14 . Fix preference sorting to be stable for long acceptable lists | . 0.5.0 / 2014-12-18 . Fix list return order when large accepted list | Fix missing identity encoding when q=0 exists | Remove dynamic building of Negotiator class | . 0.4.9 / 2014-10-14 . Fix error when media type has invalid parameter | . 0.4.8 / 2014-09-28 . Fix all negotiations to be case-insensitive | Stable sort preferences of same quality according to client order | Support Node.js 0.6 | . 0.4.7 / 2014-06-24 . Handle invalid provided languages | Handle invalid provided media types | . 0.4.6 / 2014-06-11 . Order by specificity when quality is the same | . 0.4.5 / 2014-05-29 . Fix regression in empty header handling | . 0.4.4 / 2014-05-29 . Fix behaviors when headers are not present | . 0.4.3 / 2014-04-16 . Handle slashes on media params correctly | . 0.4.2 / 2014-02-28 . Fix media type sorting | Handle media types params strictly | . 0.4.1 / 2014-01-16 . Use most specific matches | . 0.4.0 / 2014-01-09 . Remove preferred prefix from methods | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/negotiator/HISTORY.html",
          "relUrl": "/node_backend/node_modules/negotiator/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page19": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. See standard-version for commit guidelines. . 9.0.1 (2023-09-12) . build . Fix CI to work with Node.js 20.x | . 9.0.0 (2022-09-05) . ⚠ BREAKING CHANGES . Drop Node.js 10.x support. This library always aims at supporting one EOLed LTS release which by this time now is 12.x which has reached EOL 30 Apr 2022. . | Remove the minified UMD build from the package. . Minified code is hard to audit and since this is a widely used library it seems more appropriate nowadays to optimize for auditability than to ship a legacy module format that, at best, serves educational purposes nowadays. . For production browser use cases, users should be using a bundler. For educational purposes, today’s online sandboxes like replit.com offer convenient ways to load npm modules, so the use case for UMD through repos like UNPKG or jsDelivr has largely vanished. . | Drop IE 11 and Safari 10 support. Drop support for browsers that don’t correctly implement const/let and default arguments, and no longer transpile the browser build to ES2015. . This also removes the fallback on msCrypto instead of the crypto API. . Browser tests are run in the first supported version of each supported browser and in the latest (as of this commit) version available on Browserstack. . | . Features . optimize uuid.v1 by 1.3x uuid.v4 by 4.3x (430%) (#597) (3a033f6) | remove UMD build (#645) (e948a0f), closes #620 | use native crypto.randomUUID when available (#600) (c9e076c) | . Bug Fixes . add Jest/jsdom compatibility (#642) (16f9c46) | change default export to named function (#545) (c57bc5a) | handle error when parameter is not set in v3 and v5 (#622) (fcd7388) | run npm audit fix (#644) (04686f5) | upgrading from uuid3 broken link (#568) (1c849da) | . build . drop Node.js 8.x from babel transpile target (#603) (aa11485) | drop support for legacy browsers (IE11, Safari 10) (#604) (0f433e5) . | drop node 10.x to upgrade dev dependencies (#653) (28a5712), closes #643 | . 8.3.2 (2020-12-08) . Bug Fixes . lazy load getRandomValues (#537) (16c8f6d), closes #536 | . 8.3.1 (2020-10-04) . Bug Fixes . support expo&gt;=39.0.0 (#515) (c65a0f3), closes #375 | . 8.3.0 (2020-07-27) . Features . add parse/stringify/validate/version/NIL APIs (#479) (0e6c10b), closes #475 #478 #480 #481 #180 | . 8.2.0 (2020-06-23) . Features . improve performance of v1 string representation (#453) (0ee0b67) | remove deprecated v4 string parameter (#454) (88ce3ca), closes #437 | support jspm (#473) (e9f2587) | . Bug Fixes . prepare package exports for webpack 5 (#468) (8d6e6a5) | . 8.1.0 (2020-05-20) . Features . improve v4 performance by reusing random number array (#435) (bf4af0d) | optimize V8 performance of bytesToUuid (#434) (e156415) | . Bug Fixes . export package.json required by react-native and bundlers (#449) (be1c8fe), closes ai/nanoevents#44 #444 | . 8.0.0 (2020-04-29) . ⚠ BREAKING CHANGES . For native ECMAScript Module (ESM) usage in Node.js only named exports are exposed, there is no more default export. . -import uuid from &#39;uuid&#39;; -console.log(uuid.v4()); // -&gt; &#39;cd6c3b08-0adc-4f4b-a6ef-36087a1c9869&#39; +import { v4 as uuidv4 } from &#39;uuid&#39;; +uuidv4(); // ⇨ &#39;9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d&#39; . | Deep requiring specific algorithms of this library like require(&#39;uuid/v4&#39;), which has been deprecated in uuid@7, is no longer supported. . Instead use the named exports that this module exports. . For ECMAScript Modules (ESM): . -import uuidv4 from &#39;uuid/v4&#39;; +import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); . For CommonJS: . -const uuidv4 = require(&#39;uuid/v4&#39;); +const { v4: uuidv4 } = require(&#39;uuid&#39;); uuidv4(); . | . Features . native Node.js ES Modules (wrapper approach) (#423) (2d9f590), closes #245 #419 #342 | remove deep requires (#426) (daf72b8) | . Bug Fixes . add CommonJS syntax example to README quickstart section (#417) (e0ec840) | . 7.0.3 (2020-03-31) . Bug Fixes . make deep require deprecation warning work in browsers (#409) (4b71107), closes #408 | . 7.0.2 (2020-03-04) . Bug Fixes . make access to msCrypto consistent (#393) (8bf2a20) | simplify link in deprecation warning (#391) (bb2c8e4) | update links to match content in readme (#386) (44f2f86) | . 7.0.1 (2020-02-25) . Bug Fixes . clean up esm builds for node and browser (#383) (59e6a49) | provide browser versions independent from module system (#380) (4344a22), closes #378 | . 7.0.0 (2020-02-24) . ⚠ BREAKING CHANGES . The default export, which used to be the v4() method but which was already discouraged in v3.x of this library, has been removed. | Explicitly note that deep imports of the different uuid version functions are deprecated and no longer encouraged and that ECMAScript module named imports should be used instead. Emit a deprecation warning for people who deep-require the different algorithm variants. | Remove builtin support for insecure random number generators in the browser. Users who want that will have to supply their own random number generator function. | Remove support for generating v3 and v5 UUIDs in Node.js&lt;4.x | Convert code base to ECMAScript Modules (ESM) and release CommonJS build for node and ESM build for browser bundlers. | . Features . add UMD build to npm package (#357) (4e75adf), closes #345 | add various es module and CommonJS examples (b238510) | ensure that docs are up-to-date in CI (ee5e77d) | hybrid CommonJS &amp; ECMAScript modules build (a3f078f) | remove insecure fallback random number generator (3a5842b), closes #173 | remove support for pre Node.js v4 Buffer API (#356) (b59b5c5) | rename repository to github:uuidjs/uuid (#351) (c37a518), closes #338 | . Bug Fixes . add deep-require proxies for local testing and adjust tests (#365) (7fedc79) | add note about removal of default export (#372) (12749b7), closes #370 | deprecated deep requiring of the different algorithm versions (#361) (c0bdf15) | . 3.4.0 (2020-01-16) . Features . rename repository to github:uuidjs/uuid (#351) (e2d7314), closes #338 | . 3.3.3 (2019-08-19) . Bug Fixes . no longer run ci tests on node v4 | upgrade dependencies | . 3.3.2 (2018-06-28) . Bug Fixes . typo (305d877) | . 3.3.1 (2018-06-28) . Bug Fixes . fix #284 by setting function name in try-catch (f2a60f2) | . 3.3.0 (2018-06-22) . Bug Fixes . assignment to readonly property to allow running in strict mode (#270) (d062fdc) | fix #229 (c9684d4) | Get correct version of IE11 crypto (#274) (153d331) | mem issue when generating uuid (#267) (c47702c) | . Features . enforce Conventional Commit style commit messages (#282) (cc9a182) | . 3.2.1 (2018-01-16) . Bug Fixes . use msCrypto if available. Fixes #241 (#247) (1fef18b) | . 3.2.0 (2018-01-16) . Bug Fixes . remove mistakenly added typescript dependency, rollback version (standard-version will auto-increment) (09fa824) | use msCrypto if available. Fixes #241 (#247) (1fef18b) | . Features . Add v3 Support (#217) (d94f726) | . 3.1.0 (2017-06-17) . Bug Fixes . (fix) Add .npmignore file to exclude test/ and other non-essential files from packing. (#183) | Fix typo (#178) | Simple typo fix (#165) | . Features . v5 support in CLI (#197) | V5 support (#188) | . 3.0.1 (2016-11-28) . split uuid versions into separate files | . 3.0.0 (2016-11-17) . remove .parse and .unparse | . 2.0.0 . Removed uuid.BufferClass | . 1.4.0 . Improved module context detection | Removed public RNG functions | . 1.3.2 . Improve tests and handling of v1() options (Issue #24) | Expose RNG option to allow for perf testing with different generators | . 1.3.0 . Support for version 1 ids, thanks to @ctavan! | Support for node.js crypto API | De-emphasizing performance in favor of a) cryptographic quality PRNGs where available and b) more manageable code | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/uuid/CHANGELOG.html",
          "relUrl": "/node_backend/node_modules/uuid/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page20": {
          "title": "1.1.2 / 2017-09-23",
          "content": "1.1.2 / 2017-09-23 . perf: improve header token parsing speed | . 1.1.1 / 2017-03-20 . perf: hoist regular expression | . 1.1.0 / 2015-09-29 . Only accept valid field names in the field argument Ensures the resulting string is a valid HTTP header value | . | . 1.0.1 / 2015-07-08 . Fix setting empty header from empty field | perf: enable strict mode | perf: remove argument reassignments | . 1.0.0 / 2014-08-10 . Accept valid Vary header string as field | Add vary.append for low-level string manipulation | Move to jshttp orgainzation | . 0.1.0 / 2014-06-05 . Support array of fields to set | . 0.0.0 / 2014-06-04 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/vary/HISTORY.html",
          "relUrl": "/node_backend/node_modules/vary/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page21": {
          "title": "1.3.8 / 2022-02-02",
          "content": "1.3.8 / 2022-02-02 . deps: mime-types@~2.1.34 deps: mime-db@~1.51.0 | . | deps: negotiator@0.6.3 | . 1.3.7 / 2019-04-29 . deps: negotiator@0.6.2 Fix sorting charset, encoding, and language with extra parameters | . | . 1.3.6 / 2019-04-28 . deps: mime-types@~2.1.24 deps: mime-db@~1.40.0 | . | . 1.3.5 / 2018-02-28 . deps: mime-types@~2.1.18 deps: mime-db@~1.33.0 | . | . 1.3.4 / 2017-08-22 . deps: mime-types@~2.1.16 deps: mime-db@~1.29.0 | . | . 1.3.3 / 2016-05-02 . deps: mime-types@~2.1.11 deps: mime-db@~1.23.0 | . | deps: negotiator@0.6.1 perf: improve Accept parsing speed | perf: improve Accept-Charset parsing speed | perf: improve Accept-Encoding parsing speed | perf: improve Accept-Language parsing speed | . | . 1.3.2 / 2016-03-08 . deps: mime-types@~2.1.10 Fix extension of application/dash+xml | Update primary extension for audio/mp4 | deps: mime-db@~1.22.0 | . | . 1.3.1 / 2016-01-19 . deps: mime-types@~2.1.9 deps: mime-db@~1.21.0 | . | . 1.3.0 / 2015-09-29 . deps: mime-types@~2.1.7 deps: mime-db@~1.19.0 | . | deps: negotiator@0.6.0 Fix including type extensions in parameters in Accept parsing | Fix parsing Accept parameters with quoted equals | Fix parsing Accept parameters with quoted semicolons | Lazy-load modules from main entry point | perf: delay type concatenation until needed | perf: enable strict mode | perf: hoist regular expressions | perf: remove closures getting spec properties | perf: remove a closure from media type parsing | perf: remove property delete from media type parsing | . | . 1.2.13 / 2015-09-06 . deps: mime-types@~2.1.6 deps: mime-db@~1.18.0 | . | . 1.2.12 / 2015-07-30 . deps: mime-types@~2.1.4 deps: mime-db@~1.16.0 | . | . 1.2.11 / 2015-07-16 . deps: mime-types@~2.1.3 deps: mime-db@~1.15.0 | . | . 1.2.10 / 2015-07-01 . deps: mime-types@~2.1.2 deps: mime-db@~1.14.0 | . | . 1.2.9 / 2015-06-08 . deps: mime-types@~2.1.1 perf: fix deopt during mapping | . | . 1.2.8 / 2015-06-07 . deps: mime-types@~2.1.0 deps: mime-db@~1.13.0 | . | perf: avoid argument reassignment &amp; argument slice | perf: avoid negotiator recursive construction | perf: enable strict mode | perf: remove unnecessary bitwise operator | . 1.2.7 / 2015-05-10 . deps: negotiator@0.5.3 Fix media type parameter matching to be case-insensitive | . | . 1.2.6 / 2015-05-07 . deps: mime-types@~2.0.11 deps: mime-db@~1.9.1 | . | deps: negotiator@0.5.2 Fix comparing media types with quoted values | Fix splitting media types with quoted commas | . | . 1.2.5 / 2015-03-13 . deps: mime-types@~2.0.10 deps: mime-db@~1.8.0 | . | . 1.2.4 / 2015-02-14 . Support Node.js 0.6 | deps: mime-types@~2.0.9 deps: mime-db@~1.7.0 | . | deps: negotiator@0.5.1 Fix preference sorting to be stable for long acceptable lists | . | . 1.2.3 / 2015-01-31 . deps: mime-types@~2.0.8 deps: mime-db@~1.6.0 | . | . 1.2.2 / 2014-12-30 . deps: mime-types@~2.0.7 deps: mime-db@~1.5.0 | . | . 1.2.1 / 2014-12-30 . deps: mime-types@~2.0.5 deps: mime-db@~1.3.1 | . | . 1.2.0 / 2014-12-19 . deps: negotiator@0.5.0 Fix list return order when large accepted list | Fix missing identity encoding when q=0 exists | Remove dynamic building of Negotiator class | . | . 1.1.4 / 2014-12-10 . deps: mime-types@~2.0.4 deps: mime-db@~1.3.0 | . | . 1.1.3 / 2014-11-09 . deps: mime-types@~2.0.3 deps: mime-db@~1.2.0 | . | . 1.1.2 / 2014-10-14 . deps: negotiator@0.4.9 Fix error when media type has invalid parameter | . | . 1.1.1 / 2014-09-28 . deps: mime-types@~2.0.2 deps: mime-db@~1.1.0 | . | deps: negotiator@0.4.8 Fix all negotiations to be case-insensitive | Stable sort preferences of same quality according to client order | . | . 1.1.0 / 2014-09-02 . update mime-types | . 1.0.7 / 2014-07-04 . Fix wrong type returned from type when match after unknown extension | . 1.0.6 / 2014-06-24 . deps: negotiator@0.4.7 | . 1.0.5 / 2014-06-20 . fix crash when unknown extension given | . 1.0.4 / 2014-06-19 . use mime-types | . 1.0.3 / 2014-06-11 . deps: negotiator@0.4.6 Order by specificity when quality is the same | . | . 1.0.2 / 2014-05-29 . Fix interpretation when header not in request | deps: pin negotiator@0.4.5 | . 1.0.1 / 2014-01-18 . Identity encoding isn’t always acceptable | deps: negotiator@~0.4.0 | . 1.0.0 / 2013-12-27 . Genesis | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/accepts/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/accepts/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page22": {
          "title": "2.0.0 (2019-05-27)",
          "content": "2.0.0 (2019-05-27) . Code Refactoring . buffer: replace deprecated Buffer constructor usage (#11) (ccfba54) | . BREAKING CHANGES . buffer: drop support for Node.js ≤ 4.4.x and 5.0.0 - 5.9.x | . See: https://nodejs.org/en/docs/guides/buffer-constructor-deprecation/ .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/base64id/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/base64id/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page23": {
          "title": "1.20.1 / 2022-10-06",
          "content": "1.20.1 / 2022-10-06 . deps: qs@6.11.0 | perf: remove unnecessary object clone | . 1.20.0 / 2022-04-02 . Fix error message for json parse whitespace in strict | Fix internal error when inflated body exceeds limit | Prevent loss of async hooks context | Prevent hanging when request already read | deps: depd@2.0.0 Replace internal eval usage with Function constructor | Use instance methods on process to check for listeners | . | deps: http-errors@2.0.0 deps: depd@2.0.0 | deps: statuses@2.0.1 | . | deps: on-finished@2.4.1 | deps: qs@6.10.3 | deps: raw-body@2.5.1 deps: http-errors@2.0.0 | . | . 1.19.2 / 2022-02-15 . deps: bytes@3.1.2 | deps: qs@6.9.7 Fix handling of __proto__ keys | . | deps: raw-body@2.4.3 deps: bytes@3.1.2 | . | . 1.19.1 / 2021-12-10 . deps: bytes@3.1.1 | deps: http-errors@1.8.1 deps: inherits@2.0.4 | deps: toidentifier@1.0.1 | deps: setprototypeof@1.2.0 | . | deps: qs@6.9.6 | deps: raw-body@2.4.2 deps: bytes@3.1.1 | deps: http-errors@1.8.1 | . | deps: safe-buffer@5.2.1 | deps: type-is@~1.6.18 | . 1.19.0 / 2019-04-25 . deps: bytes@3.1.0 Add petabyte (pb) support | . | deps: http-errors@1.7.2 Set constructor name when possible | deps: setprototypeof@1.1.1 | deps: statuses@’&gt;= 1.5.0 &lt; 2’ | . | deps: iconv-lite@0.4.24 Added encoding MIK | . | deps: qs@6.7.0 Fix parsing array brackets after index | . | deps: raw-body@2.4.0 deps: bytes@3.1.0 | deps: http-errors@1.7.2 | deps: iconv-lite@0.4.24 | . | deps: type-is@~1.6.17 deps: mime-types@~2.1.24 | perf: prevent internal throw on invalid type | . | . 1.18.3 / 2018-05-14 . Fix stack trace for strict json parse error | deps: depd@~1.1.2 perf: remove argument reassignment | . | deps: http-errors@~1.6.3 deps: depd@~1.1.2 | deps: setprototypeof@1.1.0 | deps: statuses@’&gt;= 1.3.1 &lt; 2’ | . | deps: iconv-lite@0.4.23 Fix loading encoding with year appended | Fix deprecation warnings on Node.js 10+ | . | deps: qs@6.5.2 | deps: raw-body@2.3.3 deps: http-errors@1.6.3 | deps: iconv-lite@0.4.23 | . | deps: type-is@~1.6.16 deps: mime-types@~2.1.18 | . | . 1.18.2 / 2017-09-22 . deps: debug@2.6.9 | perf: remove argument reassignment | . 1.18.1 / 2017-09-12 . deps: content-type@~1.0.4 perf: remove argument reassignment | perf: skip parameter parsing when no parameters | . | deps: iconv-lite@0.4.19 Fix ISO-8859-1 regression | Update Windows-1255 | . | deps: qs@6.5.1 Fix parsing &amp; compacting very deep objects | . | deps: raw-body@2.3.2 deps: iconv-lite@0.4.19 | . | . 1.18.0 / 2017-09-08 . Fix JSON strict violation error to match native parse error | Include the body property on verify errors | Include the type property on all generated errors | Use http-errors to set status code on errors | deps: bytes@3.0.0 | deps: debug@2.6.8 | deps: depd@~1.1.1 Remove unnecessary Buffer loading | . | deps: http-errors@~1.6.2 deps: depd@1.1.1 | . | deps: iconv-lite@0.4.18 Add support for React Native | Add a warning if not loaded as utf-8 | Fix CESU-8 decoding in Node.js 8 | Improve speed of ISO-8859-1 encoding | . | deps: qs@6.5.0 | deps: raw-body@2.3.1 Use http-errors for standard emitted errors | deps: bytes@3.0.0 | deps: iconv-lite@0.4.18 | perf: skip buffer decoding on overage chunk | . | perf: prevent internal throw when missing charset | . 1.17.2 / 2017-05-17 . deps: debug@2.6.7 Fix DEBUG_MAX_ARRAY_LENGTH | deps: ms@2.0.0 | . | deps: type-is@~1.6.15 deps: mime-types@~2.1.15 | . | . 1.17.1 / 2017-03-06 . deps: qs@6.4.0 Fix regression parsing keys starting with [ | . | . 1.17.0 / 2017-03-01 . deps: http-errors@~1.6.1 Make message property enumerable for HttpErrors | deps: setprototypeof@1.0.3 | . | deps: qs@6.3.1 Fix compacting nested arrays | . | . 1.16.1 / 2017-02-10 . deps: debug@2.6.1 Fix deprecation messages in WebStorm and other editors | Undeprecate DEBUG_FD set to 1 or 2 | . | . 1.16.0 / 2017-01-17 . deps: debug@2.6.0 Allow colors in workers | Deprecated DEBUG_FD environment variable | Fix error when running under React Native | Use same color for same namespace | deps: ms@0.7.2 | . | deps: http-errors@~1.5.1 deps: inherits@2.0.3 | deps: setprototypeof@1.0.2 | deps: statuses@’&gt;= 1.3.1 &lt; 2’ | . | deps: iconv-lite@0.4.15 Added encoding MS-31J | Added encoding MS-932 | Added encoding MS-936 | Added encoding MS-949 | Added encoding MS-950 | Fix GBK/GB18030 handling of Euro character | . | deps: qs@6.2.1 Fix array parsing from skipping empty values | . | deps: raw-body@~2.2.0 deps: iconv-lite@0.4.15 | . | deps: type-is@~1.6.14 deps: mime-types@~2.1.13 | . | . 1.15.2 / 2016-06-19 . deps: bytes@2.4.0 | deps: content-type@~1.0.2 perf: enable strict mode | . | deps: http-errors@~1.5.0 Use setprototypeof module to replace __proto__ setting | deps: statuses@’&gt;= 1.3.0 &lt; 2’ | perf: enable strict mode | . | deps: qs@6.2.0 | deps: raw-body@~2.1.7 deps: bytes@2.4.0 | perf: remove double-cleanup on happy path | . | deps: type-is@~1.6.13 deps: mime-types@~2.1.11 | . | . 1.15.1 / 2016-05-05 . deps: bytes@2.3.0 Drop partial bytes on all parsed units | Fix parsing byte string that looks like hex | . | deps: raw-body@~2.1.6 deps: bytes@2.3.0 | . | deps: type-is@~1.6.12 deps: mime-types@~2.1.10 | . | . 1.15.0 / 2016-02-10 . deps: http-errors@~1.4.0 Add HttpError export, for err instanceof createError.HttpError | deps: inherits@2.0.1 | deps: statuses@’&gt;= 1.2.1 &lt; 2’ | . | deps: qs@6.1.0 | deps: type-is@~1.6.11 deps: mime-types@~2.1.9 | . | . 1.14.2 / 2015-12-16 . deps: bytes@2.2.0 | deps: iconv-lite@0.4.13 | deps: qs@5.2.0 | deps: raw-body@~2.1.5 deps: bytes@2.2.0 | deps: iconv-lite@0.4.13 | . | deps: type-is@~1.6.10 deps: mime-types@~2.1.8 | . | . 1.14.1 / 2015-09-27 . Fix issue where invalid charset results in 400 when verify used | deps: iconv-lite@0.4.12 Fix CESU-8 decoding in Node.js 4.x | . | deps: raw-body@~2.1.4 Fix masking critical errors from iconv-lite | deps: iconv-lite@0.4.12 | . | deps: type-is@~1.6.9 deps: mime-types@~2.1.7 | . | . 1.14.0 / 2015-09-16 . Fix JSON strict parse error to match syntax errors | Provide static require analysis in urlencoded parser | deps: depd@~1.1.0 Support web browser loading | . | deps: qs@5.1.0 | deps: raw-body@~2.1.3 Fix sync callback when attaching data listener causes sync read | . | deps: type-is@~1.6.8 Fix type error when given invalid type to match against | deps: mime-types@~2.1.6 | . | . 1.13.3 / 2015-07-31 . deps: type-is@~1.6.6 deps: mime-types@~2.1.4 | . | . 1.13.2 / 2015-07-05 . deps: iconv-lite@0.4.11 | deps: qs@4.0.0 Fix dropping parameters like hasOwnProperty | Fix user-visible incompatibilities from 3.1.0 | Fix various parsing edge cases | . | deps: raw-body@~2.1.2 Fix error stack traces to skip makeError | deps: iconv-lite@0.4.11 | . | deps: type-is@~1.6.4 deps: mime-types@~2.1.2 | perf: enable strict mode | perf: remove argument reassignment | . | . 1.13.1 / 2015-06-16 . deps: qs@2.4.2 Downgraded from 3.1.0 because of user-visible incompatibilities | . | . 1.13.0 / 2015-06-14 . Add statusCode property on Errors, in addition to status | Change type default to application/json for JSON parser | Change type default to application/x-www-form-urlencoded for urlencoded parser | Provide static require analysis | Use the http-errors module to generate errors | deps: bytes@2.1.0 Slight optimizations | . | deps: iconv-lite@0.4.10 The encoding UTF-16 without BOM now defaults to UTF-16LE when detection fails | Leading BOM is now removed when decoding | . | deps: on-finished@~2.3.0 Add defined behavior for HTTP CONNECT requests | Add defined behavior for HTTP Upgrade requests | deps: ee-first@1.1.1 | . | deps: qs@3.1.0 Fix dropping parameters like hasOwnProperty | Fix various parsing edge cases | Parsed object now has null prototype | . | deps: raw-body@~2.1.1 Use unpipe module for unpiping requests | deps: iconv-lite@0.4.10 | . | deps: type-is@~1.6.3 deps: mime-types@~2.1.1 | perf: reduce try block size | perf: remove bitwise operations | . | perf: enable strict mode | perf: remove argument reassignment | perf: remove delete call | . 1.12.4 / 2015-05-10 . deps: debug@~2.2.0 | deps: qs@2.4.2 Fix allowing parameters like constructor | . | deps: on-finished@~2.2.1 | deps: raw-body@~2.0.1 Fix a false-positive when unpiping in Node.js 0.8 | deps: bytes@2.0.1 | . | deps: type-is@~1.6.2 deps: mime-types@~2.0.11 | . | . 1.12.3 / 2015-04-15 . Slight efficiency improvement when not debugging | deps: depd@~1.0.1 | deps: iconv-lite@0.4.8 Add encoding alias UNICODE-1-1-UTF-7 | . | deps: raw-body@1.3.4 Fix hanging callback if request aborts during read | deps: iconv-lite@0.4.8 | . | . 1.12.2 / 2015-03-16 . deps: qs@2.4.1 Fix error when parameter hasOwnProperty is present | . | . 1.12.1 / 2015-03-15 . deps: debug@~2.1.3 Fix high intensity foreground color for bold | deps: ms@0.7.0 | . | deps: type-is@~1.6.1 deps: mime-types@~2.0.10 | . | . 1.12.0 / 2015-02-13 . add debug messages | accept a function for the type option | use content-type to parse Content-Type headers | deps: iconv-lite@0.4.7 Gracefully support enumerables on Object.prototype | . | deps: raw-body@1.3.3 deps: iconv-lite@0.4.7 | . | deps: type-is@~1.6.0 fix argument reassignment | fix false-positives in hasBody Transfer-Encoding check | support wildcard for both type and subtype (*/*) | deps: mime-types@~2.0.9 | . | . 1.11.0 / 2015-01-30 . make internal extended: true depth limit infinity | deps: type-is@~1.5.6 deps: mime-types@~2.0.8 | . | . 1.10.2 / 2015-01-20 . deps: iconv-lite@0.4.6 Fix rare aliases of single-byte encodings | . | deps: raw-body@1.3.2 deps: iconv-lite@0.4.6 | . | . 1.10.1 / 2015-01-01 . deps: on-finished@~2.2.0 | deps: type-is@~1.5.5 deps: mime-types@~2.0.7 | . | . 1.10.0 / 2014-12-02 . make internal extended: true array limit dynamic | . 1.9.3 / 2014-11-21 . deps: iconv-lite@0.4.5 Fix Windows-31J and X-SJIS encoding support | . | deps: qs@2.3.3 Fix arrayLimit behavior | . | deps: raw-body@1.3.1 deps: iconv-lite@0.4.5 | . | deps: type-is@~1.5.3 deps: mime-types@~2.0.3 | . | . 1.9.2 / 2014-10-27 . deps: qs@2.3.2 Fix parsing of mixed objects and values | . | . 1.9.1 / 2014-10-22 . deps: on-finished@~2.1.1 Fix handling of pipelined requests | . | deps: qs@2.3.0 Fix parsing of mixed implicit and explicit arrays | . | deps: type-is@~1.5.2 deps: mime-types@~2.0.2 | . | . 1.9.0 / 2014-09-24 . include the charset in “unsupported charset” error message | include the encoding in “unsupported content encoding” error message | deps: depd@~1.0.0 | . 1.8.4 / 2014-09-23 . fix content encoding to be case-insensitive | . 1.8.3 / 2014-09-19 . deps: qs@2.2.4 Fix issue with object keys starting with numbers truncated | . | . 1.8.2 / 2014-09-15 . deps: depd@0.4.5 | . 1.8.1 / 2014-09-07 . deps: media-typer@0.3.0 | deps: type-is@~1.5.1 | . 1.8.0 / 2014-09-05 . make empty-body-handling consistent between chunked requests empty json produces {} | empty raw produces new Buffer(0) | empty text produces &#39;&#39; | empty urlencoded produces {} | . | deps: qs@2.2.3 Fix issue where first empty value in array is discarded | . | deps: type-is@~1.5.0 fix hasbody to be true for content-length: 0 | . | . 1.7.0 / 2014-09-01 . add parameterLimit option to urlencoded parser | change urlencoded extended array limit to 100 | respond with 413 when over parameterLimit in urlencoded | . 1.6.7 / 2014-08-29 . deps: qs@2.2.2 Remove unnecessary cloning | . | . 1.6.6 / 2014-08-27 . deps: qs@2.2.0 Array parsing fix | Performance improvements | . | . 1.6.5 / 2014-08-16 . deps: on-finished@2.1.0 | . 1.6.4 / 2014-08-14 . deps: qs@1.2.2 | . 1.6.3 / 2014-08-10 . deps: qs@1.2.1 | . 1.6.2 / 2014-08-07 . deps: qs@1.2.0 Fix parsing array of objects | . | . 1.6.1 / 2014-08-06 . deps: qs@1.1.0 Accept urlencoded square brackets | Accept empty values in implicit array notation | . | . 1.6.0 / 2014-08-05 . deps: qs@1.0.2 Complete rewrite | Limits array length to 20 | Limits object depth to 5 | Limits parameters to 1,000 | . | . 1.5.2 / 2014-07-27 . deps: depd@0.4.4 Work-around v8 generating empty stack traces | . | . 1.5.1 / 2014-07-26 . deps: depd@0.4.3 Fix exception when global Error.stackTraceLimit is too low | . | . 1.5.0 / 2014-07-20 . deps: depd@0.4.2 Add TRACE_DEPRECATION environment variable | Remove non-standard grey color from color output | Support --no-deprecation argument | Support --trace-deprecation argument | . | deps: iconv-lite@0.4.4 Added encoding UTF-7 | . | deps: raw-body@1.3.0 deps: iconv-lite@0.4.4 | Added encoding UTF-7 | Fix Cannot switch to old mode now error on Node.js 0.10+ | . | deps: type-is@~1.3.2 | . 1.4.3 / 2014-06-19 . deps: type-is@1.3.1 fix global variable leak | . | . 1.4.2 / 2014-06-19 . deps: type-is@1.3.0 improve type parsing | . | . 1.4.1 / 2014-06-19 . fix urlencoded extended deprecation message | . 1.4.0 / 2014-06-19 . add text parser | add raw parser | check accepted charset in content-type (accepts utf-8) | check accepted encoding in content-encoding (accepts identity) | deprecate bodyParser() middleware; use .json() and .urlencoded() as needed | deprecate urlencoded() without provided extended option | lazy-load urlencoded parsers | parsers split into files for reduced mem usage | support gzip and deflate bodies set inflate: false to turn off | . | deps: raw-body@1.2.2 Support all encodings from iconv-lite | . | . 1.3.1 / 2014-06-11 . deps: type-is@1.2.1 Switch dependency from mime to mime-types@1.0.0 | . | . 1.3.0 / 2014-05-31 . add extended option to urlencoded parser | . 1.2.2 / 2014-05-27 . deps: raw-body@1.1.6 assert stream encoding on node.js 0.8 | assert stream encoding on node.js &lt; 0.10.6 | deps: bytes@1 | . | . 1.2.1 / 2014-05-26 . invoke next(err) after request fully read prevents hung responses and socket hang ups | . | . 1.2.0 / 2014-05-11 . add verify option | deps: type-is@1.2.0 support suffix matching | . | . 1.1.2 / 2014-05-11 . improve json parser speed | . 1.1.1 / 2014-05-11 . fix repeated limit parsing with every request | . 1.1.0 / 2014-05-10 . add type option | deps: pin for safety and consistency | . 1.0.2 / 2014-04-14 . use type-is module | . 1.0.1 / 2014-03-20 . lower default limits to 100kb | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/body-parser/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/body-parser/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page24": {
          "title": "Security Policies and Procedures",
          "content": "Security Policies and Procedures . Reporting a Bug . The Express team and community take all security bugs seriously. Thank you for improving the security of Express. We appreciate your efforts and responsible disclosure and will make every effort to acknowledge your contributions. . Report security bugs by emailing the current owner(s) of body-parser. This information can be found in the npm registry using the command npm owner ls body-parser. If unsure or unable to get the information from the above, open an issue in the project issue tracker asking for the current contact information. . To ensure the timely response to your report, please ensure that the entirety of the report is contained within the email body and not solely behind a web link or an attachment. . At least one owner will acknowledge your email within 48 hours, and will send a more detailed response within 48 hours indicating the next steps in handling your report. After the initial reply to your report, the owners will endeavor to keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/body-parser/SECURITY.html",
          "relUrl": "/node_backend_Trystan/node_modules/body-parser/SECURITY.html",
          "date": ""
      }
      
  

  
      ,"page25": {
          "title": "2.6.9 / 2017-09-22",
          "content": "2.6.9 / 2017-09-22 . remove ReDoS regexp in %o formatter (#504) | . 2.6.8 / 2017-05-18 . Fix: Check for undefined on browser globals (#462, @marbemac) | . 2.6.7 / 2017-05-16 . Fix: Update ms to 2.0.0 to fix regular expression denial of service vulnerability (#458, @hubdotcom) | Fix: Inline extend function in node implementation (#452, @dougwilson) | Docs: Fix typo (#455, @msasad) | . 2.6.5 / 2017-04-27 . Fix: null reference check on window.documentElement.style.WebkitAppearance (#447, @thebigredgeek) | Misc: clean up browser reference checks (#447, @thebigredgeek) | Misc: add npm-debug.log to .gitignore (@thebigredgeek) | . 2.6.4 / 2017-04-20 . Fix: bug that would occure if process.env.DEBUG is a non-string value. (#444, @LucianBuzzo) | Chore: ignore bower.json in npm installations. (#437, @joaovieira) | Misc: update “ms” to v0.7.3 (@tootallnate) | . 2.6.3 / 2017-03-13 . Fix: Electron reference to process.env.DEBUG (#431, @paulcbetts) | Docs: Changelog fix (@thebigredgeek) | . 2.6.2 / 2017-03-10 . Fix: DEBUG_MAX_ARRAY_LENGTH (#420, @slavaGanzin) | Docs: Add backers and sponsors from Open Collective (#422, @piamancini) | Docs: Add Slackin invite badge (@tootallnate) | . 2.6.1 / 2017-02-10 . Fix: Module’s export default syntax fix for IE8 Expected identifier error | Fix: Whitelist DEBUG_FD for values 1 and 2 only (#415, @pi0) | Fix: IE8 “Expected identifier” error (#414, @vgoma) | Fix: Namespaces would not disable once enabled (#409, @musikov) | . 2.6.0 / 2016-12-28 . Fix: added better null pointer checks for browser useColors (@thebigredgeek) | Improvement: removed explicit window.debug export (#404, @tootallnate) | Improvement: deprecated DEBUG_FD environment variable (#405, @tootallnate) | . 2.5.2 / 2016-12-25 . Fix: reference error on window within webworkers (#393, @KlausTrainer) | Docs: fixed README typo (#391, @lurch) | Docs: added notice about v3 api discussion (@thebigredgeek) | . 2.5.1 / 2016-12-20 . Fix: babel-core compatibility | . 2.5.0 / 2016-12-20 . Fix: wrong reference in bower file (@thebigredgeek) | Fix: webworker compatibility (@thebigredgeek) | Fix: output formatting issue (#388, @kribblo) | Fix: babel-loader compatibility (#383, @escwald) | Misc: removed built asset from repo and publications (@thebigredgeek) | Misc: moved source files to /src (#378, @yamikuronue) | Test: added karma integration and replaced babel with browserify for browser tests (#378, @yamikuronue) | Test: coveralls integration (#378, @yamikuronue) | Docs: simplified language in the opening paragraph (#373, @yamikuronue) | . 2.4.5 / 2016-12-17 . Fix: navigator undefined in Rhino (#376, @jochenberger) | Fix: custom log function (#379, @hsiliev) | Improvement: bit of cleanup + linting fixes (@thebigredgeek) | Improvement: rm non-maintainted dist/ dir (#375, @freewil) | Docs: simplified language in the opening paragraph. (#373, @yamikuronue) | . 2.4.4 / 2016-12-14 . Fix: work around debug being loaded in preload scripts for electron (#368, @paulcbetts) | . 2.4.3 / 2016-12-14 . Fix: navigation.userAgent error for react native (#364, @escwald) | . 2.4.2 / 2016-12-14 . Fix: browser colors (#367, @tootallnate) | Misc: travis ci integration (@thebigredgeek) | Misc: added linting and testing boilerplate with sanity check (@thebigredgeek) | . 2.4.1 / 2016-12-13 . Fix: typo that broke the package (#356) | . 2.4.0 / 2016-12-13 . Fix: bower.json references unbuilt src entry point (#342, @justmatt) | Fix: revert “handle regex special characters” (@tootallnate) | Feature: configurable util.inspect()`options for NodeJS (#327, @tootallnate) | Feature: %O`(big O) pretty-prints objects (#322, @tootallnate) | Improvement: allow colors in workers (#335, @botverse) | Improvement: use same color for same namespace. (#338, @lchenay) | . 2.3.3 / 2016-11-09 . Fix: Catch JSON.stringify() errors (#195, Jovan Alleyne) | Fix: Returning localStorage saved values (#331, Levi Thomason) | Improvement: Don’t create an empty object when no process (Nathan Rajlich) | . 2.3.2 / 2016-11-09 . Fix: be super-safe in index.js as well (@TooTallNate) | Fix: should check whether process exists (Tom Newby) | . 2.3.1 / 2016-11-09 . Fix: Added electron compatibility (#324, @paulcbetts) | Improvement: Added performance optimizations (@tootallnate) | Readme: Corrected PowerShell environment variable example (#252, @gimre) | Misc: Removed yarn lock file from source control (#321, @fengmk2) | . 2.3.0 / 2016-11-07 . Fix: Consistent placement of ms diff at end of output (#215, @gorangajic) | Fix: Escaping of regex special characters in namespace strings (#250, @zacronos) | Fix: Fixed bug causing crash on react-native (#282, @vkarpov15) | Feature: Enabled ES6+ compatible import via default export (#212 @bucaran) | Feature: Added %O formatter to reflect Chrome’s console.log capability (#279, @oncletom) | Package: Update “ms” to 0.7.2 (#315, @DevSide) | Package: removed superfluous version property from bower.json (#207 @kkirsche) | Readme: fix USE_COLORS to DEBUG_COLORS | Readme: Doc fixes for format string sugar (#269, @mlucool) | Readme: Updated docs for DEBUG_FD and DEBUG_COLORS environment variables (#232, @mattlyons0) | Readme: doc fixes for PowerShell (#271 #243, @exoticknight @unreadable) | Readme: better docs for browser support (#224, @matthewmueller) | Tooling: Added yarn integration for development (#317, @thebigredgeek) | Misc: Renamed History.md to CHANGELOG.md (@thebigredgeek) | Misc: Added license file (#226 #274, @CantemoInternal @sdaitzman) | Misc: Updated contributors (@thebigredgeek) | . 2.2.0 / 2015-05-09 . package: update “ms” to v0.7.1 (#202, @dougwilson) | README: add logging to file example (#193, @DanielOchoa) | README: fixed a typo (#191, @amir-s) | browser: expose storage (#190, @stephenmathieson) | Makefile: add a distclean target (#189, @stephenmathieson) | . 2.1.3 / 2015-03-13 . Updated stdout/stderr example (#186) | Updated example/stdout.js to match debug current behaviour | Renamed example/stderr.js to stdout.js | Update Readme.md (#184) | replace high intensity foreground color for bold (#182, #183) | . 2.1.2 / 2015-03-01 . dist: recompile | update “ms” to v0.7.0 | package: update “browserify” to v9.0.3 | component: fix “ms.js” repo location | changed bower package name | updated documentation about using debug in a browser | fix: security error on safari (#167, #168, @yields) | . 2.1.1 / 2014-12-29 . browser: use typeof to check for console existence | browser: check for console.log truthiness (fix IE 8/9) | browser: add support for Chrome apps | Readme: added Windows usage remarks | Add bower.json to properly support bower install | . 2.1.0 / 2014-10-15 . node: implement DEBUG_FD env variable support | package: update “browserify” to v6.1.0 | package: add “license” field to package.json (#135, @panuhorsmalahti) | . 2.0.0 / 2014-09-01 . package: update “browserify” to v5.11.0 | node: use stderr rather than stdout for logging (#29, @stephenmathieson) | . 1.0.4 / 2014-07-15 . dist: recompile | example: remove console.info() log usage | example: add “Content-Type” UTF-8 header to browser example | browser: place %c marker after the space character | browser: reset the “content” color via color: inherit | browser: add colors support for Firefox &gt;= v31 | debug: prefer an instance log() function over the global one (#119) | Readme: update documentation about styled console logs for FF v31 (#116, @wryk) | . 1.0.3 / 2014-07-09 . Add support for multiple wildcards in namespaces (#122, @seegno) | browser: fix lint | . 1.0.2 / 2014-06-10 . browser: update color palette (#113, @gscottolson) | common: make console logging function configurable (#108, @timoxley) | node: fix %o colors on old node &lt;= 0.8.x | Makefile: find node path using shell/which (#109, @timoxley) | . 1.0.1 / 2014-06-06 . browser: use removeItem() to clear localStorage | browser, node: don’t set DEBUG if namespaces is undefined (#107, @leedm777) | package: add “contributors” section | node: fix comment typo | README: list authors | . 1.0.0 / 2014-06-04 . make ms diff be global, not be scope | debug: ignore empty strings in enable() | node: make DEBUG_COLORS able to disable coloring | *: export the colors array | npmignore: don’t publish the dist dir | Makefile: refactor to use browserify | package: add “browserify” as a dev dependency | Readme: add Web Inspector Colors section | node: reset terminal color for the debug content | node: map “%o” to util.inspect() | browser: map “%j” to JSON.stringify() | debug: add custom “formatters” | debug: use “ms” module for humanizing the diff | Readme: add “bash” syntax highlighting | browser: add Firebug color support | browser: add colors for WebKit browsers | node: apply log to console | rewrite: abstract common logic for Node &amp; browsers | add .jshintrc file | . 0.8.1 / 2014-04-14 . package: re-add the “component” section | . 0.8.0 / 2014-03-30 . add enable() method for nodejs. Closes #27 | change from stderr to stdout | remove unnecessary index.js file | . 0.7.4 / 2013-11-13 . remove “browserify” key from package.json (fixes something in browserify) | . 0.7.3 / 2013-10-30 . fix: catch localStorage security error when cookies are blocked (Chrome) | add debug(err) support. Closes #46 | add .browser prop to package.json. Closes #42 | . 0.7.2 / 2013-02-06 . fix package.json | fix: Mobile Safari (private mode) is broken with debug | fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript | . 0.7.1 / 2013-02-05 . add repository URL to package.json | add DEBUG_COLORED to force colored output | add browserify support | fix component. Closes #24 | . 0.7.0 / 2012-05-04 . Added .component to package.json | Added debug.component.js build | . 0.6.0 / 2012-03-16 . Added support for “-“ prefix in DEBUG [Vinay Pulim] | Added .enabled flag to the node version [TooTallNate] | . 0.5.0 / 2012-02-02 . Added: humanize diffs. Closes #8 | Added debug.disable() to the CS variant | Removed padding. Closes #10 | Fixed: persist client-side variant again. Closes #9 | . 0.4.0 / 2012-02-01 . Added browser variant support for older browsers [TooTallNate] | Added debug.enable(&#39;project:*&#39;) to browser variant [TooTallNate] | Added padding to diff (moved it to the right) | . 0.3.0 / 2012-01-26 . Added millisecond diff when isatty, otherwise UTC string | . 0.2.0 / 2012-01-22 . Added wildcard support | . 0.1.0 / 2011-12-02 . Added: remove colors unless stderr isatty [TooTallNate] | . 0.0.1 / 2010-01-03 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/body-parser/node_modules/debug/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/body-parser/node_modules/debug/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page26": {
          "title": "3.1.2 / 2022-01-27",
          "content": "3.1.2 / 2022-01-27 . Fix return value for un-parsable strings | . 3.1.1 / 2021-11-15 . Fix “thousandsSeparator” incorrecting formatting fractional part | . 3.1.0 / 2019-01-22 . Add petabyte (pb) support | . 3.0.0 / 2017-08-31 . Change “kB” to “KB” in format output | Remove support for Node.js 0.6 | Remove support for ComponentJS | . 2.5.0 / 2017-03-24 . Add option “unit” | . 2.4.0 / 2016-06-01 . Add option “unitSeparator” | . 2.3.0 / 2016-02-15 . Drop partial bytes on all parsed units | Fix non-finite numbers to .format to return null | Fix parsing byte string that looks like hex | perf: hoist regular expressions | . 2.2.0 / 2015-11-13 . add option “decimalPlaces” | add option “fixedDecimals” | . 2.1.0 / 2015-05-21 . add .format export | add .parse export | . 2.0.2 / 2015-05-20 . remove map recreation | remove unnecessary object construction | . 2.0.1 / 2015-05-07 . fix browserify require | remove node.extend dependency | . 2.0.0 / 2015-04-12 . add option “case” | add option “thousandsSeparator” | return “null” on invalid parse input | support proper round-trip: bytes(bytes(num)) === num | units no longer case sensitive when parsing | . 1.0.0 / 2014-05-05 . add negative support. fixes #6 | . 0.3.0 / 2014-03-19 . added terabyte support | . 0.2.1 / 2013-04-01 . add .component | . 0.2.0 / 2012-10-28 . bytes(200).should.eql(‘200b’) | . 0.1.0 / 2012-07-04 . add bytes to string conversion [yields] | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/bytes/History.html",
          "relUrl": "/node_backend_Trystan/node_modules/bytes/History.html",
          "date": ""
      }
      
  

  
      ,"page27": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v1.0.5 - 2023-10-19 . Commits . [Fix] throw an error on non-functions as early as possible f262408 | [Deps] update set-function-length 3fff271 | . v1.0.4 - 2023-10-19 . v1.0.3 - 2023-10-19 . Commits . [actions] reuse common workflows a994df6 | [meta] use npmignore to autogenerate an npmignore file eef3ef2 | [readme] flesh out content 1845ccf | [actions] use node/install instead of node/run; use codecov action 5b47d53 | [Refactor] use set-function-length a0e165c | [Dev Deps] update @ljharb/eslint-config, aud, tape 9c50103 | [meta] simplify “exports” 019c6d0 | [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, safe-publish-latest, tape 23bd718 | [actions] update codecov uploader 62552d7 | [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, tape ec81665 | [Dev Deps] update eslint, @ljharb/eslint-config, safe-publish-latest, tape 35d67fc | [Dev Deps] update eslint, @ljharb/eslint-config, aud, tape 0266d8d | [Dev Deps] update @ljharb/eslint-config, aud, tape 43a5b28 | [Deps] update define-data-property, function-bind, get-intrinsic 780eb36 | [Dev Deps] update aud, tape 90d50ad | [meta] use prepublishOnly script for npm 7+ 44c5433 | [Deps] update get-intrinsic 86bfbfc | [Deps] update get-intrinsic 5c53354 | [actions] update checkout action 4c393a8 | [Deps] update get-intrinsic 4e70bde | [Deps] update get-intrinsic 55ae803 | . v1.0.2 - 2021-01-11 . Commits . [Fix] properly include the receiver in the bound length dbae7bc | . v1.0.1 - 2021-01-08 . Commits . [Tests] migrate tests to Github Actions b6db284 | [meta] do not publish github action workflow files ec7fe46 | [Fix] preserve original function’s length when possible adbceaa | [Tests] gather coverage data on every job d69e23c | [Dev Deps] update eslint, @ljharb/eslint-config, aud, tape 2fd3586 | [Deps] update get-intrinsic f23e931 | [Deps] update get-intrinsic 72d9f44 | [meta] fix FUNDING.yml e723573 | [eslint] ignore coverage output 15e76d2 | [meta] add Automatic Rebase and Require Allow Edits workflows 8fa4dab | . v1.0.0 - 2020-10-30 . Commits . Initial commit 306cf98 | Tests e10d0bb | Implementation 43852ed | npm init 408f860 | [meta] add Automatic Rebase and Require Allow Edits workflows fb349b2 | [meta] add auto-changelog c4001fc | [meta] add “funding”; create FUNDING.yml d4d6d29 | [Tests] add npm run lint dedfb98 | Only apps should have lockfiles 54ac776 | [meta] add safe-publish-latest 9ea8e43 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/call-bind/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/call-bind/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page28": {
          "title": "0.5.4 / 2021-12-10",
          "content": "0.5.4 / 2021-12-10 . deps: safe-buffer@5.2.1 | . 0.5.3 / 2018-12-17 . Use safe-buffer for improved Buffer API | . 0.5.2 / 2016-12-08 . Fix parse to accept any linear whitespace character | . 0.5.1 / 2016-01-17 . perf: enable strict mode | . 0.5.0 / 2014-10-11 . Add parse function | . 0.4.0 / 2014-09-21 . Expand non-Unicode filename to the full ISO-8859-1 charset | . 0.3.0 / 2014-09-20 . Add fallback option | Add type option | . 0.2.0 / 2014-09-19 . Reduce ambiguity of file names with hex escape in buggy browsers | . 0.1.2 / 2014-09-19 . Fix periodic invalid Unicode filename header | . 0.1.1 / 2014-09-19 . Fix invalid characters appearing in filename* parameter | . 0.1.0 / 2014-09-18 . Make the filename argument optional | . 0.0.0 / 2014-09-18 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/content-disposition/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/content-disposition/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page29": {
          "title": "1.0.5 / 2023-01-29",
          "content": "1.0.5 / 2023-01-29 . perf: skip value escaping when unnecessary | . 1.0.4 / 2017-09-11 . perf: skip parameter parsing when no parameters | . 1.0.3 / 2017-09-10 . perf: remove argument reassignment | . 1.0.2 / 2016-05-09 . perf: enable strict mode | . 1.0.1 / 2015-02-13 . Improve missing Content-Type header error message | . 1.0.0 / 2015-02-01 . Initial implementation, derived from media-typer@0.3.0 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/content-type/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/content-type/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page30": {
          "title": "1.0.6 / 2015-02-03",
          "content": "1.0.6 / 2015-02-03 . use npm test instead of make test to run tests | clearer assertion messages when checking input | . 1.0.5 / 2014-09-05 . add license to package.json | . 1.0.4 / 2014-06-25 . corrected avoidance of timing attacks (thanks @tenbits!) | . 1.0.3 / 2014-01-28 . [incorrect] fix for timing attacks | . 1.0.2 / 2014-01-28 . fix missing repository warning | fix typo in test | . 1.0.1 / 2013-04-15 . Revert “Changed underlying HMAC algo. to sha512.” | Revert “Fix for timing attacks on MAC verification.” | . 0.0.1 / 2010-01-03 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/cookie-signature/History.html",
          "relUrl": "/node_backend_Trystan/node_modules/cookie-signature/History.html",
          "date": ""
      }
      
  

  
      ,"page31": {
          "title": "0.4.2 / 2022-02-02",
          "content": "0.4.2 / 2022-02-02 . pref: read value only when assigning in parse | pref: remove unnecessary regexp in parse | . 0.4.1 / 2020-04-21 . Fix maxAge option to reject invalid values | . 0.4.0 / 2019-05-15 . Add SameSite=None support | . 0.3.1 / 2016-05-26 . Fix sameSite: true to work with draft-7 clients true now sends SameSite=Strict instead of SameSite | . | . 0.3.0 / 2016-05-26 . Add sameSite option Replaces firstPartyOnly option, never implemented by browsers | . | Improve error message when encode is not a function | Improve error message when expires is not a Date | . 0.2.4 / 2016-05-20 . perf: enable strict mode | perf: use for loop in parse | perf: use string concatination for serialization | . 0.2.3 / 2015-10-25 . Fix cookie Max-Age to never be a floating point number | . 0.2.2 / 2015-09-17 . Fix regression when setting empty cookie value Ease the new restriction, which is just basic header-level validation | . | Fix typo in invalid value errors | . 0.2.1 / 2015-09-17 . Throw on invalid values provided to serialize Ensures the resulting string is a valid HTTP header value | . | . 0.2.0 / 2015-08-13 . Add firstPartyOnly option | Throw better error for invalid argument to parse | perf: hoist regular expression | . 0.1.5 / 2015-09-17 . Fix regression when setting empty cookie value Ease the new restriction, which is just basic header-level validation | . | Fix typo in invalid value errors | . 0.1.4 / 2015-09-17 . Throw better error for invalid argument to parse | Throw on invalid values provided to serialize Ensures the resulting string is a valid HTTP header value | . | . 0.1.3 / 2015-05-19 . Reduce the scope of try-catch deopt | Remove argument reassignments | . 0.1.2 / 2014-04-16 . Remove unnecessary files from npm package | . 0.1.1 / 2014-02-23 . Fix bad parse when cookie value contained a comma | Fix support for maxAge of 0 | . 0.1.0 / 2013-05-01 . Add decode option | Add encode option | . 0.0.6 / 2013-04-08 . Ignore cookie parts missing = | . 0.0.5 / 2012-10-29 . Return raw cookie value if value unescape errors | . 0.0.4 / 2012-06-21 . Use encode/decodeURIComponent for cookie encoding/decoding Improve server/client interoperability | . | . 0.0.3 / 2012-06-06 . Only escape special characters per the cookie RFC | . 0.0.2 / 2012-06-01 . Fix maxAge option to not throw error | . 0.0.1 / 2012-05-28 . Add more tests | . 0.0.0 / 2012-05-28 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/cookie/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/cookie/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page32": {
          "title": "2.8.5 / 2018-11-04",
          "content": "2.8.5 / 2018-11-04 . Fix setting maxAge option to 0 | . 2.8.4 / 2017-07-12 . Work-around Safari bug in default pre-flight response | . 2.8.3 / 2017-03-29 . Fix error when options delegate missing methods option | . 2.8.2 / 2017-03-28 . Fix error when frozen options are passed | Send “Vary: Origin” when using regular expressions | Send “Vary: Access-Control-Request-Headers” when dynamic allowedHeaders | . 2.8.1 / 2016-09-08 . This release only changed documentation. . 2.8.0 / 2016-08-23 . Add optionsSuccessStatus option | . 2.7.2 / 2016-08-23 . Fix error when Node.js running in strict mode | . 2.7.1 / 2015-05-28 . Move module into expressjs organization | . 2.7.0 / 2015-05-28 . Allow array of matching condition as origin option | Allow regular expression as origin option | . 2.6.1 / 2015-05-28 . Update license in package.json | . 2.6.0 / 2015-04-27 . Add preflightContinue option | Fix “Vary: Origin” header added for “*” | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/cors/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/cors/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page33": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v1.1.1 - 2023-10-12 . Commits . [Tests] fix tests in ES3 engines 5c6920e | [Dev Deps] update @types/es-value-fixtures, @types/for-each, @types/gopd, @types/has-property-descriptors, tape, typescript 7d82dfc | [Fix] IE 8 has a broken Object.defineProperty 0672e1a | [meta] emit types on prepack 73acb1f | [Dev Deps] update tape, typescript 9489a77 | . v1.1.0 - 2023-09-13 . Commits . [New] add loose arg 155235a | [New] allow null to be passed for the non* args 7d2fa5f | . v1.0.1 - 2023-09-12 . Commits . [meta] add TS types 43d763c | [Dev Deps] update @types/tape, typescript f444985 | [meta] add safe-publish-latest, 172bb10 | . v1.0.0 - 2023-09-12 . Commits . Initial implementation, tests, readme 5b43d6b | Initial commit 35e577a | npm init 82a0a04 | Only apps should have lockfiles 96df244 | [meta] use npmignore to autogenerate an npmignore file a87ff18 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/define-data-property/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/define-data-property/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page34": {
          "title": "2.0.0 / 2018-10-26",
          "content": "2.0.0 / 2018-10-26 . Drop support for Node.js 0.6 | Replace internal eval usage with Function constructor | Use instance methods on process to check for listeners | . 1.1.2 / 2018-01-11 . perf: remove argument reassignment | Support Node.js 0.6 to 9.x | . 1.1.1 / 2017-07-27 . Remove unnecessary Buffer loading | Support Node.js 0.6 to 8.x | . 1.1.0 / 2015-09-14 . Enable strict mode in more places | Support io.js 3.x | Support io.js 2.x | Support web browser loading Requires bundler like Browserify or webpack | . | . 1.0.1 / 2015-04-07 . Fix TypeErrors when under &#39;use strict&#39; code | Fix useless type name on auto-generated messages | Support io.js 1.x | Support Node.js 0.12 | . 1.0.0 / 2014-09-17 . No changes | . 0.4.5 / 2014-09-09 . Improve call speed to functions using the function wrapper | Support Node.js 0.6 | . 0.4.4 / 2014-07-27 . Work-around v8 generating empty stack traces | . 0.4.3 / 2014-07-26 . Fix exception when global Error.stackTraceLimit is too low | . 0.4.2 / 2014-07-19 . Correct call site for wrapped functions and properties | . 0.4.1 / 2014-07-19 . Improve automatic message generation for function properties | . 0.4.0 / 2014-07-19 . Add TRACE_DEPRECATION environment variable | Remove non-standard grey color from color output | Support --no-deprecation argument | Support --trace-deprecation argument | Support deprecate.property(fn, prop, message) | . 0.3.0 / 2014-06-16 . Add NO_DEPRECATION environment variable | . 0.2.0 / 2014-06-15 . Add deprecate.property(obj, prop, message) | Remove supports-color dependency for node.js 0.8 | . 0.1.0 / 2014-06-15 . Add deprecate.function(fn, message) | Add process.on(&#39;deprecation&#39;, fn) emitter | Automatically generate message when omitted from deprecate() | . 0.0.1 / 2014-06-15 . Fix warning for dynamic calls at singe call site | . 0.0.0 / 2014-06-15 . Initial implementation | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/depd/History.html",
          "relUrl": "/node_backend_Trystan/node_modules/depd/History.html",
          "date": ""
      }
      
  

  
      ,"page35": {
          "title": "1.0.2 / 2018-01-21",
          "content": "1.0.2 / 2018-01-21 . Fix encoding % as last character | . 1.0.1 / 2016-06-09 . Fix encoding unpaired surrogates at start/end of string | . 1.0.0 / 2016-06-08 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/encodeurl/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/encodeurl/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page36": {
          "title": "1.8.1 / 2017-09-12",
          "content": "1.8.1 / 2017-09-12 . perf: replace regular expression with substring | . 1.8.0 / 2017-02-18 . Use SHA1 instead of MD5 for ETag hashing Improves performance for larger entities | Works with FIPS 140-2 OpenSSL configuration | . | . 1.7.0 / 2015-06-08 . Always include entity length in ETags for hash length extensions | Generate non-Stats ETags using MD5 only (no longer CRC32) | Improve stat performance by removing hashing | Remove base64 padding in ETags to shorten | Use MD5 instead of MD4 in weak ETags over 1KB | . 1.6.0 / 2015-05-10 . Improve support for JXcore | Remove requirement of atime in the stats object | Support “fake” stats objects in environments without fs | . 1.5.1 / 2014-11-19 . deps: crc@3.2.1 Minor fixes | . | . 1.5.0 / 2014-10-14 . Improve string performance | Slightly improve speed for weak ETags over 1KB | . 1.4.0 / 2014-09-21 . Support “fake” stats objects | Support Node.js 0.6 | . 1.3.1 / 2014-09-14 . Use the (new and improved) crc for crc32 | . 1.3.0 / 2014-08-29 . Default strings to strong ETags | Improve speed for weak ETags over 1KB | . 1.2.1 / 2014-08-29 . Use the (much faster) buffer-crc32 for crc32 | . 1.2.0 / 2014-08-24 . Add support for file stat objects | . 1.1.0 / 2014-08-24 . Add fast-path for empty entity | Add weak ETag generation | Shrink size of generated ETags | . 1.0.1 / 2014-08-24 . Fix behavior of string containing Unicode | . 1.0.0 / 2014-05-18 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/etag/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/etag/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page37": {
          "title": "4.18.2 / 2022-10-08",
          "content": "4.18.2 / 2022-10-08 . Fix regression routing a large stack in a single route | deps: body-parser@1.20.1 deps: qs@6.11.0 | perf: remove unnecessary object clone | . | deps: qs@6.11.0 | . 4.18.1 / 2022-04-29 . Fix hanging on large stack of sync routes | . 4.18.0 / 2022-04-25 . Add “root” option to res.download | Allow options without filename in res.download | Deprecate string and non-integer arguments to res.status | Fix behavior of null/undefined as maxAge in res.cookie | Fix handling very large stacks of sync middleware | Ignore Object.prototype values in settings through app.set/app.get | Invoke default with same arguments as types in res.format | Support proper 205 responses using res.send | Use http-errors for res.format error | deps: body-parser@1.20.0 Fix error message for json parse whitespace in strict | Fix internal error when inflated body exceeds limit | Prevent loss of async hooks context | Prevent hanging when request already read | deps: depd@2.0.0 | deps: http-errors@2.0.0 | deps: on-finished@2.4.1 | deps: qs@6.10.3 | deps: raw-body@2.5.1 | . | deps: cookie@0.5.0 Add priority option | Fix expires option to reject invalid dates | . | deps: depd@2.0.0 Replace internal eval usage with Function constructor | Use instance methods on process to check for listeners | . | deps: finalhandler@1.2.0 Remove set content headers that break response | deps: on-finished@2.4.1 | deps: statuses@2.0.1 | . | deps: on-finished@2.4.1 Prevent loss of async hooks context | . | deps: qs@6.10.3 | deps: send@0.18.0 Fix emitted 416 error missing headers property | Limit the headers removed for 304 response | deps: depd@2.0.0 | deps: destroy@1.2.0 | deps: http-errors@2.0.0 | deps: on-finished@2.4.1 | deps: statuses@2.0.1 | . | deps: serve-static@1.15.0 deps: send@0.18.0 | . | deps: statuses@2.0.1 Remove code 306 | Rename 425 Unordered Collection to standard 425 Too Early | . | . 4.17.3 / 2022-02-16 . deps: accepts@~1.3.8 deps: mime-types@~2.1.34 | deps: negotiator@0.6.3 | . | deps: body-parser@1.19.2 deps: bytes@3.1.2 | deps: qs@6.9.7 | deps: raw-body@2.4.3 | . | deps: cookie@0.4.2 | deps: qs@6.9.7 Fix handling of __proto__ keys | . | pref: remove unnecessary regexp for trust proxy | . 4.17.2 / 2021-12-16 . Fix handling of undefined in res.jsonp | Fix handling of undefined when &quot;json escape&quot; is enabled | Fix incorrect middleware execution with unanchored RegExps | Fix res.jsonp(obj, status) deprecation message | Fix typo in res.is JSDoc | deps: body-parser@1.19.1 deps: bytes@3.1.1 | deps: http-errors@1.8.1 | deps: qs@6.9.6 | deps: raw-body@2.4.2 | deps: safe-buffer@5.2.1 | deps: type-is@~1.6.18 | . | deps: content-disposition@0.5.4 deps: safe-buffer@5.2.1 | . | deps: cookie@0.4.1 Fix maxAge option to reject invalid values | . | deps: proxy-addr@~2.0.7 Use req.socket over deprecated req.connection | deps: forwarded@0.2.0 | deps: ipaddr.js@1.9.1 | . | deps: qs@6.9.6 | deps: safe-buffer@5.2.1 | deps: send@0.17.2 deps: http-errors@1.8.1 | deps: ms@2.1.3 | pref: ignore empty http tokens | . | deps: serve-static@1.14.2 deps: send@0.17.2 | . | deps: setprototypeof@1.2.0 | . 4.17.1 / 2019-05-25 . Revert “Improve error message for null/undefined to res.status” | . 4.17.0 / 2019-05-16 . Add express.raw to parse bodies into Buffer | Add express.text to parse bodies into string | Improve error message for non-strings to res.sendFile | Improve error message for null/undefined to res.status | Support multiple hosts in X-Forwarded-Host | deps: accepts@~1.3.7 | deps: body-parser@1.19.0 Add encoding MIK | Add petabyte (pb) support | Fix parsing array brackets after index | deps: bytes@3.1.0 | deps: http-errors@1.7.2 | deps: iconv-lite@0.4.24 | deps: qs@6.7.0 | deps: raw-body@2.4.0 | deps: type-is@~1.6.17 | . | deps: content-disposition@0.5.3 | deps: cookie@0.4.0 Add SameSite=None support | . | deps: finalhandler@~1.1.2 Set stricter Content-Security-Policy header | deps: parseurl@~1.3.3 | deps: statuses@~1.5.0 | . | deps: parseurl@~1.3.3 | deps: proxy-addr@~2.0.5 deps: ipaddr.js@1.9.0 | . | deps: qs@6.7.0 Fix parsing array brackets after index | . | deps: range-parser@~1.2.1 | deps: send@0.17.1 Set stricter CSP header in redirect &amp; error responses | deps: http-errors@~1.7.2 | deps: mime@1.6.0 | deps: ms@2.1.1 | deps: range-parser@~1.2.1 | deps: statuses@~1.5.0 | perf: remove redundant path.normalize call | . | deps: serve-static@1.14.1 Set stricter CSP header in redirect response | deps: parseurl@~1.3.3 | deps: send@0.17.1 | . | deps: setprototypeof@1.1.1 | deps: statuses@~1.5.0 Add 103 Early Hints | . | deps: type-is@~1.6.18 deps: mime-types@~2.1.24 | perf: prevent internal throw on invalid type | . | . 4.16.4 / 2018-10-10 . Fix issue where &quot;Request aborted&quot; may be logged in res.sendfile | Fix JSDoc for Router constructor | deps: body-parser@1.18.3 Fix deprecation warnings on Node.js 10+ | Fix stack trace for strict json parse error | deps: depd@~1.1.2 | deps: http-errors@~1.6.3 | deps: iconv-lite@0.4.23 | deps: qs@6.5.2 | deps: raw-body@2.3.3 | deps: type-is@~1.6.16 | . | deps: proxy-addr@~2.0.4 deps: ipaddr.js@1.8.0 | . | deps: qs@6.5.2 | deps: safe-buffer@5.1.2 | . 4.16.3 / 2018-03-12 . deps: accepts@~1.3.5 deps: mime-types@~2.1.18 | . | deps: depd@~1.1.2 perf: remove argument reassignment | . | deps: encodeurl@~1.0.2 Fix encoding % as last character | . | deps: finalhandler@1.1.1 Fix 404 output for bad / missing pathnames | deps: encodeurl@~1.0.2 | deps: statuses@~1.4.0 | . | deps: proxy-addr@~2.0.3 deps: ipaddr.js@1.6.0 | . | deps: send@0.16.2 Fix incorrect end tag in default error &amp; redirects | deps: depd@~1.1.2 | deps: encodeurl@~1.0.2 | deps: statuses@~1.4.0 | . | deps: serve-static@1.13.2 Fix incorrect end tag in redirects | deps: encodeurl@~1.0.2 | deps: send@0.16.2 | . | deps: statuses@~1.4.0 | deps: type-is@~1.6.16 deps: mime-types@~2.1.18 | . | . 4.16.2 / 2017-10-09 . Fix TypeError in res.send when given Buffer and ETag header set | perf: skip parsing of entire X-Forwarded-Proto header | . 4.16.1 / 2017-09-29 . deps: send@0.16.1 | deps: serve-static@1.13.1 Fix regression when root is incorrectly set to a file | deps: send@0.16.1 | . | . 4.16.0 / 2017-09-28 . Add &quot;json escape&quot; setting for res.json and res.jsonp | Add express.json and express.urlencoded to parse bodies | Add options argument to res.download | Improve error message when autoloading invalid view engine | Improve error messages when non-function provided as middleware | Skip Buffer encoding when not generating ETag for small response | Use safe-buffer for improved Buffer API | deps: accepts@~1.3.4 deps: mime-types@~2.1.16 | . | deps: content-type@~1.0.4 perf: remove argument reassignment | perf: skip parameter parsing when no parameters | . | deps: etag@~1.8.1 perf: replace regular expression with substring | . | deps: finalhandler@1.1.0 Use res.headersSent when available | . | deps: parseurl@~1.3.2 perf: reduce overhead for full URLs | perf: unroll the “fast-path” RegExp | . | deps: proxy-addr@~2.0.2 Fix trimming leading / trailing OWS in X-Forwarded-For | deps: forwarded@~0.1.2 | deps: ipaddr.js@1.5.2 | perf: reduce overhead when no X-Forwarded-For header | . | deps: qs@6.5.1 Fix parsing &amp; compacting very deep objects | . | deps: send@0.16.0 Add 70 new types for file extensions | Add immutable option | Fix missing &lt;/html&gt; in default error &amp; redirects | Set charset as “UTF-8” for .js and .json | Use instance methods on steam to check for listeners | deps: mime@1.4.1 | perf: improve path validation speed | . | deps: serve-static@1.13.0 Add 70 new types for file extensions | Add immutable option | Set charset as “UTF-8” for .js and .json | deps: send@0.16.0 | . | deps: setprototypeof@1.1.0 | deps: utils-merge@1.0.1 | deps: vary@~1.1.2 perf: improve header token parsing speed | . | perf: re-use options object when generating ETags | perf: remove dead .charset set in res.jsonp | . 4.15.5 / 2017-09-24 . deps: debug@2.6.9 | deps: finalhandler@~1.0.6 deps: debug@2.6.9 | deps: parseurl@~1.3.2 | . | deps: fresh@0.5.2 Fix handling of modified headers with invalid dates | perf: improve ETag match loop | perf: improve If-None-Match token parsing | . | deps: send@0.15.6 Fix handling of modified headers with invalid dates | deps: debug@2.6.9 | deps: etag@~1.8.1 | deps: fresh@0.5.2 | perf: improve If-Match token parsing | . | deps: serve-static@1.12.6 deps: parseurl@~1.3.2 | deps: send@0.15.6 | perf: improve slash collapsing | . | . 4.15.4 / 2017-08-06 . deps: debug@2.6.8 | deps: depd@~1.1.1 Remove unnecessary Buffer loading | . | deps: finalhandler@~1.0.4 deps: debug@2.6.8 | . | deps: proxy-addr@~1.1.5 Fix array argument being altered | deps: ipaddr.js@1.4.0 | . | deps: qs@6.5.0 | deps: send@0.15.4 deps: debug@2.6.8 | deps: depd@~1.1.1 | deps: http-errors@~1.6.2 | . | deps: serve-static@1.12.4 deps: send@0.15.4 | . | . 4.15.3 / 2017-05-16 . Fix error when res.set cannot add charset to Content-Type | deps: debug@2.6.7 Fix DEBUG_MAX_ARRAY_LENGTH | deps: ms@2.0.0 | . | deps: finalhandler@~1.0.3 Fix missing &lt;/html&gt; in HTML document | deps: debug@2.6.7 | . | deps: proxy-addr@~1.1.4 deps: ipaddr.js@1.3.0 | . | deps: send@0.15.3 deps: debug@2.6.7 | deps: ms@2.0.0 | . | deps: serve-static@1.12.3 deps: send@0.15.3 | . | deps: type-is@~1.6.15 deps: mime-types@~2.1.15 | . | deps: vary@~1.1.1 perf: hoist regular expression | . | . 4.15.2 / 2017-03-06 . deps: qs@6.4.0 Fix regression parsing keys starting with [ | . | . 4.15.1 / 2017-03-05 . deps: send@0.15.1 Fix issue when Date.parse does not return NaN on invalid date | Fix strict violation in broken environments | . | deps: serve-static@1.12.1 Fix issue when Date.parse does not return NaN on invalid date | deps: send@0.15.1 | . | . 4.15.0 / 2017-03-01 . Add debug message when loading view engine | Add next(&quot;router&quot;) to exit from router | Fix case where router.use skipped requests routes did not | Remove usage of res._headers private field Improves compatibility with Node.js 8 nightly | . | Skip routing when req.url is not set | Use %o in path debug to tell types apart | Use Object.create to setup request &amp; response prototypes | Use setprototypeof module to replace __proto__ setting | Use statuses instead of http module for status messages | deps: debug@2.6.1 Allow colors in workers | Deprecated DEBUG_FD environment variable set to 3 or higher | Fix error when running under React Native | Use same color for same namespace | deps: ms@0.7.2 | . | deps: etag@~1.8.0 Use SHA1 instead of MD5 for ETag hashing | Works with FIPS 140-2 OpenSSL configuration | . | deps: finalhandler@~1.0.0 Fix exception when err cannot be converted to a string | Fully URL-encode the pathname in the 404 | Only include the pathname in the 404 message | Send complete HTML document | Set Content-Security-Policy: default-src &#39;self&#39; header | deps: debug@2.6.1 | . | deps: fresh@0.5.0 Fix false detection of no-cache request directive | Fix incorrect result when If-None-Match has both * and ETags | Fix weak ETag matching to match spec | perf: delay reading header values until needed | perf: enable strict mode | perf: hoist regular expressions | perf: remove duplicate conditional | perf: remove unnecessary boolean coercions | perf: skip checking modified time if ETag check failed | perf: skip parsing If-None-Match when no ETag header | perf: use Date.parse instead of new Date | . | deps: qs@6.3.1 Fix array parsing from skipping empty values | Fix compacting nested arrays | . | deps: send@0.15.0 Fix false detection of no-cache request directive | Fix incorrect result when If-None-Match has both * and ETags | Fix weak ETag matching to match spec | Remove usage of res._headers private field | Support If-Match and If-Unmodified-Since headers | Use res.getHeaderNames() when available | Use res.headersSent when available | deps: debug@2.6.1 | deps: etag@~1.8.0 | deps: fresh@0.5.0 | deps: http-errors@~1.6.1 | . | deps: serve-static@1.12.0 Fix false detection of no-cache request directive | Fix incorrect result when If-None-Match has both * and ETags | Fix weak ETag matching to match spec | Remove usage of res._headers private field | Send complete HTML document in redirect response | Set default CSP header in redirect response | Support If-Match and If-Unmodified-Since headers | Use res.getHeaderNames() when available | Use res.headersSent when available | deps: send@0.15.0 | . | perf: add fast match path for * route | perf: improve req.ips performance | . 4.14.1 / 2017-01-28 . deps: content-disposition@0.5.2 | deps: finalhandler@0.5.1 Fix exception when err.headers is not an object | deps: statuses@~1.3.1 | perf: hoist regular expressions | perf: remove duplicate validation path | . | deps: proxy-addr@~1.1.3 deps: ipaddr.js@1.2.0 | . | deps: send@0.14.2 deps: http-errors@~1.5.1 | deps: ms@0.7.2 | deps: statuses@~1.3.1 | . | deps: serve-static@~1.11.2 deps: send@0.14.2 | . | deps: type-is@~1.6.14 deps: mime-types@~2.1.13 | . | . 4.14.0 / 2016-06-16 . Add acceptRanges option to res.sendFile/res.sendfile | Add cacheControl option to res.sendFile/res.sendfile | Add options argument to req.range Includes the combine option | . | Encode URL in res.location/res.redirect if not already encoded | Fix some redirect handling in res.sendFile/res.sendfile | Fix Windows absolute path check using forward slashes | Improve error with invalid arguments to req.get() | Improve performance for res.json/res.jsonp in most cases | Improve Range header handling in res.sendFile/res.sendfile | deps: accepts@~1.3.3 Fix including type extensions in parameters in Accept parsing | Fix parsing Accept parameters with quoted equals | Fix parsing Accept parameters with quoted semicolons | Many performance improvements | deps: mime-types@~2.1.11 | deps: negotiator@0.6.1 | . | deps: content-type@~1.0.2 perf: enable strict mode | . | deps: cookie@0.3.1 Add sameSite option | Fix cookie Max-Age to never be a floating point number | Improve error message when encode is not a function | Improve error message when expires is not a Date | Throw better error for invalid argument to parse | Throw on invalid values provided to serialize | perf: enable strict mode | perf: hoist regular expression | perf: use for loop in parse | perf: use string concatenation for serialization | . | deps: finalhandler@0.5.0 Change invalid or non-numeric status code to 500 | Overwrite status message to match set status code | Prefer err.statusCode if err.status is invalid | Set response headers from err.headers object | Use statuses instead of http module for status messages | . | deps: proxy-addr@~1.1.2 Fix accepting various invalid netmasks | Fix IPv6-mapped IPv4 validation edge cases | IPv4 netmasks must be contiguous | IPv6 addresses cannot be used as a netmask | deps: ipaddr.js@1.1.1 | . | deps: qs@6.2.0 Add decoder option in parse function | . | deps: range-parser@~1.2.0 Add combine option to combine overlapping ranges | Fix incorrectly returning -1 when there is at least one valid range | perf: remove internal function | . | deps: send@0.14.1 Add acceptRanges option | Add cacheControl option | Attempt to combine multiple ranges into single range | Correctly inherit from Stream class | Fix Content-Range header in 416 responses when using start/end options | Fix Content-Range header missing from default 416 responses | Fix redirect error when path contains raw non-URL characters | Fix redirect when path starts with multiple forward slashes | Ignore non-byte Range headers | deps: http-errors@~1.5.0 | deps: range-parser@~1.2.0 | deps: statuses@~1.3.0 | perf: remove argument reassignment | . | deps: serve-static@~1.11.1 Add acceptRanges option | Add cacheControl option | Attempt to combine multiple ranges into single range | Fix redirect error when req.url contains raw non-URL characters | Ignore non-byte Range headers | Use status code 301 for redirects | deps: send@0.14.1 | . | deps: type-is@~1.6.13 Fix type error when given invalid type to match against | deps: mime-types@~2.1.11 | . | deps: vary@~1.1.0 Only accept valid field names in the field argument | . | perf: use strict equality when possible | . 4.13.4 / 2016-01-21 . deps: content-disposition@0.5.1 perf: enable strict mode | . | deps: cookie@0.1.5 Throw on invalid values provided to serialize | . | deps: depd@~1.1.0 Support web browser loading | perf: enable strict mode | . | deps: escape-html@~1.0.3 perf: enable strict mode | perf: optimize string replacement | perf: use faster string coercion | . | deps: finalhandler@0.4.1 deps: escape-html@~1.0.3 | . | deps: merge-descriptors@1.0.1 perf: enable strict mode | . | deps: methods@~1.1.2 perf: enable strict mode | . | deps: parseurl@~1.3.1 perf: enable strict mode | . | deps: proxy-addr@~1.0.10 deps: ipaddr.js@1.0.5 | perf: enable strict mode | . | deps: range-parser@~1.0.3 perf: enable strict mode | . | deps: send@0.13.1 deps: depd@~1.1.0 | deps: destroy@~1.0.4 | deps: escape-html@~1.0.3 | deps: range-parser@~1.0.3 | . | deps: serve-static@~1.10.2 deps: escape-html@~1.0.3 | deps: parseurl@~1.3.0 | deps: send@0.13.1 | . | . 4.13.3 / 2015-08-02 . Fix infinite loop condition using mergeParams: true | Fix inner numeric indices incorrectly altering parent req.params | . 4.13.2 / 2015-07-31 . deps: accepts@~1.2.12 deps: mime-types@~2.1.4 | . | deps: array-flatten@1.1.1 perf: enable strict mode | . | deps: path-to-regexp@0.1.7 Fix regression with escaped round brackets and matching groups | . | deps: type-is@~1.6.6 deps: mime-types@~2.1.4 | . | . 4.13.1 / 2015-07-05 . deps: accepts@~1.2.10 deps: mime-types@~2.1.2 | . | deps: qs@4.0.0 Fix dropping parameters like hasOwnProperty | Fix various parsing edge cases | . | deps: type-is@~1.6.4 deps: mime-types@~2.1.2 | perf: enable strict mode | perf: remove argument reassignment | . | . 4.13.0 / 2015-06-20 . Add settings to debug output | Fix res.format error when only default provided | Fix issue where next(&#39;route&#39;) in app.param would incorrectly skip values | Fix hiding platform issues with decodeURIComponent Only URIErrors are a 400 | . | Fix using * before params in routes | Fix using capture groups before params in routes | Simplify res.cookie to call res.append | Use array-flatten module for flattening arrays | deps: accepts@~1.2.9 deps: mime-types@~2.1.1 | perf: avoid argument reassignment &amp; argument slice | perf: avoid negotiator recursive construction | perf: enable strict mode | perf: remove unnecessary bitwise operator | . | deps: cookie@0.1.3 perf: deduce the scope of try-catch deopt | perf: remove argument reassignments | . | deps: escape-html@1.0.2 | deps: etag@~1.7.0 Always include entity length in ETags for hash length extensions | Generate non-Stats ETags using MD5 only (no longer CRC32) | Improve stat performance by removing hashing | Improve support for JXcore | Remove base64 padding in ETags to shorten | Support “fake” stats objects in environments without fs | Use MD5 instead of MD4 in weak ETags over 1KB | . | deps: finalhandler@0.4.0 Fix a false-positive when unpiping in Node.js 0.8 | Support statusCode property on Error objects | Use unpipe module for unpiping requests | deps: escape-html@1.0.2 | deps: on-finished@~2.3.0 | perf: enable strict mode | perf: remove argument reassignment | . | deps: fresh@0.3.0 Add weak ETag matching support | . | deps: on-finished@~2.3.0 Add defined behavior for HTTP CONNECT requests | Add defined behavior for HTTP Upgrade requests | deps: ee-first@1.1.1 | . | deps: path-to-regexp@0.1.6 | deps: send@0.13.0 Allow Node.js HTTP server to set Date response header | Fix incorrectly removing Content-Location on 304 response | Improve the default redirect response headers | Send appropriate headers on default error response | Use http-errors for standard emitted errors | Use statuses instead of http module for status messages | deps: escape-html@1.0.2 | deps: etag@~1.7.0 | deps: fresh@0.3.0 | deps: on-finished@~2.3.0 | perf: enable strict mode | perf: remove unnecessary array allocations | . | deps: serve-static@~1.10.0 Add fallthrough option | Fix reading options from options prototype | Improve the default redirect response headers | Malformed URLs now next() instead of 400 | deps: escape-html@1.0.2 | deps: send@0.13.0 | perf: enable strict mode | perf: remove argument reassignment | . | deps: type-is@~1.6.3 deps: mime-types@~2.1.1 | perf: reduce try block size | perf: remove bitwise operations | . | perf: enable strict mode | perf: isolate app.render try block | perf: remove argument reassignments in application | perf: remove argument reassignments in request prototype | perf: remove argument reassignments in response prototype | perf: remove argument reassignments in routing | perf: remove argument reassignments in View | perf: skip attempting to decode zero length string | perf: use saved reference to http.STATUS_CODES | . 4.12.4 / 2015-05-17 . deps: accepts@~1.2.7 deps: mime-types@~2.0.11 | deps: negotiator@0.5.3 | . | deps: debug@~2.2.0 deps: ms@0.7.1 | . | deps: depd@~1.0.1 | deps: etag@~1.6.0 Improve support for JXcore | Support “fake” stats objects in environments without fs | . | deps: finalhandler@0.3.6 deps: debug@~2.2.0 | deps: on-finished@~2.2.1 | . | deps: on-finished@~2.2.1 Fix isFinished(req) when data buffered | . | deps: proxy-addr@~1.0.8 deps: ipaddr.js@1.0.1 | . | deps: qs@2.4.2 | Fix allowing parameters like constructor | deps: send@0.12.3 deps: debug@~2.2.0 | deps: depd@~1.0.1 | deps: etag@~1.6.0 | deps: ms@0.7.1 | deps: on-finished@~2.2.1 | . | deps: serve-static@~1.9.3 deps: send@0.12.3 | . | deps: type-is@~1.6.2 deps: mime-types@~2.0.11 | . | . 4.12.3 / 2015-03-17 . deps: accepts@~1.2.5 deps: mime-types@~2.0.10 | . | deps: debug@~2.1.3 Fix high intensity foreground color for bold | deps: ms@0.7.0 | . | deps: finalhandler@0.3.4 deps: debug@~2.1.3 | . | deps: proxy-addr@~1.0.7 deps: ipaddr.js@0.1.9 | . | deps: qs@2.4.1 Fix error when parameter hasOwnProperty is present | . | deps: send@0.12.2 Throw errors early for invalid extensions or index options | deps: debug@~2.1.3 | . | deps: serve-static@~1.9.2 deps: send@0.12.2 | . | deps: type-is@~1.6.1 deps: mime-types@~2.0.10 | . | . 4.12.2 / 2015-03-02 . Fix regression where &quot;Request aborted&quot; is logged using res.sendFile | . 4.12.1 / 2015-03-01 . Fix constructing application with non-configurable prototype properties | Fix ECONNRESET errors from res.sendFile usage | Fix req.host when using “trust proxy” hops count | Fix req.protocol/req.secure when using “trust proxy” hops count | Fix wrong code on aborted connections from res.sendFile | deps: merge-descriptors@1.0.0 | . 4.12.0 / 2015-02-23 . Fix &quot;trust proxy&quot; setting to inherit when app is mounted | Generate ETags for all request responses No longer restricted to only responses for GET and HEAD requests | . | Use content-type to parse Content-Type headers | deps: accepts@~1.2.4 Fix preference sorting to be stable for long acceptable lists | deps: mime-types@~2.0.9 | deps: negotiator@0.5.1 | . | deps: cookie-signature@1.0.6 | deps: send@0.12.1 Always read the stat size from the file | Fix mutating passed-in options | deps: mime@1.3.4 | . | deps: serve-static@~1.9.1 deps: send@0.12.1 | . | deps: type-is@~1.6.0 fix argument reassignment | fix false-positives in hasBody Transfer-Encoding check | support wildcard for both type and subtype (*/*) | deps: mime-types@~2.0.9 | . | . 4.11.2 / 2015-02-01 . Fix res.redirect double-calling res.end for HEAD requests | deps: accepts@~1.2.3 deps: mime-types@~2.0.8 | . | deps: proxy-addr@~1.0.6 deps: ipaddr.js@0.1.8 | . | deps: type-is@~1.5.6 deps: mime-types@~2.0.8 | . | . 4.11.1 / 2015-01-20 . deps: send@0.11.1 Fix root path disclosure | . | deps: serve-static@~1.8.1 Fix redirect loop in Node.js 0.11.14 | Fix root path disclosure | deps: send@0.11.1 | . | . 4.11.0 / 2015-01-13 . Add res.append(field, val) to append headers | Deprecate leading : in name for app.param(name, fn) | Deprecate req.param() – use req.params, req.body, or req.query instead | Deprecate app.param(fn) | Fix OPTIONS responses to include the HEAD method properly | Fix res.sendFile not always detecting aborted connection | Match routes iteratively to prevent stack overflows | deps: accepts@~1.2.2 deps: mime-types@~2.0.7 | deps: negotiator@0.5.0 | . | deps: send@0.11.0 deps: debug@~2.1.1 | deps: etag@~1.5.1 | deps: ms@0.7.0 | deps: on-finished@~2.2.0 | . | deps: serve-static@~1.8.0 deps: send@0.11.0 | . | . 4.10.8 / 2015-01-13 . Fix crash from error within OPTIONS response handler | deps: proxy-addr@~1.0.5 deps: ipaddr.js@0.1.6 | . | . 4.10.7 / 2015-01-04 . Fix Allow header for OPTIONS to not contain duplicate methods | Fix incorrect “Request aborted” for res.sendFile when HEAD or 304 | deps: debug@~2.1.1 | deps: finalhandler@0.3.3 deps: debug@~2.1.1 | deps: on-finished@~2.2.0 | . | deps: methods@~1.1.1 | deps: on-finished@~2.2.0 | deps: serve-static@~1.7.2 Fix potential open redirect when mounted at root | . | deps: type-is@~1.5.5 deps: mime-types@~2.0.7 | . | . 4.10.6 / 2014-12-12 . Fix exception in req.fresh/req.stale without response headers | . 4.10.5 / 2014-12-10 . Fix res.send double-calling res.end for HEAD requests | deps: accepts@~1.1.4 deps: mime-types@~2.0.4 | . | deps: type-is@~1.5.4 deps: mime-types@~2.0.4 | . | . 4.10.4 / 2014-11-24 . Fix res.sendfile logging standard write errors | . 4.10.3 / 2014-11-23 . Fix res.sendFile logging standard write errors | deps: etag@~1.5.1 | deps: proxy-addr@~1.0.4 deps: ipaddr.js@0.1.5 | . | deps: qs@2.3.3 Fix arrayLimit behavior | . | . 4.10.2 / 2014-11-09 . Correctly invoke async router callback asynchronously | deps: accepts@~1.1.3 deps: mime-types@~2.0.3 | . | deps: type-is@~1.5.3 deps: mime-types@~2.0.3 | . | . 4.10.1 / 2014-10-28 . Fix handling of URLs containing :// in the path | deps: qs@2.3.2 Fix parsing of mixed objects and values | . | . 4.10.0 / 2014-10-23 . Add support for app.set(&#39;views&#39;, array) Views are looked up in sequence in array of directories | . | Fix res.send(status) to mention res.sendStatus(status) | Fix handling of invalid empty URLs | Use content-disposition module for res.attachment/res.download Sends standards-compliant Content-Disposition header | Full Unicode support | . | Use path.resolve in view lookup | deps: debug@~2.1.0 Implement DEBUG_FD env variable support | . | deps: depd@~1.0.0 | deps: etag@~1.5.0 Improve string performance | Slightly improve speed for weak ETags over 1KB | . | deps: finalhandler@0.3.2 Terminate in progress response only on error | Use on-finished to determine request status | deps: debug@~2.1.0 | deps: on-finished@~2.1.1 | . | deps: on-finished@~2.1.1 Fix handling of pipelined requests | . | deps: qs@2.3.0 Fix parsing of mixed implicit and explicit arrays | . | deps: send@0.10.1 deps: debug@~2.1.0 | deps: depd@~1.0.0 | deps: etag@~1.5.0 | deps: on-finished@~2.1.1 | . | deps: serve-static@~1.7.1 deps: send@0.10.1 | . | . 4.9.8 / 2014-10-17 . Fix res.redirect body when redirect status specified | deps: accepts@~1.1.2 Fix error when media type has invalid parameter | deps: negotiator@0.4.9 | . | . 4.9.7 / 2014-10-10 . Fix using same param name in array of paths | . 4.9.6 / 2014-10-08 . deps: accepts@~1.1.1 deps: mime-types@~2.0.2 | deps: negotiator@0.4.8 | . | deps: serve-static@~1.6.4 Fix redirect loop when index file serving disabled | . | deps: type-is@~1.5.2 deps: mime-types@~2.0.2 | . | . 4.9.5 / 2014-09-24 . deps: etag@~1.4.0 | deps: proxy-addr@~1.0.3 Use forwarded npm module | . | deps: send@0.9.3 deps: etag@~1.4.0 | . | deps: serve-static@~1.6.3 deps: send@0.9.3 | . | . 4.9.4 / 2014-09-19 . deps: qs@2.2.4 Fix issue with object keys starting with numbers truncated | . | . 4.9.3 / 2014-09-18 . deps: proxy-addr@~1.0.2 Fix a global leak when multiple subnets are trusted | deps: ipaddr.js@0.1.3 | . | . 4.9.2 / 2014-09-17 . Fix regression for empty string path in app.use | Fix router.use to accept array of middleware without path | Improve error message for bad app.use arguments | . 4.9.1 / 2014-09-16 . Fix app.use to accept array of middleware without path | deps: depd@0.4.5 | deps: etag@~1.3.1 | deps: send@0.9.2 deps: depd@0.4.5 | deps: etag@~1.3.1 | deps: range-parser@~1.0.2 | . | deps: serve-static@~1.6.2 deps: send@0.9.2 | . | . 4.9.0 / 2014-09-08 . Add res.sendStatus | Invoke callback for sendfile when client aborts Applies to res.sendFile, res.sendfile, and res.download | err will be populated with request aborted error | . | Support IP address host in req.subdomains | Use etag to generate ETag headers | deps: accepts@~1.1.0 update mime-types | . | deps: cookie-signature@1.0.5 | deps: debug@~2.0.0 | deps: finalhandler@0.2.0 Set X-Content-Type-Options: nosniff header | deps: debug@~2.0.0 | . | deps: fresh@0.2.4 | deps: media-typer@0.3.0 Throw error when parameter format invalid on parse | . | deps: qs@2.2.3 Fix issue where first empty value in array is discarded | . | deps: range-parser@~1.0.2 | deps: send@0.9.1 Add lastModified option | Use etag to generate ETag header | deps: debug@~2.0.0 | deps: fresh@0.2.4 | . | deps: serve-static@~1.6.1 Add lastModified option | deps: send@0.9.1 | . | deps: type-is@~1.5.1 fix hasbody to be true for content-length: 0 | deps: media-typer@0.3.0 | deps: mime-types@~2.0.1 | . | deps: vary@~1.0.0 Accept valid Vary header string as field | . | . 4.8.8 / 2014-09-04 . deps: send@0.8.5 Fix a path traversal issue when using root | Fix malicious path detection for empty string path | . | deps: serve-static@~1.5.4 deps: send@0.8.5 | . | . 4.8.7 / 2014-08-29 . deps: qs@2.2.2 Remove unnecessary cloning | . | . 4.8.6 / 2014-08-27 . deps: qs@2.2.0 Array parsing fix | Performance improvements | . | . 4.8.5 / 2014-08-18 . deps: send@0.8.3 deps: destroy@1.0.3 | deps: on-finished@2.1.0 | . | deps: serve-static@~1.5.3 deps: send@0.8.3 | . | . 4.8.4 / 2014-08-14 . deps: qs@1.2.2 | deps: send@0.8.2 Work around fd leak in Node.js 0.10 for fs.ReadStream | . | deps: serve-static@~1.5.2 deps: send@0.8.2 | . | . 4.8.3 / 2014-08-10 . deps: parseurl@~1.3.0 | deps: qs@1.2.1 | deps: serve-static@~1.5.1 Fix parsing of weird req.originalUrl values | deps: parseurl@~1.3.0 | deps: utils-merge@1.0.0 | . | . 4.8.2 / 2014-08-07 . deps: qs@1.2.0 Fix parsing array of objects | . | . 4.8.1 / 2014-08-06 . fix incorrect deprecation warnings on res.download | deps: qs@1.1.0 Accept urlencoded square brackets | Accept empty values in implicit array notation | . | . 4.8.0 / 2014-08-05 . add res.sendFile accepts a file system path instead of a URL | requires an absolute path or root option specified | . | deprecate res.sendfile – use res.sendFile instead | support mounted app as any argument to app.use() | deps: qs@1.0.2 Complete rewrite | Limits array length to 20 | Limits object depth to 5 | Limits parameters to 1,000 | . | deps: send@0.8.1 Add extensions option | . | deps: serve-static@~1.5.0 Add extensions option | deps: send@0.8.1 | . | . 4.7.4 / 2014-08-04 . fix res.sendfile regression for serving directory index files | deps: send@0.7.4 Fix incorrect 403 on Windows and Node.js 0.11 | Fix serving index files without root dir | . | deps: serve-static@~1.4.4 deps: send@0.7.4 | . | . 4.7.3 / 2014-08-04 . deps: send@0.7.3 Fix incorrect 403 on Windows and Node.js 0.11 | . | deps: serve-static@~1.4.3 Fix incorrect 403 on Windows and Node.js 0.11 | deps: send@0.7.3 | . | . 4.7.2 / 2014-07-27 . deps: depd@0.4.4 Work-around v8 generating empty stack traces | . | deps: send@0.7.2 deps: depd@0.4.4 | . | deps: serve-static@~1.4.2 | . 4.7.1 / 2014-07-26 . deps: depd@0.4.3 Fix exception when global Error.stackTraceLimit is too low | . | deps: send@0.7.1 deps: depd@0.4.3 | . | deps: serve-static@~1.4.1 | . 4.7.0 / 2014-07-25 . fix req.protocol for proxy-direct connections | configurable query parser with app.set(&#39;query parser&#39;, parser) app.set(&#39;query parser&#39;, &#39;extended&#39;) parse with “qs” module | app.set(&#39;query parser&#39;, &#39;simple&#39;) parse with “querystring” core module | app.set(&#39;query parser&#39;, false) disable query string parsing | app.set(&#39;query parser&#39;, true) enable simple parsing | . | deprecate res.json(status, obj) – use res.status(status).json(obj) instead | deprecate res.jsonp(status, obj) – use res.status(status).jsonp(obj) instead | deprecate res.send(status, body) – use res.status(status).send(body) instead | deps: debug@1.0.4 | deps: depd@0.4.2 Add TRACE_DEPRECATION environment variable | Remove non-standard grey color from color output | Support --no-deprecation argument | Support --trace-deprecation argument | . | deps: finalhandler@0.1.0 Respond after request fully read | deps: debug@1.0.4 | . | deps: parseurl@~1.2.0 Cache URLs based on original value | Remove no-longer-needed URL mis-parse work-around | Simplify the “fast-path” RegExp | . | deps: send@0.7.0 Add dotfiles option | Cap maxAge value to 1 year | deps: debug@1.0.4 | deps: depd@0.4.2 | . | deps: serve-static@~1.4.0 deps: parseurl@~1.2.0 | deps: send@0.7.0 | . | perf: prevent multiple Buffer creation in res.send | . 4.6.1 / 2014-07-12 . fix subapp.mountpath regression for app.use(subapp) | . 4.6.0 / 2014-07-11 . accept multiple callbacks to app.use() | add explicit “Rosetta Flash JSONP abuse” protection previous versions are not vulnerable; this is just explicit protection | . | catch errors in multiple req.param(name, fn) handlers | deprecate res.redirect(url, status) – use res.redirect(status, url) instead | fix res.send(status, num) to send num as json (not error) | remove unnecessary escaping when res.jsonp returns JSON response | support non-string path in app.use(path, fn) supports array of paths | supports RegExp | . | router: fix optimization on router exit | router: refactor location of try blocks | router: speed up standard app.use(fn) | deps: debug@1.0.3 Add support for multiple wildcards in namespaces | . | deps: finalhandler@0.0.3 deps: debug@1.0.3 | . | deps: methods@1.1.0 add CONNECT | . | deps: parseurl@~1.1.3 faster parsing of href-only URLs | . | deps: path-to-regexp@0.1.3 | deps: send@0.6.0 deps: debug@1.0.3 | . | deps: serve-static@~1.3.2 deps: parseurl@~1.1.3 | deps: send@0.6.0 | . | perf: fix arguments reassign deopt in some res methods | . 4.5.1 / 2014-07-06 . fix routing regression when altering req.method | . 4.5.0 / 2014-07-04 . add deprecation message to non-plural req.accepts* | add deprecation message to res.send(body, status) | add deprecation message to res.vary() | add headers option to res.sendfile use to set headers on successful file transfer | . | add mergeParams option to Router merges req.params from parent routes | . | add req.hostname – correct name for what req.host returns | deprecate things with depd module | deprecate req.host – use req.hostname instead | fix behavior when handling request without routes | fix handling when route.all is only route | invoke router.param() only when route matches | restore req.params after invoking router | use finalhandler for final response handling | use media-typer to alter content-type charset | deps: accepts@~1.0.7 | deps: send@0.5.0 Accept string for maxage (converted by ms) | Include link in default redirect response | . | deps: serve-static@~1.3.0 Accept string for maxAge (converted by ms) | Add setHeaders option | Include HTML link in redirect response | deps: send@0.5.0 | . | deps: type-is@~1.3.2 | . 4.4.5 / 2014-06-26 . deps: cookie-signature@1.0.4 fix for timing attacks | . | . 4.4.4 / 2014-06-20 . fix res.attachment Unicode filenames in Safari | fix “trim prefix” debug message in express:router | deps: accepts@~1.0.5 | deps: buffer-crc32@0.2.3 | . 4.4.3 / 2014-06-11 . fix persistence of modified req.params[name] from app.param() | deps: accepts@1.0.3 deps: negotiator@0.4.6 | . | deps: debug@1.0.2 | deps: send@0.4.3 Do not throw uncatchable error on file open race condition | Use escape-html for HTML escaping | deps: debug@1.0.2 | deps: finished@1.2.2 | deps: fresh@0.2.2 | . | deps: serve-static@1.2.3 Do not throw uncatchable error on file open race condition | deps: send@0.4.3 | . | . 4.4.2 / 2014-06-09 . fix catching errors from top-level handlers | use vary module for res.vary | deps: debug@1.0.1 | deps: proxy-addr@1.0.1 | deps: send@0.4.2 fix “event emitter leak” warnings | deps: debug@1.0.1 | deps: finished@1.2.1 | . | deps: serve-static@1.2.2 fix “event emitter leak” warnings | deps: send@0.4.2 | . | deps: type-is@1.2.1 | . 4.4.1 / 2014-06-02 . deps: methods@1.0.1 | deps: send@0.4.1 Send max-age in Cache-Control in correct format | . | deps: serve-static@1.2.1 use escape-html for escaping | deps: send@0.4.1 | . | . 4.4.0 / 2014-05-30 . custom etag control with app.set(&#39;etag&#39;, val) app.set(&#39;etag&#39;, function(body, encoding){ return &#39;&quot;etag&quot;&#39; }) custom etag generation | app.set(&#39;etag&#39;, &#39;weak&#39;) weak tag | app.set(&#39;etag&#39;, &#39;strong&#39;) strong etag | app.set(&#39;etag&#39;, false) turn off | app.set(&#39;etag&#39;, true) standard etag | . | mark res.send ETag as weak and reduce collisions | update accepts to 1.0.2 Fix interpretation when header not in request | . | update send to 0.4.0 Calculate ETag with md5 for reduced collisions | Ignore stream errors after request ends | deps: debug@0.8.1 | . | update serve-static to 1.2.0 Calculate ETag with md5 for reduced collisions | Ignore stream errors after request ends | deps: send@0.4.0 | . | . 4.3.2 / 2014-05-28 . fix handling of errors from router.param() callbacks | . 4.3.1 / 2014-05-23 . revert “fix behavior of multiple app.VERB for the same path” this caused a regression in the order of route execution | . | . 4.3.0 / 2014-05-21 . add req.baseUrl to access the path stripped from req.url in routes | fix behavior of multiple app.VERB for the same path | fix issue routing requests among sub routers | invoke router.param() only when necessary instead of every match | proper proxy trust with app.set(&#39;trust proxy&#39;, trust) app.set(&#39;trust proxy&#39;, 1) trust first hop | app.set(&#39;trust proxy&#39;, &#39;loopback&#39;) trust loopback addresses | app.set(&#39;trust proxy&#39;, &#39;10.0.0.1&#39;) trust single IP | app.set(&#39;trust proxy&#39;, &#39;10.0.0.1/16&#39;) trust subnet | app.set(&#39;trust proxy&#39;, &#39;10.0.0.1, 10.0.0.2&#39;) trust list | app.set(&#39;trust proxy&#39;, false) turn off | app.set(&#39;trust proxy&#39;, true) trust everything | . | set proper charset in Content-Type for res.send | update type-is to 1.2.0 support suffix matching | . | . 4.2.0 / 2014-05-11 . deprecate app.del() – use app.delete() instead | deprecate res.json(obj, status) – use res.json(status, obj) instead the edge-case res.json(status, num) requires res.status(status).json(num) | . | deprecate res.jsonp(obj, status) – use res.jsonp(status, obj) instead the edge-case res.jsonp(status, num) requires res.status(status).jsonp(num) | . | fix req.next when inside router instance | include ETag header in HEAD requests | keep previous Content-Type for res.jsonp | support PURGE method add app.purge | add router.purge | include PURGE in app.all | . | update debug to 0.8.0 add enable() method | change from stderr to stdout | . | update methods to 1.0.0 add PURGE | . | . 4.1.2 / 2014-05-08 . fix req.host for IPv6 literals | fix res.jsonp error if callback param is object | . 4.1.1 / 2014-04-27 . fix package.json to reflect supported node version | . 4.1.0 / 2014-04-24 . pass options from res.sendfile to send | preserve casing of headers in res.header and res.set | support unicode file names in res.attachment and res.download | update accepts to 1.0.1 deps: negotiator@0.4.0 | . | update cookie to 0.1.2 Fix for maxAge == 0 | made compat with expires field | . | update send to 0.3.0 Accept API options in options object | Coerce option types | Control whether to generate etags | Default directory access to 403 when index disabled | Fix sending files with dots without root set | Include file path in etag | Make “Can’t set headers after they are sent.” catchable | Send full entity-body for multi range requests | Set etags to “weak” | Support “If-Range” header | Support multiple index paths | deps: mime@1.2.11 | . | update serve-static to 1.1.0 Accept options directly to send module | Resolve relative paths at middleware setup | Use parseurl to parse the URL from request | deps: send@0.3.0 | . | update type-is to 1.1.0 add non-array values support | add multipart as a shorthand | . | . 4.0.0 / 2014-04-09 . remove: node 0.8 support | connect and connect’s patches except for charset handling | express(1) - moved to express-generator | express.createServer() - it has been deprecated for a long time. Use express() | app.configure - use logic in your own app code | app.router - is removed | req.auth - use basic-auth instead | req.accepted* - use req.accepts*() instead | res.location - relative URL resolution is removed | res.charset - include the charset in the content type when using res.set() | all bundled middleware except static | . | change: app.route -&gt; app.mountpath when mounting an express app in another express app | json spaces no longer enabled by default in development | req.accepts* -&gt; req.accepts*s - i.e. req.acceptsEncoding -&gt; req.acceptsEncodings | req.params is now an object instead of an array | res.locals is no longer a function. It is a plain js object. Treat it as such. | res.headerSent -&gt; res.headersSent to match node.js ServerResponse object | . | refactor: req.accepts* with accepts | req.is with type-is | path-to-regexp | . | add: app.router() - returns the app Router instance | app.route() - Proxy to the app’s Router#route() method to create a new route | Router &amp; Route - public API | . | . 3.21.2 / 2015-07-31 . deps: connect@2.30.2 deps: body-parser@~1.13.3 | deps: compression@~1.5.2 | deps: errorhandler@~1.4.2 | deps: method-override@~2.3.5 | deps: serve-index@~1.7.2 | deps: type-is@~1.6.6 | deps: vhost@~3.0.1 | . | deps: vary@~1.0.1 Fix setting empty header from empty field | perf: enable strict mode | perf: remove argument reassignments | . | . 3.21.1 / 2015-07-05 . deps: basic-auth@~1.0.3 | deps: connect@2.30.1 deps: body-parser@~1.13.2 | deps: compression@~1.5.1 | deps: errorhandler@~1.4.1 | deps: morgan@~1.6.1 | deps: pause@0.1.0 | deps: qs@4.0.0 | deps: serve-index@~1.7.1 | deps: type-is@~1.6.4 | . | . 3.21.0 / 2015-06-18 . deps: basic-auth@1.0.2 perf: enable strict mode | perf: hoist regular expression | perf: parse with regular expressions | perf: remove argument reassignment | . | deps: connect@2.30.0 deps: body-parser@~1.13.1 | deps: bytes@2.1.0 | deps: compression@~1.5.0 | deps: cookie@0.1.3 | deps: cookie-parser@~1.3.5 | deps: csurf@~1.8.3 | deps: errorhandler@~1.4.0 | deps: express-session@~1.11.3 | deps: finalhandler@0.4.0 | deps: fresh@0.3.0 | deps: morgan@~1.6.0 | deps: serve-favicon@~2.3.0 | deps: serve-index@~1.7.0 | deps: serve-static@~1.10.0 | deps: type-is@~1.6.3 | . | deps: cookie@0.1.3 perf: deduce the scope of try-catch deopt | perf: remove argument reassignments | . | deps: escape-html@1.0.2 | deps: etag@~1.7.0 Always include entity length in ETags for hash length extensions | Generate non-Stats ETags using MD5 only (no longer CRC32) | Improve stat performance by removing hashing | Improve support for JXcore | Remove base64 padding in ETags to shorten | Support “fake” stats objects in environments without fs | Use MD5 instead of MD4 in weak ETags over 1KB | . | deps: fresh@0.3.0 Add weak ETag matching support | . | deps: mkdirp@0.5.1 Work in global strict mode | . | deps: send@0.13.0 Allow Node.js HTTP server to set Date response header | Fix incorrectly removing Content-Location on 304 response | Improve the default redirect response headers | Send appropriate headers on default error response | Use http-errors for standard emitted errors | Use statuses instead of http module for status messages | deps: escape-html@1.0.2 | deps: etag@~1.7.0 | deps: fresh@0.3.0 | deps: on-finished@~2.3.0 | perf: enable strict mode | perf: remove unnecessary array allocations | . | . 3.20.3 / 2015-05-17 . deps: connect@2.29.2 deps: body-parser@~1.12.4 | deps: compression@~1.4.4 | deps: connect-timeout@~1.6.2 | deps: debug@~2.2.0 | deps: depd@~1.0.1 | deps: errorhandler@~1.3.6 | deps: finalhandler@0.3.6 | deps: method-override@~2.3.3 | deps: morgan@~1.5.3 | deps: qs@2.4.2 | deps: response-time@~2.3.1 | deps: serve-favicon@~2.2.1 | deps: serve-index@~1.6.4 | deps: serve-static@~1.9.3 | deps: type-is@~1.6.2 | . | deps: debug@~2.2.0 deps: ms@0.7.1 | . | deps: depd@~1.0.1 | deps: proxy-addr@~1.0.8 deps: ipaddr.js@1.0.1 | . | deps: send@0.12.3 deps: debug@~2.2.0 | deps: depd@~1.0.1 | deps: etag@~1.6.0 | deps: ms@0.7.1 | deps: on-finished@~2.2.1 | . | . 3.20.2 / 2015-03-16 . deps: connect@2.29.1 deps: body-parser@~1.12.2 | deps: compression@~1.4.3 | deps: connect-timeout@~1.6.1 | deps: debug@~2.1.3 | deps: errorhandler@~1.3.5 | deps: express-session@~1.10.4 | deps: finalhandler@0.3.4 | deps: method-override@~2.3.2 | deps: morgan@~1.5.2 | deps: qs@2.4.1 | deps: serve-index@~1.6.3 | deps: serve-static@~1.9.2 | deps: type-is@~1.6.1 | . | deps: debug@~2.1.3 Fix high intensity foreground color for bold | deps: ms@0.7.0 | . | deps: merge-descriptors@1.0.0 | deps: proxy-addr@~1.0.7 deps: ipaddr.js@0.1.9 | . | deps: send@0.12.2 Throw errors early for invalid extensions or index options | deps: debug@~2.1.3 | . | . 3.20.1 / 2015-02-28 . Fix req.host when using “trust proxy” hops count | Fix req.protocol/req.secure when using “trust proxy” hops count | . 3.20.0 / 2015-02-18 . Fix &quot;trust proxy&quot; setting to inherit when app is mounted | Generate ETags for all request responses No longer restricted to only responses for GET and HEAD requests | . | Use content-type to parse Content-Type headers | deps: connect@2.29.0 Use content-type to parse Content-Type headers | deps: body-parser@~1.12.0 | deps: compression@~1.4.1 | deps: connect-timeout@~1.6.0 | deps: cookie-parser@~1.3.4 | deps: cookie-signature@1.0.6 | deps: csurf@~1.7.0 | deps: errorhandler@~1.3.4 | deps: express-session@~1.10.3 | deps: http-errors@~1.3.1 | deps: response-time@~2.3.0 | deps: serve-index@~1.6.2 | deps: serve-static@~1.9.1 | deps: type-is@~1.6.0 | . | deps: cookie-signature@1.0.6 | deps: send@0.12.1 Always read the stat size from the file | Fix mutating passed-in options | deps: mime@1.3.4 | . | . 3.19.2 / 2015-02-01 . deps: connect@2.28.3 deps: compression@~1.3.1 | deps: csurf@~1.6.6 | deps: errorhandler@~1.3.3 | deps: express-session@~1.10.2 | deps: serve-index@~1.6.1 | deps: type-is@~1.5.6 | . | deps: proxy-addr@~1.0.6 deps: ipaddr.js@0.1.8 | . | . 3.19.1 / 2015-01-20 . deps: connect@2.28.2 deps: body-parser@~1.10.2 | deps: serve-static@~1.8.1 | . | deps: send@0.11.1 Fix root path disclosure | . | . 3.19.0 / 2015-01-09 . Fix OPTIONS responses to include the HEAD method property | Use readline for prompt in express(1) | deps: commander@2.6.0 | deps: connect@2.28.1 deps: body-parser@~1.10.1 | deps: compression@~1.3.0 | deps: connect-timeout@~1.5.0 | deps: csurf@~1.6.4 | deps: debug@~2.1.1 | deps: errorhandler@~1.3.2 | deps: express-session@~1.10.1 | deps: finalhandler@0.3.3 | deps: method-override@~2.3.1 | deps: morgan@~1.5.1 | deps: serve-favicon@~2.2.0 | deps: serve-index@~1.6.0 | deps: serve-static@~1.8.0 | deps: type-is@~1.5.5 | . | deps: debug@~2.1.1 | deps: methods@~1.1.1 | deps: proxy-addr@~1.0.5 deps: ipaddr.js@0.1.6 | . | deps: send@0.11.0 deps: debug@~2.1.1 | deps: etag@~1.5.1 | deps: ms@0.7.0 | deps: on-finished@~2.2.0 | . | . 3.18.6 / 2014-12-12 . Fix exception in req.fresh/req.stale without response headers | . 3.18.5 / 2014-12-11 . deps: connect@2.27.6 deps: compression@~1.2.2 | deps: express-session@~1.9.3 | deps: http-errors@~1.2.8 | deps: serve-index@~1.5.3 | deps: type-is@~1.5.4 | . | . 3.18.4 / 2014-11-23 . deps: connect@2.27.4 deps: body-parser@~1.9.3 | deps: compression@~1.2.1 | deps: errorhandler@~1.2.3 | deps: express-session@~1.9.2 | deps: qs@2.3.3 | deps: serve-favicon@~2.1.7 | deps: serve-static@~1.5.1 | deps: type-is@~1.5.3 | . | deps: etag@~1.5.1 | deps: proxy-addr@~1.0.4 deps: ipaddr.js@0.1.5 | . | . 3.18.3 / 2014-11-09 . deps: connect@2.27.3 Correctly invoke async callback asynchronously | deps: csurf@~1.6.3 | . | . 3.18.2 / 2014-10-28 . deps: connect@2.27.2 Fix handling of URLs containing :// in the path | deps: body-parser@~1.9.2 | deps: qs@2.3.2 | . | . 3.18.1 / 2014-10-22 . Fix internal utils.merge deprecation warnings | deps: connect@2.27.1 deps: body-parser@~1.9.1 | deps: express-session@~1.9.1 | deps: finalhandler@0.3.2 | deps: morgan@~1.4.1 | deps: qs@2.3.0 | deps: serve-static@~1.7.1 | . | deps: send@0.10.1 deps: on-finished@~2.1.1 | . | . 3.18.0 / 2014-10-17 . Use content-disposition module for res.attachment/res.download Sends standards-compliant Content-Disposition header | Full Unicode support | . | Use etag module to generate ETag headers | deps: connect@2.27.0 Use http-errors module for creating errors | Use utils-merge module for merging objects | deps: body-parser@~1.9.0 | deps: compression@~1.2.0 | deps: connect-timeout@~1.4.0 | deps: debug@~2.1.0 | deps: depd@~1.0.0 | deps: express-session@~1.9.0 | deps: finalhandler@0.3.1 | deps: method-override@~2.3.0 | deps: morgan@~1.4.0 | deps: response-time@~2.2.0 | deps: serve-favicon@~2.1.6 | deps: serve-index@~1.5.0 | deps: serve-static@~1.7.0 | . | deps: debug@~2.1.0 Implement DEBUG_FD env variable support | . | deps: depd@~1.0.0 | deps: send@0.10.0 deps: debug@~2.1.0 | deps: depd@~1.0.0 | deps: etag@~1.5.0 | . | . 3.17.8 / 2014-10-15 . deps: connect@2.26.6 deps: compression@~1.1.2 | deps: csurf@~1.6.2 | deps: errorhandler@~1.2.2 | . | . 3.17.7 / 2014-10-08 . deps: connect@2.26.5 Fix accepting non-object arguments to logger | deps: serve-static@~1.6.4 | . | . 3.17.6 / 2014-10-02 . deps: connect@2.26.4 deps: morgan@~1.3.2 | deps: type-is@~1.5.2 | . | . 3.17.5 / 2014-09-24 . deps: connect@2.26.3 deps: body-parser@~1.8.4 | deps: serve-favicon@~2.1.5 | deps: serve-static@~1.6.3 | . | deps: proxy-addr@~1.0.3 Use forwarded npm module | . | deps: send@0.9.3 deps: etag@~1.4.0 | . | . 3.17.4 / 2014-09-19 . deps: connect@2.26.2 deps: body-parser@~1.8.3 | deps: qs@2.2.4 | . | . 3.17.3 / 2014-09-18 . deps: proxy-addr@~1.0.2 Fix a global leak when multiple subnets are trusted | deps: ipaddr.js@0.1.3 | . | . 3.17.2 / 2014-09-15 . Use crc instead of buffer-crc32 for speed | deps: connect@2.26.1 deps: body-parser@~1.8.2 | deps: depd@0.4.5 | deps: express-session@~1.8.2 | deps: morgan@~1.3.1 | deps: serve-favicon@~2.1.3 | deps: serve-static@~1.6.2 | . | deps: depd@0.4.5 | deps: send@0.9.2 deps: depd@0.4.5 | deps: etag@~1.3.1 | deps: range-parser@~1.0.2 | . | . 3.17.1 / 2014-09-08 . Fix error in req.subdomains on empty host | . 3.17.0 / 2014-09-08 . Support X-Forwarded-Host in req.subdomains | Support IP address host in req.subdomains | deps: connect@2.26.0 deps: body-parser@~1.8.1 | deps: compression@~1.1.0 | deps: connect-timeout@~1.3.0 | deps: cookie-parser@~1.3.3 | deps: cookie-signature@1.0.5 | deps: csurf@~1.6.1 | deps: debug@~2.0.0 | deps: errorhandler@~1.2.0 | deps: express-session@~1.8.1 | deps: finalhandler@0.2.0 | deps: fresh@0.2.4 | deps: media-typer@0.3.0 | deps: method-override@~2.2.0 | deps: morgan@~1.3.0 | deps: qs@2.2.3 | deps: serve-favicon@~2.1.3 | deps: serve-index@~1.2.1 | deps: serve-static@~1.6.1 | deps: type-is@~1.5.1 | deps: vhost@~3.0.0 | . | deps: cookie-signature@1.0.5 | deps: debug@~2.0.0 | deps: fresh@0.2.4 | deps: media-typer@0.3.0 Throw error when parameter format invalid on parse | . | deps: range-parser@~1.0.2 | deps: send@0.9.1 Add lastModified option | Use etag to generate ETag header | deps: debug@~2.0.0 | deps: fresh@0.2.4 | . | deps: vary@~1.0.0 Accept valid Vary header string as field | . | . 3.16.10 / 2014-09-04 . deps: connect@2.25.10 deps: serve-static@~1.5.4 | . | deps: send@0.8.5 Fix a path traversal issue when using root | Fix malicious path detection for empty string path | . | . 3.16.9 / 2014-08-29 . deps: connect@2.25.9 deps: body-parser@~1.6.7 | deps: qs@2.2.2 | . | . 3.16.8 / 2014-08-27 . deps: connect@2.25.8 deps: body-parser@~1.6.6 | deps: csurf@~1.4.1 | deps: qs@2.2.0 | . | . 3.16.7 / 2014-08-18 . deps: connect@2.25.7 deps: body-parser@~1.6.5 | deps: express-session@~1.7.6 | deps: morgan@~1.2.3 | deps: serve-static@~1.5.3 | . | deps: send@0.8.3 deps: destroy@1.0.3 | deps: on-finished@2.1.0 | . | . 3.16.6 / 2014-08-14 . deps: connect@2.25.6 deps: body-parser@~1.6.4 | deps: qs@1.2.2 | deps: serve-static@~1.5.2 | . | deps: send@0.8.2 Work around fd leak in Node.js 0.10 for fs.ReadStream | . | . 3.16.5 / 2014-08-11 . deps: connect@2.25.5 Fix backwards compatibility in logger | . | . 3.16.4 / 2014-08-10 . Fix original URL parsing in res.location | deps: connect@2.25.4 Fix query middleware breaking with argument | deps: body-parser@~1.6.3 | deps: compression@~1.0.11 | deps: connect-timeout@~1.2.2 | deps: express-session@~1.7.5 | deps: method-override@~2.1.3 | deps: on-headers@~1.0.0 | deps: parseurl@~1.3.0 | deps: qs@1.2.1 | deps: response-time@~2.0.1 | deps: serve-index@~1.1.6 | deps: serve-static@~1.5.1 | . | deps: parseurl@~1.3.0 | . 3.16.3 / 2014-08-07 . deps: connect@2.25.3 deps: multiparty@3.3.2 | . | . 3.16.2 / 2014-08-07 . deps: connect@2.25.2 deps: body-parser@~1.6.2 | deps: qs@1.2.0 | . | . 3.16.1 / 2014-08-06 . deps: connect@2.25.1 deps: body-parser@~1.6.1 | deps: qs@1.1.0 | . | . 3.16.0 / 2014-08-05 . deps: connect@2.25.0 deps: body-parser@~1.6.0 | deps: compression@~1.0.10 | deps: csurf@~1.4.0 | deps: express-session@~1.7.4 | deps: qs@1.0.2 | deps: serve-static@~1.5.0 | . | deps: send@0.8.1 Add extensions option | . | . 3.15.3 / 2014-08-04 . fix res.sendfile regression for serving directory index files | deps: connect@2.24.3 deps: serve-index@~1.1.5 | deps: serve-static@~1.4.4 | . | deps: send@0.7.4 Fix incorrect 403 on Windows and Node.js 0.11 | Fix serving index files without root dir | . | . 3.15.2 / 2014-07-27 . deps: connect@2.24.2 deps: body-parser@~1.5.2 | deps: depd@0.4.4 | deps: express-session@~1.7.2 | deps: morgan@~1.2.2 | deps: serve-static@~1.4.2 | . | deps: depd@0.4.4 Work-around v8 generating empty stack traces | . | deps: send@0.7.2 deps: depd@0.4.4 | . | . 3.15.1 / 2014-07-26 . deps: connect@2.24.1 deps: body-parser@~1.5.1 | deps: depd@0.4.3 | deps: express-session@~1.7.1 | deps: morgan@~1.2.1 | deps: serve-index@~1.1.4 | deps: serve-static@~1.4.1 | . | deps: depd@0.4.3 Fix exception when global Error.stackTraceLimit is too low | . | deps: send@0.7.1 deps: depd@0.4.3 | . | . 3.15.0 / 2014-07-22 . Fix req.protocol for proxy-direct connections | Pass options from res.sendfile to send | deps: connect@2.24.0 deps: body-parser@~1.5.0 | deps: compression@~1.0.9 | deps: connect-timeout@~1.2.1 | deps: debug@1.0.4 | deps: depd@0.4.2 | deps: express-session@~1.7.0 | deps: finalhandler@0.1.0 | deps: method-override@~2.1.2 | deps: morgan@~1.2.0 | deps: multiparty@3.3.1 | deps: parseurl@~1.2.0 | deps: serve-static@~1.4.0 | . | deps: debug@1.0.4 | deps: depd@0.4.2 Add TRACE_DEPRECATION environment variable | Remove non-standard grey color from color output | Support --no-deprecation argument | Support --trace-deprecation argument | . | deps: parseurl@~1.2.0 Cache URLs based on original value | Remove no-longer-needed URL mis-parse work-around | Simplify the “fast-path” RegExp | . | deps: send@0.7.0 Add dotfiles option | Cap maxAge value to 1 year | deps: debug@1.0.4 | deps: depd@0.4.2 | . | . 3.14.0 / 2014-07-11 . add explicit “Rosetta Flash JSONP abuse” protection previous versions are not vulnerable; this is just explicit protection | . | deprecate res.redirect(url, status) – use res.redirect(status, url) instead | fix res.send(status, num) to send num as json (not error) | remove unnecessary escaping when res.jsonp returns JSON response | deps: basic-auth@1.0.0 support empty password | support empty username | . | deps: connect@2.23.0 deps: debug@1.0.3 | deps: express-session@~1.6.4 | deps: method-override@~2.1.0 | deps: parseurl@~1.1.3 | deps: serve-static@~1.3.1 | . | deps: debug@1.0.3 Add support for multiple wildcards in namespaces | . | deps: methods@1.1.0 add CONNECT | . | deps: parseurl@~1.1.3 faster parsing of href-only URLs | . | . 3.13.0 / 2014-07-03 . add deprecation message to app.configure | add deprecation message to req.auth | use basic-auth to parse Authorization header | deps: connect@2.22.0 deps: csurf@~1.3.0 | deps: express-session@~1.6.1 | deps: multiparty@3.3.0 | deps: serve-static@~1.3.0 | . | deps: send@0.5.0 Accept string for maxage (converted by ms) | Include link in default redirect response | . | . 3.12.1 / 2014-06-26 . deps: connect@2.21.1 deps: cookie-parser@1.3.2 | deps: cookie-signature@1.0.4 | deps: express-session@~1.5.2 | deps: type-is@~1.3.2 | . | deps: cookie-signature@1.0.4 fix for timing attacks | . | . 3.12.0 / 2014-06-21 . use media-typer to alter content-type charset | deps: connect@2.21.0 deprecate connect(middleware) – use app.use(middleware) instead | deprecate connect.createServer() – use connect() instead | fix res.setHeader() patch to work with with get -&gt; append -&gt; set pattern | deps: compression@~1.0.8 | deps: errorhandler@~1.1.1 | deps: express-session@~1.5.0 | deps: serve-index@~1.1.3 | . | . 3.11.0 / 2014-06-19 . deprecate things with depd module | deps: buffer-crc32@0.2.3 | deps: connect@2.20.2 deprecate verify option to json – use body-parser npm module instead | deprecate verify option to urlencoded – use body-parser npm module instead | deprecate things with depd module | use finalhandler for final response handling | use media-typer to parse content-type for charset | deps: body-parser@1.4.3 | deps: connect-timeout@1.1.1 | deps: cookie-parser@1.3.1 | deps: csurf@1.2.2 | deps: errorhandler@1.1.0 | deps: express-session@1.4.0 | deps: multiparty@3.2.9 | deps: serve-index@1.1.2 | deps: type-is@1.3.1 | deps: vhost@2.0.0 | . | . 3.10.5 / 2014-06-11 . deps: connect@2.19.6 deps: body-parser@1.3.1 | deps: compression@1.0.7 | deps: debug@1.0.2 | deps: serve-index@1.1.1 | deps: serve-static@1.2.3 | . | deps: debug@1.0.2 | deps: send@0.4.3 Do not throw uncatchable error on file open race condition | Use escape-html for HTML escaping | deps: debug@1.0.2 | deps: finished@1.2.2 | deps: fresh@0.2.2 | . | . 3.10.4 / 2014-06-09 . deps: connect@2.19.5 fix “event emitter leak” warnings | deps: csurf@1.2.1 | deps: debug@1.0.1 | deps: serve-static@1.2.2 | deps: type-is@1.2.1 | . | deps: debug@1.0.1 | deps: send@0.4.2 fix “event emitter leak” warnings | deps: finished@1.2.1 | deps: debug@1.0.1 | . | . 3.10.3 / 2014-06-05 . use vary module for res.vary | deps: connect@2.19.4 deps: errorhandler@1.0.2 | deps: method-override@2.0.2 | deps: serve-favicon@2.0.1 | . | deps: debug@1.0.0 | . 3.10.2 / 2014-06-03 . deps: connect@2.19.3 deps: compression@1.0.6 | . | . 3.10.1 / 2014-06-03 . deps: connect@2.19.2 deps: compression@1.0.4 | . | deps: proxy-addr@1.0.1 | . 3.10.0 / 2014-06-02 . deps: connect@2.19.1 deprecate methodOverride() – use method-override npm module instead | deps: body-parser@1.3.0 | deps: method-override@2.0.1 | deps: multiparty@3.2.8 | deps: response-time@2.0.0 | deps: serve-static@1.2.1 | . | deps: methods@1.0.1 | deps: send@0.4.1 Send max-age in Cache-Control in correct format | . | . 3.9.0 / 2014-05-30 . custom etag control with app.set(&#39;etag&#39;, val) app.set(&#39;etag&#39;, function(body, encoding){ return &#39;&quot;etag&quot;&#39; }) custom etag generation | app.set(&#39;etag&#39;, &#39;weak&#39;) weak tag | app.set(&#39;etag&#39;, &#39;strong&#39;) strong etag | app.set(&#39;etag&#39;, false) turn off | app.set(&#39;etag&#39;, true) standard etag | . | Include ETag in HEAD requests | mark res.send ETag as weak and reduce collisions | update connect to 2.18.0 deps: compression@1.0.3 | deps: serve-index@1.1.0 | deps: serve-static@1.2.0 | . | update send to 0.4.0 Calculate ETag with md5 for reduced collisions | Ignore stream errors after request ends | deps: debug@0.8.1 | . | . 3.8.1 / 2014-05-27 . update connect to 2.17.3 deps: body-parser@1.2.2 | deps: express-session@1.2.1 | deps: method-override@1.0.2 | . | . 3.8.0 / 2014-05-21 . keep previous Content-Type for res.jsonp | set proper charset in Content-Type for res.send | update connect to 2.17.1 fix res.charset appending charset when content-type has one | deps: express-session@1.2.0 | deps: morgan@1.1.1 | deps: serve-index@1.0.3 | . | . 3.7.0 / 2014-05-18 . proper proxy trust with app.set(&#39;trust proxy&#39;, trust) app.set(&#39;trust proxy&#39;, 1) trust first hop | app.set(&#39;trust proxy&#39;, &#39;loopback&#39;) trust loopback addresses | app.set(&#39;trust proxy&#39;, &#39;10.0.0.1&#39;) trust single IP | app.set(&#39;trust proxy&#39;, &#39;10.0.0.1/16&#39;) trust subnet | app.set(&#39;trust proxy&#39;, &#39;10.0.0.1, 10.0.0.2&#39;) trust list | app.set(&#39;trust proxy&#39;, false) turn off | app.set(&#39;trust proxy&#39;, true) trust everything | . | update connect to 2.16.2 deprecate res.headerSent – use res.headersSent | deprecate res.on(&quot;header&quot;) – use on-headers module instead | fix edge-case in res.appendHeader that would append in wrong order | json: use body-parser | urlencoded: use body-parser | dep: bytes@1.0.0 | dep: cookie-parser@1.1.0 | dep: csurf@1.2.0 | dep: express-session@1.1.0 | dep: method-override@1.0.1 | . | . 3.6.0 / 2014-05-09 . deprecate app.del() – use app.delete() instead | deprecate res.json(obj, status) – use res.json(status, obj) instead the edge-case res.json(status, num) requires res.status(status).json(num) | . | deprecate res.jsonp(obj, status) – use res.jsonp(status, obj) instead the edge-case res.jsonp(status, num) requires res.status(status).jsonp(num) | . | support PURGE method add app.purge | add router.purge | include PURGE in app.all | . | update connect to 2.15.0 Add res.appendHeader | Call error stack even when response has been sent | Patch res.headerSent to return Boolean | Patch res.headersSent for node.js 0.8 | Prevent default 404 handler after response sent | dep: compression@1.0.2 | dep: connect-timeout@1.1.0 | dep: debug@^0.8.0 | dep: errorhandler@1.0.1 | dep: express-session@1.0.4 | dep: morgan@1.0.1 | dep: serve-favicon@2.0.0 | dep: serve-index@1.0.2 | . | update debug to 0.8.0 add enable() method | change from stderr to stdout | . | update methods to 1.0.0 add PURGE | . | update mkdirp to 0.5.0 | . 3.5.3 / 2014-05-08 . fix req.host for IPv6 literals | fix res.jsonp error if callback param is object | . 3.5.2 / 2014-04-24 . update connect to 2.14.5 | update cookie to 0.1.2 | update mkdirp to 0.4.0 | update send to 0.3.0 | . 3.5.1 / 2014-03-25 . pin less-middleware in generated app | . 3.5.0 / 2014-03-06 . bump deps | . 3.4.8 / 2014-01-13 . prevent incorrect automatic OPTIONS responses #1868 @dpatti | update binary and examples for jade 1.0 #1876 @yossi, #1877 @reqshark, #1892 @matheusazzi | throw 400 in case of malformed paths @rlidwka | . 3.4.7 / 2013-12-10 . update connect | . 3.4.6 / 2013-12-01 . update connect (raw-body) | . 3.4.5 / 2013-11-27 . update connect | res.location: remove leading ./ #1802 @kapouer | res.redirect: fix `res.redirect(‘toString’) #1829 @michaelficarra | res.send: always send ETag when content-length &gt; 0 | router: add Router.all() method | . 3.4.4 / 2013-10-29 . update connect | update supertest | update methods | express(1): replace bodyParser() with urlencoded() and json() #1795 @chirag04 | . 3.4.3 / 2013-10-23 . update connect | . 3.4.2 / 2013-10-18 . update connect | downgrade commander | . 3.4.1 / 2013-10-15 . update connect | update commander | jsonp: check if callback is a function | router: wrap encodeURIComponent in a try/catch #1735 (@lxe) | res.format: now includes charset @1747 (@sorribas) | res.links: allow multiple calls @1746 (@sorribas) | . 3.4.0 / 2013-09-07 . add res.vary(). Closes #1682 | update connect | . 3.3.8 / 2013-09-02 . update connect | . 3.3.7 / 2013-08-28 . update connect | . 3.3.6 / 2013-08-27 . Revert “remove charset from json responses. Closes #1631” (causes issues in some clients) | add: req.accepts take an argument list | . 3.3.4 / 2013-07-08 . update send and connect | . 3.3.3 / 2013-07-04 . update connect | . 3.3.2 / 2013-07-03 . update connect | update send | remove .version export | . 3.3.1 / 2013-06-27 . update connect | . 3.3.0 / 2013-06-26 . update connect | add support for multiple X-Forwarded-Proto values. Closes #1646 | change: remove charset from json responses. Closes #1631 | change: return actual booleans from req.accept* functions | fix jsonp callback array throw | . 3.2.6 / 2013-06-02 . update connect | . 3.2.5 / 2013-05-21 . update connect | update node-cookie | add: throw a meaningful error when there is no default engine | change generation of ETags with res.send() to GET requests only. Closes #1619 | . 3.2.4 / 2013-05-09 . fix req.subdomains when no Host is present | fix req.host when no Host is present, return undefined | . 3.2.3 / 2013-05-07 . update connect / qs | . 3.2.2 / 2013-05-03 . update qs | . 3.2.1 / 2013-04-29 . add app.VERB() paths array deprecation warning | update connect | update qs and remove all ~ semver crap | fix: accept number as value of Signed Cookie | . 3.2.0 / 2013-04-15 . add “view” constructor setting to override view behaviour | add req.acceptsEncoding(name) | add req.acceptedEncodings | revert cookie signature change causing session race conditions | fix sorting of Accept values of the same quality | . 3.1.2 / 2013-04-12 . add support for custom Accept parameters | update cookie-signature | . 3.1.1 / 2013-04-01 . add X-Forwarded-Host support to req.host | fix relative redirects | update mkdirp | update buffer-crc32 | remove legacy app.configure() method from app template. | . 3.1.0 / 2013-01-25 . add support for leading “.” in “view engine” setting | add array support to res.set() | add node 0.8.x to travis.yml | add “subdomain offset” setting for tweaking req.subdomains | add res.location(url) implementing res.redirect()-like setting of Location | use app.get() for x-powered-by setting for inheritance | fix colons in passwords for req.auth | . 3.0.6 / 2013-01-04 . add http verb methods to Router | update connect | fix mangling of the res.cookie() options object | fix jsonp whitespace escape. Closes #1132 | . 3.0.5 / 2012-12-19 . add throwing when a non-function is passed to a route | fix: explicitly remove Transfer-Encoding header from 204 and 304 responses | revert “add ‘etag’ option” | . 3.0.4 / 2012-12-05 . add ‘etag’ option to disable res.send() Etags | add escaping of urls in text/plain in res.redirect() for old browsers interpreting as html | change crc32 module for a more liberal license | update connect | . 3.0.3 / 2012-11-13 . update connect | update cookie module | fix cookie max-age | . 3.0.2 / 2012-11-08 . add OPTIONS to cors example. Closes #1398 | fix route chaining regression. Closes #1397 | . 3.0.1 / 2012-11-01 . update connect | . 3.0.0 / 2012-10-23 . add make clean | add “Basic” check to req.auth | add req.auth test coverage | add cb &amp;&amp; cb(payload) to res.jsonp(). Closes #1374 | add backwards compat for res.redirect() status. Closes #1336 | add support for res.json() to retain previously defined Content-Types. Closes #1349 | update connect | change res.redirect() to utilize a pathname-relative Location again. Closes #1382 | remove non-primitive string support for res.send() | fix view-locals example. Closes #1370 | fix route-separation example | . 3.0.0rc5 / 2012-09-18 . update connect | add redis search example | add static-files example | add “x-powered-by” setting (app.disable(&#39;x-powered-by&#39;)) | add “application/octet-stream” redirect Accept test case. Closes #1317 | . 3.0.0rc4 / 2012-08-30 . add res.jsonp(). Closes #1307 | add “verbose errors” option to error-pages example | add another route example to express(1) so people are not so confused | add redis online user activity tracking example | update connect dep | fix etag quoting. Closes #1310 | fix error-pages 404 status | fix jsonp callback char restrictions | remove old OPTIONS default response | . 3.0.0rc3 / 2012-08-13 . update connect dep | fix signed cookies to work with connect.cookieParser() (“s:” prefix was missing) [tnydwrds] | fix res.render() clobbering of “locals” | . 3.0.0rc2 / 2012-08-03 . add CORS example | update connect dep | deprecate .createServer() &amp; remove old stale examples | fix: escape res.redirect() link | fix vhost example | . 3.0.0rc1 / 2012-07-24 . add more examples to view-locals | add scheme-relative redirects (res.redirect(&quot;//foo.com&quot;)) support | update cookie dep | update connect dep | update send dep | fix express(1) -h flag, use -H for hogan. Closes #1245 | fix res.sendfile() socket error handling regression | . 3.0.0beta7 / 2012-07-16 . update connect dep for send() root normalization regression | . 3.0.0beta6 / 2012-07-13 . add err.view property for view errors. Closes #1226 | add “jsonp callback name” setting | add support for “/foo/:bar*” non-greedy matches | change res.sendfile() to use send() module | change res.send to use “response-send” module | remove app.locals.use and res.locals.use, use regular middleware | . 3.0.0beta5 / 2012-07-03 . add “make check” support | add route-map example | add res.json(obj, status) support back for BC | add “methods” dep, remove internal methods module | update connect dep | update auth example to utilize cores pbkdf2 | updated tests to use “supertest” | . 3.0.0beta4 / 2012-06-25 . Added req.auth | Added req.range(size) | Added res.links(obj) | Added res.send(body, status) support back for backwards compat | Added .default() support to res.format() | Added 2xx / 304 check to req.fresh | Revert “Added + support to the router” | Fixed res.send() freshness check, respect res.statusCode | . 3.0.0beta3 / 2012-06-15 . Added hogan --hjs to express(1) [nullfirm] | Added another example to content-negotiation | Added fresh dep | Changed: res.send() always checks freshness | Fixed: expose connects mime module. Closes #1165 | . 3.0.0beta2 / 2012-06-06 . Added + support to the router | Added req.host | Changed req.param() to check route first | Update connect dep | . 3.0.0beta1 / 2012-06-01 . Added res.format() callback to override default 406 behaviour | Fixed res.redirect() 406. Closes #1154 | . 3.0.0alpha5 / 2012-05-30 . Added req.ip | Added { signed: true } option to res.cookie() | Removed res.signedCookie() | Changed: dont reverse req.ips | Fixed “trust proxy” setting check for req.ips | . 3.0.0alpha4 / 2012-05-09 . Added: allow [] in jsonp callback. Closes #1128 | Added PORT env var support in generated template. Closes #1118 [benatkin] | Updated: connect 2.2.2 | . 3.0.0alpha3 / 2012-05-04 . Added public app.routes. Closes #887 | Added view-locals example | Added mvc example | Added res.locals.use(). Closes #1120 | Added conditional-GET support to res.send() | Added: coerce res.set() values to strings | Changed: moved static() in generated apps below router | Changed: res.send() only set ETag when not previously set | Changed connect 2.2.1 dep | Changed: make test now runs unit / acceptance tests | Fixed req/res proto inheritance | . 3.0.0alpha2 / 2012-04-26 . Added make benchmark back | Added res.send() support for String objects | Added client-side data exposing example | Added res.header() and req.header() aliases for BC | Added express.createServer() for BC | Perf: memoize parsed urls | Perf: connect 2.2.0 dep | Changed: make expressInit() middleware self-aware | Fixed: use app.get() for all core settings | Fixed redis session example | Fixed session example. Closes #1105 | Fixed generated express dep. Closes #1078 | . 3.0.0alpha1 / 2012-04-15 . Added app.locals.use(callback) | Added app.locals object | Added app.locals(obj) | Added res.locals object | Added res.locals(obj) | Added res.format() for content-negotiation | Added app.engine() | Added res.cookie() JSON cookie support | Added “trust proxy” setting | Added req.subdomains | Added req.protocol | Added req.secure | Added req.path | Added req.ips | Added req.fresh | Added req.stale | Added comma-delimited / array support for req.accepts() | Added debug instrumentation | Added res.set(obj) | Added res.set(field, value) | Added res.get(field) | Added app.get(setting). Closes #842 | Added req.acceptsLanguage() | Added req.acceptsCharset() | Added req.accepted | Added req.acceptedLanguages | Added req.acceptedCharsets | Added “json replacer” setting | Added “json spaces” setting | Added X-Forwarded-Proto support to res.redirect(). Closes #92 | Added --less support to express(1) | Added express.response prototype | Added express.request prototype | Added express.application prototype | Added app.path() | Added app.render() | Added res.type() to replace res.contentType() | Changed: res.redirect() to add relative support | Changed: enable “jsonp callback” by default | Changed: renamed “case sensitive routes” to “case sensitive routing” | Rewrite of all tests with mocha | Removed “root” setting | Removed res.redirect(&#39;home&#39;) support | Removed req.notify() | Removed app.register() | Removed app.redirect() | Removed app.is() | Removed app.helpers() | Removed app.dynamicHelpers() | Fixed res.sendfile() with non-GET. Closes #723 | Fixed express(1) public dir for windows. Closes #866 | . 2.5.9/ 2012-04-02 . Added support for PURGE request method [pbuyle] | Fixed express(1) generated app app.address() before listening [mmalecki] | . 2.5.8 / 2012-02-08 . Update mkdirp dep. Closes #991 | . 2.5.7 / 2012-02-06 . Fixed app.all duplicate DELETE requests [mscdex] | . 2.5.6 / 2012-01-13 . Updated hamljs dev dep. Closes #953 | . 2.5.5 / 2012-01-08 . Fixed: set filename on cached templates [matthewleon] | . 2.5.4 / 2012-01-02 . Fixed express(1) eol on 0.4.x. Closes #947 | . 2.5.3 / 2011-12-30 . Fixed req.is() when a charset is present | . 2.5.2 / 2011-12-10 . Fixed: express(1) LF -&gt; CRLF for windows | . 2.5.1 / 2011-11-17 . Changed: updated connect to 1.8.x | Removed sass.js support from express(1) | . 2.5.0 / 2011-10-24 . Added ./routes dir for generated app by default | Added npm install reminder to express(1) app gen | Added 0.5.x support | Removed make test-cov since it wont work with node 0.5.x | Fixed express(1) public dir for windows. Closes #866 | . 2.4.7 / 2011-10-05 . Added mkdirp to express(1). Closes #795 | Added simple json-config example | Added shorthand for the parsed request’s pathname via req.path | Changed connect dep to 1.7.x to fix npm issue… | Fixed res.redirect() HEAD support. [reported by xerox] | Fixed req.flash(), only escape args | Fixed absolute path checking on windows. Closes #829 [reported by andrewpmckenzie] | . 2.4.6 / 2011-08-22 . Fixed multiple param callback regression. Closes #824 [reported by TroyGoode] | . 2.4.5 / 2011-08-19 . Added support for routes to handle errors. Closes #809 | Added app.routes.all(). Closes #803 | Added “basepath” setting to work in conjunction with reverse proxies etc. | Refactored Route to use a single array of callbacks | Added support for multiple callbacks for app.param(). Closes #801 Closes #805 | Changed: removed .call(self) for route callbacks | Dependency: qs &gt;= 0.3.1 | Fixed res.redirect() on windows due to join() usage. Closes #808 | . 2.4.4 / 2011-08-05 . Fixed res.header() intention of a set, even when undefined | Fixed *, value no longer required | Fixed res.send(204) support. Closes #771 | . 2.4.3 / 2011-07-14 . Added docs for status option special-case. Closes #739 | Fixed options.filename, exposing the view path to template engines | . 2.4.2. / 2011-07-06 . Revert “removed jsonp stripping” for XSS | . 2.4.1 / 2011-07-06 . Added res.json() JSONP support. Closes #737 | Added extending-templates example. Closes #730 | Added “strict routing” setting for trailing slashes | Added support for multiple envs in app.configure() calls. Closes #735 | Changed: res.send() using res.json() | Changed: when cookie path === null don’t default it | Changed; default cookie path to “home” setting. Closes #731 | Removed pids/logs creation from express(1) | . 2.4.0 / 2011-06-28 . Added chainable res.status(code) | Added res.json(), an explicit version of res.send(obj) | Added simple web-service example | . 2.3.12 / 2011-06-22 . #express is now on freenode! come join! | Added req.get(field, param) | Added links to Japanese documentation, thanks @hideyukisaito! | Added; the express(1) generated app outputs the env | Added content-negotiation example | Dependency: connect &gt;= 1.5.1 &lt; 2.0.0 | Fixed view layout bug. Closes #720 | Fixed; ignore body on 304. Closes #701 | . 2.3.11 / 2011-06-04 . Added npm test | Removed generation of dummy test file from express(1) | Fixed; express(1) adds express as a dep | Fixed; prune on prepublish | . 2.3.10 / 2011-05-27 . Added req.route, exposing the current route | Added package.json generation support to express(1) | Fixed call to app.param() function for optional params. Closes #682 | . 2.3.9 / 2011-05-25 . Fixed bug-ish with ../&#39; in res.partial()` calls | . 2.3.8 / 2011-05-24 . Fixed app.options() | . 2.3.7 / 2011-05-23 . Added route Collection, ex: app.get(&#39;/user/:id&#39;).remove(); | Added support for app.param(fn) to define param logic | Removed app.param() support for callback with return value | Removed module.parent check from express(1) generated app. Closes #670 | Refactored router. Closes #639 | . 2.3.6 / 2011-05-20 . Changed; using devDependencies instead of git submodules | Fixed redis session example | Fixed markdown example | Fixed view caching, should not be enabled in development | . 2.3.5 / 2011-05-20 . Added export .view as alias for .View | . 2.3.4 / 2011-05-08 . Added ./examples/say | Fixed res.sendfile() bug preventing the transfer of files with spaces | . 2.3.3 / 2011-05-03 . Added “case sensitive routes” option. | Changed; split methods supported per rfc [slaskis] | Fixed route-specific middleware when using the same callback function several times | . 2.3.2 / 2011-04-27 . Fixed view hints | . 2.3.1 / 2011-04-26 . Added app.match() as app.match.all() | Added app.lookup() as app.lookup.all() | Added app.remove() for app.remove.all() | Added app.remove.VERB() | Fixed template caching collision issue. Closes #644 | Moved router over from connect and started refactor | . 2.3.0 / 2011-04-25 . Added options support to res.clearCookie() | Added res.helpers() as alias of res.locals() | Added; json defaults to UTF-8 with res.send(). Closes #632. [Daniel * Dependency connect &gt;= 1.4.0 | Changed; auto set Content-Type in res.attachement [Aaron Heckmann] | Renamed “cache views” to “view cache”. Closes #628 | Fixed caching of views when using several apps. Closes #637 | Fixed gotcha invoking app.param() callbacks once per route middleware. Closes #638 | Fixed partial lookup precedence. Closes #631 Shaw] | . 2.2.2 / 2011-04-12 . Added second callback support for res.download() connection errors | Fixed filename option passing to template engine | . 2.2.1 / 2011-04-04 . Added layout(path) helper to change the layout within a view. Closes #610 | Fixed partial() collection object support. Previously only anything with .length would work. When .length is present one must still be aware of holes, however now { collection: {foo: &#39;bar&#39;}} is valid, exposes keyInCollection and keysInCollection. . | Performance improved with better view caching | Removed request and response locals | Changed; errorHandler page title is now Express instead of Connect | . 2.2.0 / 2011-03-30 . Added app.lookup.VERB(), ex app.lookup.put(&#39;/user/:id&#39;). Closes #606 | Added app.match.VERB(), ex app.match.put(&#39;/user/12&#39;). Closes #606 | Added app.VERB(path) as alias of app.lookup.VERB(). | Dependency connect &gt;= 1.2.0 | . 2.1.1 / 2011-03-29 . Added; expose err.view object when failing to locate a view | Fixed res.partial() call next(err) when no callback is given [reported by aheckmann] | Fixed; res.send(undefined) responds with 204 [aheckmann] | . 2.1.0 / 2011-03-24 . Added &lt;root&gt;/_?&lt;name&gt; partial lookup support. Closes #447 | Added request, response, and app local variables | Added settings local variable, containing the app’s settings | Added req.flash() exception if req.session is not available | Added res.send(bool) support (json response) | Fixed stylus example for latest version | Fixed; wrap try/catch around res.render() | . 2.0.0 / 2011-03-17 . Fixed up index view path alternative. | Changed; res.locals() without object returns the locals | . 2.0.0rc3 / 2011-03-17 . Added res.locals(obj) to compliment res.local(key, val) | Added res.partial() callback support | Fixed recursive error reporting issue in res.render() | . 2.0.0rc2 / 2011-03-17 . Changed; partial() “locals” are now optional | Fixed SlowBuffer support. Closes #584 [reported by tyrda01] | Fixed .filename view engine option [reported by drudge] | Fixed blog example | Fixed {req,res}.app reference when mounting [Ben Weaver] | . 2.0.0rc / 2011-03-14 . Fixed; expose HTTPSServer constructor | Fixed express(1) default test charset. Closes #579 [reported by secoif] | Fixed; default charset to utf-8 instead of utf8 for lame IE [reported by NickP] | . 2.0.0beta3 / 2011-03-09 . Added support for res.contentType() literal The original res.contentType(&#39;.json&#39;), res.contentType(&#39;application/json&#39;), and res.contentType(&#39;json&#39;) will work now. | Added res.render() status option support back | Added charset option for res.render() | Added .charset support (via connect 1.0.4) | Added view resolution hints when in development and a lookup fails | Added layout lookup support relative to the page view. For example while rendering ./views/user/index.jade if you create ./views/user/layout.jade it will be used in favour of the root layout. | Fixed res.redirect(). RFC states absolute url [reported by unlink] | Fixed; default res.send() string charset to utf8 | Removed Partial constructor (not currently used) | . 2.0.0beta2 / 2011-03-07 . Added res.render() .locals support back to aid in migration process | Fixed flash example | . 2.0.0beta / 2011-03-03 . Added HTTPS support | Added res.cookie() maxAge support | Added req.header() Referrer / Referer special-case, either works | Added mount support for res.redirect(), now respects the mount-point | Added union() util, taking place of merge(clone()) combo | Added stylus support to express(1) generated app | Added secret to session middleware used in examples and generated app | Added res.local(name, val) for progressive view locals | Added default param support to req.param(name, default) | Added app.disabled() and app.enabled() | Added app.register() support for omitting leading “.”, either works | Added res.partial(), using the same interface as partial() within a view. Closes #539 | Added app.param() to map route params to async/sync logic | Added; aliased app.helpers() as app.locals(). Closes #481 | Added extname with no leading “.” support to res.contentType() | Added cache views setting, defaulting to enabled in “production” env | Added index file partial resolution, eg: partial(‘user’) may try views/user/index.jade. | Added req.accepts() support for extensions | Changed; res.download() and res.sendfile() now utilize Connect’s static file server connect.static.send(). | Changed; replaced connect.utils.mime() with npm mime module | Changed; allow req.query to be pre-defined (via middleware or other parent | Changed view partial resolution, now relative to parent view | Changed view engine signature. no longer engine.render(str, options, callback), now engine.compile(str, options) -&gt; Function, the returned function accepts fn(locals). | Fixed req.param() bug returning Array.prototype methods. Closes #552 | Fixed; using Stream#pipe() instead of sys.pump() in res.sendfile() | Fixed; using qs module instead of querystring | Fixed; strip unsafe chars from jsonp callbacks | Removed “stream threshold” setting | . 1.0.8 / 2011-03-01 . Allow req.query to be pre-defined (via middleware or other parent app) | “connect”: “&gt;= 0.5.0 &lt; 1.0.0”. Closes #547 | Removed the long deprecated EXPRESS_ENV support | . 1.0.7 / 2011-02-07 . Fixed render() setting inheritance. Mounted apps would not inherit “view engine” | . 1.0.6 / 2011-02-07 . Fixed view engine setting bug when period is in dirname | . 1.0.5 / 2011-02-05 . Added secret to generated app session() call | . 1.0.4 / 2011-02-05 . Added qs dependency to package.json | Fixed namespaced require()s for latest connect support | . 1.0.3 / 2011-01-13 . Remove unsafe characters from JSONP callback names [Ryan Grove] | . 1.0.2 / 2011-01-10 . Removed nested require, using connect.router | . 1.0.1 / 2010-12-29 . Fixed for middleware stacked via createServer() previously the foo middleware passed to createServer(foo) would not have access to Express methods such as res.send() or props like req.query etc. | . 1.0.0 / 2010-11-16 . Added; deduce partial object names from the last segment. For example by default partial(&#39;forum/post&#39;, postObject) will give you the post object, providing a meaningful default. | Added http status code string representation to res.redirect() body | Added; res.redirect() supporting text/plain and text/html via Accept. | Added req.is() to aid in content negotiation | Added partial local inheritance [suggested by masylum]. Closes #102 providing access to parent template locals. | Added -s, –session[s] flag to express(1) to add session related middleware | Added –template flag to express(1) to specify the template engine to use. | Added –css flag to express(1) to specify the stylesheet engine to use (or just plain css by default). | Added app.all() support [thanks aheckmann] | Added partial direct object support. You may now partial(&#39;user&#39;, user) providing the “user” local, vs previously partial(&#39;user&#39;, { object: user }). | Added route-separation example since many people question ways to do this with CommonJS modules. Also view the blog example for an alternative. | Performance; caching view path derived partial object names | Fixed partial local inheritance precedence. [reported by Nick Poulden] Closes #454 | Fixed jsonp support; text/javascript as per mailinglist discussion | . 1.0.0rc4 / 2010-10-14 . Added NODE_ENV support, EXPRESS_ENV is deprecated and will be removed in 1.0.0 | Added route-middleware support (very helpful, see the docs) | Added jsonp callback setting to enable/disable jsonp autowrapping [Dav Glass] | Added callback query check on response.send to autowrap JSON objects for simple webservice implementations [Dav Glass] | Added partial() support for array-like collections. Closes #434 | Added support for swappable querystring parsers | Added session usage docs. Closes #443 | Added dynamic helper caching. Closes #439 [suggested by maritz] | Added authentication example | Added basic Range support to res.sendfile() (and res.download() etc) | Changed; express(1) generated app using 2 spaces instead of 4 | Default env to “development” again [aheckmann] | Removed context option is no more, use “scope” | Fixed; exposing ./support libs to examples so they can run without installs | Fixed mvc example | . 1.0.0rc3 / 2010-09-20 . Added confirmation for express(1) app generation. Closes #391 | Added extending of flash formatters via app.flashFormatters | Added flash formatter support. Closes #411 | Added streaming support to res.sendfile() using sys.pump() when &gt;= “stream threshold” | Added stream threshold setting for res.sendfile() | Added res.send() HEAD support | Added res.clearCookie() | Added res.cookie() | Added res.render() headers option | Added res.redirect() response bodies | Added res.render() status option support. Closes #425 [thanks aheckmann] | Fixed res.sendfile() responding with 403 on malicious path | Fixed res.download() bug; when an error occurs remove Content-Disposition | Fixed; mounted apps settings now inherit from parent app [aheckmann] | Fixed; stripping Content-Length / Content-Type when 204 | Fixed res.send() 204. Closes #419 | Fixed multiple Set-Cookie headers via res.header(). Closes #402 | Fixed bug messing with error handlers when listenFD() is called instead of listen(). [thanks guillermo] | . 1.0.0rc2 / 2010-08-17 . Added app.register() for template engine mapping. Closes #390 | Added res.render() callback support as second argument (no options) | Added callback support to res.download() | Added callback support for res.sendfile() | Added support for middleware access via express.middlewareName() vs connect.middlewareName() | Added “partials” setting to docs | Added default expresso tests to express(1) generated app. Closes #384 | Fixed res.sendfile() error handling, defer via next() | Fixed res.render() callback when a layout is used [thanks guillermo] | Fixed; make install creating ~/.node_libraries when not present | Fixed issue preventing error handlers from being defined anywhere. Closes #387 | . 1.0.0rc / 2010-07-28 . Added mounted hook. Closes #369 | Added connect dependency to package.json . | Removed “reload views” setting and support code development env never caches, production always caches. . | Removed param in route callbacks, signature is now simply (req, res, next), previously (req, res, params, next). Use req.params for path captures, req.query for GET params. . | Fixed “home” setting | Fixed middleware/router precedence issue. Closes #366 | Fixed; configure() callbacks called immediately. Closes #368 | . 1.0.0beta2 / 2010-07-23 . Added more examples | Added; exporting Server constructor | Added Server#helpers() for view locals | Added Server#dynamicHelpers() for dynamic view locals. Closes #349 | Added support for absolute view paths | Added; home setting defaults to Server#route for mounted apps. Closes #363 | Added Guillermo Rauch to the contributor list | Added support for “as” for non-collection partials. Closes #341 | Fixed install.sh, ensuring ~/.node_libraries exists. Closes #362 [thanks jf] | Fixed res.render() exceptions, now passed to next() when no callback is given [thanks guillermo] | Fixed instanceof Array checks, now Array.isArray() | Fixed express(1) expansion of public dirs. Closes #348 | Fixed middleware precedence. Closes #345 | Fixed view watcher, now async [thanks aheckmann] | . 1.0.0beta / 2010-07-15 . Re-write much faster | much lighter | Check ExpressJS.com for migration guide and updated docs | . | . 0.14.0 / 2010-06-15 . Utilize relative requires | Added Static bufferSize option [aheckmann] | Fixed caching of view and partial subdirectories [aheckmann] | Fixed mime.type() comments now that “.ext” is not supported | Updated haml submodule | Updated class submodule | Removed bin/express | . 0.13.0 / 2010-06-01 . Added node v0.1.97 compatibility | Added support for deleting cookies via Request#cookie(‘key’, null) | Updated haml submodule | Fixed not-found page, now using using charset utf-8 | Fixed show-exceptions page, now using using charset utf-8 | Fixed view support due to fs.readFile Buffers | Changed; mime.type() no longer accepts “.type” due to node extname() changes | . 0.12.0 / 2010-05-22 . Added node v0.1.96 compatibility | Added view helpers export which act as additional local variables | Updated haml submodule | Changed ETag; removed inode, modified time only | Fixed LF to CRLF for setting multiple cookies | Fixed cookie compilation; values are now urlencoded | Fixed cookies parsing; accepts quoted values and url escaped cookies | . 0.11.0 / 2010-05-06 . Added support for layouts using different engines this.render(‘page.html.haml’, { layout: ‘super-cool-layout.html.ejs’ }) | this.render(‘page.html.haml’, { layout: ‘foo’ }) // assumes ‘foo.html.haml’ | this.render(‘page.html.haml’, { layout: false }) // no layout | . | Updated ext submodule | Updated haml submodule | Fixed EJS partial support by passing along the context. Issue #307 | . 0.10.1 / 2010-05-03 . Fixed binary uploads. | . 0.10.0 / 2010-04-30 . Added charset support via Request#charset (automatically assigned to ‘UTF-8’ when respond()’s encoding is set to ‘utf8’ or ‘utf-8’. | Added “encoding” option to Request#render(). Closes #299 | Added “dump exceptions” setting, which is enabled by default. | Added simple ejs template engine support | Added error response support for text/plain, application/json. Closes #297 | Added callback function param to Request#error() | Added Request#sendHead() | Added Request#stream() | Added support for Request#respond(304, null) for empty response bodies | Added ETag support to Request#sendfile() | Added options to Request#sendfile(), passed to fs.createReadStream() | Added filename arg to Request#download() | Performance enhanced due to pre-reversing plugins so that plugins.reverse() is not called on each request | Performance enhanced by preventing several calls to toLowerCase() in Router#match() | Changed; Request#sendfile() now streams | Changed; Renamed Request#halt() to Request#respond(). Closes #289 | Changed; Using sys.inspect() instead of JSON.encode() for error output | Changed; run() returns the http.Server instance. Closes #298 | Changed; Defaulting Server#host to null (INADDR_ANY) | Changed; Logger “common” format scale of 0.4f | Removed Logger “request” format | Fixed; Catching ENOENT in view caching, preventing error when “views/partials” is not found | Fixed several issues with http client | Fixed Logger Content-Length output | Fixed bug preventing Opera from retaining the generated session id. Closes #292 | . 0.9.0 / 2010-04-14 . Added DSL level error() route support | Added DSL level notFound() route support | Added Request#error() | Added Request#notFound() | Added Request#render() callback function. Closes #258 | Added “max upload size” setting | Added “magic” variables to collection partials (__index__, __length__, __isFirst__, __isLast__). Closes #254 | Added haml.js submodule; removed haml-js | Added callback function support to Request#halt() as 3rd/4th arg | Added preprocessing of route param wildcards using param(). Closes #251 | Added view partial support (with collections etc) | Fixed bug preventing falsey params (such as ?page=0). Closes #286 | Fixed setting of multiple cookies. Closes #199 | Changed; view naming convention is now NAME.TYPE.ENGINE (for example page.html.haml) | Changed; session cookie is now httpOnly | Changed; Request is no longer global | Changed; Event is no longer global | Changed; “sys” module is no longer global | Changed; moved Request#download to Static plugin where it belongs | Changed; Request instance created before body parsing. Closes #262 | Changed; Pre-caching views in memory when “cache view contents” is enabled. Closes #253 | Changed; Pre-caching view partials in memory when “cache view partials” is enabled | Updated support to node –version 0.1.90 | Updated dependencies | Removed set(“session cookie”) in favour of use(Session, { cookie: { … }}) | Removed utils.mixin(); use Object#mergeDeep() | . 0.8.0 / 2010-03-19 . Added coffeescript example app. Closes #242 | Changed; cache api now async friendly. Closes #240 | Removed deprecated ‘express/static’ support. Use ‘express/plugins/static’ | . 0.7.6 / 2010-03-19 . Added Request#isXHR. Closes #229 | Added make install (for the executable) | Added express executable for setting up simple app templates | Added “GET /public/*” to Static plugin, defaulting to /public | Added Static plugin | Fixed; Request#render() only calls cache.get() once | Fixed; Namespacing View caches with “view:” | Fixed; Namespacing Static caches with “static:” | Fixed; Both example apps now use the Static plugin | Fixed set(“views”). Closes #239 | Fixed missing space for combined log format | Deprecated Request#sendfile() and ‘express/static’ | Removed Server#running | . 0.7.5 / 2010-03-16 . Added Request#flash() support without args, now returns all flashes | Updated ext submodule | . 0.7.4 / 2010-03-16 . Fixed session reaper | Changed; class.js replacing js-oo Class implementation (quite a bit faster, no browser cruft) | . 0.7.3 / 2010-03-16 . Added package.json | Fixed requiring of haml / sass due to kiwi removal | . 0.7.2 / 2010-03-16 . Fixed GIT submodules (HAH!) | . 0.7.1 / 2010-03-16 . Changed; Express now using submodules again until a PM is adopted | Changed; chat example using millisecond conversions from ext | . 0.7.0 / 2010-03-15 . Added Request#pass() support (finds the next matching route, or the given path) | Added Logger plugin (default “common” format replaces CommonLogger) | Removed Profiler plugin | Removed CommonLogger plugin | . 0.6.0 / 2010-03-11 . Added seed.yml for kiwi package management support | Added HTTP client query string support when method is GET. Closes #205 . | Added support for arbitrary view engines. For example “foo.engine.html” will now require(‘engine’), the exports from this module are cached after the first require(). . | Added async plugin support . | Removed usage of RESTful route funcs as http client get() etc, use http.get() and friends . | Removed custom exceptions | . 0.5.0 / 2010-03-10 . Added ext dependency (library of js extensions) | Removed extname() / basename() utils. Use path module | Removed toArray() util. Use arguments.values | Removed escapeRegexp() util. Use RegExp.escape() | Removed process.mixin() dependency. Use utils.mixin() | Removed Collection | Removed ElementCollection | Shameless self promotion of ebook “Advanced JavaScript” (http://dev-mag.com) ;) | . 0.4.0 / 2010-02-11 . Added flash() example to sample upload app | Added high level restful http client module (express/http) | Changed; RESTful route functions double as HTTP clients. Closes #69 | Changed; throwing error when routes are added at runtime | Changed; defaulting render() context to the current Request. Closes #197 | Updated haml submodule | . 0.3.0 / 2010-02-11 . Updated haml / sass submodules. Closes #200 | Added flash message support. Closes #64 | Added accepts() now allows multiple args. fixes #117 | Added support for plugins to halt. Closes #189 | Added alternate layout support. Closes #119 | Removed Route#run(). Closes #188 | Fixed broken specs due to use(Cookie) missing | . 0.2.1 / 2010-02-05 . Added “plot” format option for Profiler (for gnuplot processing) | Added request number to Profiler plugin | Fixed binary encoding for multipart file uploads, was previously defaulting to UTF8 | Fixed issue with routes not firing when not files are present. Closes #184 | Fixed process.Promise -&gt; events.Promise | . 0.2.0 / 2010-02-03 . Added parseParam() support for name[] etc. (allows for file inputs with “multiple” attr) Closes #180 | Added Both Cache and Session option “reapInterval” may be “reapEvery”. Closes #174 | Added expiration support to cache api with reaper. Closes #133 | Added cache Store.Memory#reap() | Added Cache; cache api now uses first class Cache instances | Added abstract session Store. Closes #172 | Changed; cache Memory.Store#get() utilizing Collection | Renamed MemoryStore -&gt; Store.Memory | Fixed use() of the same plugin several time will always use latest options. Closes #176 | . 0.1.0 / 2010-02-03 . Changed; Hooks (before / after) pass request as arg as well as evaluated in their context | Updated node support to 0.1.27 Closes #169 | Updated dirname(__filename) -&gt; __dirname | Updated libxmljs support to v0.2.0 | Added session support with memory store / reaping | Added quick uid() helper | Added multi-part upload support | Added Sass.js support / submodule | Added production env caching view contents and static files | Added static file caching. Closes #136 | Added cache plugin with memory stores | Added support to StaticFile so that it works with non-textual files. | Removed dirname() helper | Removed several globals (now their modules must be required) | . 0.0.2 / 2010-01-10 . Added view benchmarks; currently haml vs ejs | Added Request#attachment() specs. Closes #116 | Added use of node’s parseQuery() util. Closes #123 | Added make init for submodules | Updated Haml | Updated sample chat app to show messages on load | Updated libxmljs parseString -&gt; parseHtmlString | Fixed make init to work with older versions of git | Fixed specs can now run independent specs for those who can’t build deps. Closes #127 | Fixed issues introduced by the node url module changes. Closes 126. | Fixed two assertions failing due to Collection#keys() returning strings | Fixed faulty Collection#toArray() spec due to keys() returning strings | Fixed make test now builds libxmljs.node before testing | . 0.0.1 / 2010-01-03 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/express/History.html",
          "relUrl": "/node_backend_Trystan/node_modules/express/History.html",
          "date": ""
      }
      
  

  
      ,"page38": {
          "title": "0.5.0 / 2022-04-11",
          "content": "0.5.0 / 2022-04-11 . Add priority option | Fix expires option to reject invalid dates | pref: improve default decode speed | pref: remove slow string split in parse | . 0.4.2 / 2022-02-02 . pref: read value only when assigning in parse | pref: remove unnecessary regexp in parse | . 0.4.1 / 2020-04-21 . Fix maxAge option to reject invalid values | . 0.4.0 / 2019-05-15 . Add SameSite=None support | . 0.3.1 / 2016-05-26 . Fix sameSite: true to work with draft-7 clients true now sends SameSite=Strict instead of SameSite | . | . 0.3.0 / 2016-05-26 . Add sameSite option Replaces firstPartyOnly option, never implemented by browsers | . | Improve error message when encode is not a function | Improve error message when expires is not a Date | . 0.2.4 / 2016-05-20 . perf: enable strict mode | perf: use for loop in parse | perf: use string concatination for serialization | . 0.2.3 / 2015-10-25 . Fix cookie Max-Age to never be a floating point number | . 0.2.2 / 2015-09-17 . Fix regression when setting empty cookie value Ease the new restriction, which is just basic header-level validation | . | Fix typo in invalid value errors | . 0.2.1 / 2015-09-17 . Throw on invalid values provided to serialize Ensures the resulting string is a valid HTTP header value | . | . 0.2.0 / 2015-08-13 . Add firstPartyOnly option | Throw better error for invalid argument to parse | perf: hoist regular expression | . 0.1.5 / 2015-09-17 . Fix regression when setting empty cookie value Ease the new restriction, which is just basic header-level validation | . | Fix typo in invalid value errors | . 0.1.4 / 2015-09-17 . Throw better error for invalid argument to parse | Throw on invalid values provided to serialize Ensures the resulting string is a valid HTTP header value | . | . 0.1.3 / 2015-05-19 . Reduce the scope of try-catch deopt | Remove argument reassignments | . 0.1.2 / 2014-04-16 . Remove unnecessary files from npm package | . 0.1.1 / 2014-02-23 . Fix bad parse when cookie value contained a comma | Fix support for maxAge of 0 | . 0.1.0 / 2013-05-01 . Add decode option | Add encode option | . 0.0.6 / 2013-04-08 . Ignore cookie parts missing = | . 0.0.5 / 2012-10-29 . Return raw cookie value if value unescape errors | . 0.0.4 / 2012-06-21 . Use encode/decodeURIComponent for cookie encoding/decoding Improve server/client interoperability | . | . 0.0.3 / 2012-06-06 . Only escape special characters per the cookie RFC | . 0.0.2 / 2012-06-01 . Fix maxAge option to not throw error | . 0.0.1 / 2012-05-28 . Add more tests | . 0.0.0 / 2012-05-28 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/express/node_modules/cookie/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/express/node_modules/cookie/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page39": {
          "title": "Security Policies and Procedures",
          "content": "Security Policies and Procedures . Reporting a Bug . The cookie team and community take all security bugs seriously. Thank you for improving the security of the project. We appreciate your efforts and responsible disclosure and will make every effort to acknowledge your contributions. . Report security bugs by emailing the current owner(s) of cookie. This information can be found in the npm registry using the command npm owner ls cookie. If unsure or unable to get the information from the above, open an issue in the project issue tracker asking for the current contact information. . To ensure the timely response to your report, please ensure that the entirety of the report is contained within the email body and not solely behind a web link or an attachment. . At least one owner will acknowledge your email within 48 hours, and will send a more detailed response within 48 hours indicating the next steps in handling your report. After the initial reply to your report, the owners will endeavor to keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/express/node_modules/cookie/SECURITY.html",
          "relUrl": "/node_backend_Trystan/node_modules/express/node_modules/cookie/SECURITY.html",
          "date": ""
      }
      
  

  
      ,"page40": {
          "title": "2.6.9 / 2017-09-22",
          "content": "2.6.9 / 2017-09-22 . remove ReDoS regexp in %o formatter (#504) | . 2.6.8 / 2017-05-18 . Fix: Check for undefined on browser globals (#462, @marbemac) | . 2.6.7 / 2017-05-16 . Fix: Update ms to 2.0.0 to fix regular expression denial of service vulnerability (#458, @hubdotcom) | Fix: Inline extend function in node implementation (#452, @dougwilson) | Docs: Fix typo (#455, @msasad) | . 2.6.5 / 2017-04-27 . Fix: null reference check on window.documentElement.style.WebkitAppearance (#447, @thebigredgeek) | Misc: clean up browser reference checks (#447, @thebigredgeek) | Misc: add npm-debug.log to .gitignore (@thebigredgeek) | . 2.6.4 / 2017-04-20 . Fix: bug that would occure if process.env.DEBUG is a non-string value. (#444, @LucianBuzzo) | Chore: ignore bower.json in npm installations. (#437, @joaovieira) | Misc: update “ms” to v0.7.3 (@tootallnate) | . 2.6.3 / 2017-03-13 . Fix: Electron reference to process.env.DEBUG (#431, @paulcbetts) | Docs: Changelog fix (@thebigredgeek) | . 2.6.2 / 2017-03-10 . Fix: DEBUG_MAX_ARRAY_LENGTH (#420, @slavaGanzin) | Docs: Add backers and sponsors from Open Collective (#422, @piamancini) | Docs: Add Slackin invite badge (@tootallnate) | . 2.6.1 / 2017-02-10 . Fix: Module’s export default syntax fix for IE8 Expected identifier error | Fix: Whitelist DEBUG_FD for values 1 and 2 only (#415, @pi0) | Fix: IE8 “Expected identifier” error (#414, @vgoma) | Fix: Namespaces would not disable once enabled (#409, @musikov) | . 2.6.0 / 2016-12-28 . Fix: added better null pointer checks for browser useColors (@thebigredgeek) | Improvement: removed explicit window.debug export (#404, @tootallnate) | Improvement: deprecated DEBUG_FD environment variable (#405, @tootallnate) | . 2.5.2 / 2016-12-25 . Fix: reference error on window within webworkers (#393, @KlausTrainer) | Docs: fixed README typo (#391, @lurch) | Docs: added notice about v3 api discussion (@thebigredgeek) | . 2.5.1 / 2016-12-20 . Fix: babel-core compatibility | . 2.5.0 / 2016-12-20 . Fix: wrong reference in bower file (@thebigredgeek) | Fix: webworker compatibility (@thebigredgeek) | Fix: output formatting issue (#388, @kribblo) | Fix: babel-loader compatibility (#383, @escwald) | Misc: removed built asset from repo and publications (@thebigredgeek) | Misc: moved source files to /src (#378, @yamikuronue) | Test: added karma integration and replaced babel with browserify for browser tests (#378, @yamikuronue) | Test: coveralls integration (#378, @yamikuronue) | Docs: simplified language in the opening paragraph (#373, @yamikuronue) | . 2.4.5 / 2016-12-17 . Fix: navigator undefined in Rhino (#376, @jochenberger) | Fix: custom log function (#379, @hsiliev) | Improvement: bit of cleanup + linting fixes (@thebigredgeek) | Improvement: rm non-maintainted dist/ dir (#375, @freewil) | Docs: simplified language in the opening paragraph. (#373, @yamikuronue) | . 2.4.4 / 2016-12-14 . Fix: work around debug being loaded in preload scripts for electron (#368, @paulcbetts) | . 2.4.3 / 2016-12-14 . Fix: navigation.userAgent error for react native (#364, @escwald) | . 2.4.2 / 2016-12-14 . Fix: browser colors (#367, @tootallnate) | Misc: travis ci integration (@thebigredgeek) | Misc: added linting and testing boilerplate with sanity check (@thebigredgeek) | . 2.4.1 / 2016-12-13 . Fix: typo that broke the package (#356) | . 2.4.0 / 2016-12-13 . Fix: bower.json references unbuilt src entry point (#342, @justmatt) | Fix: revert “handle regex special characters” (@tootallnate) | Feature: configurable util.inspect()`options for NodeJS (#327, @tootallnate) | Feature: %O`(big O) pretty-prints objects (#322, @tootallnate) | Improvement: allow colors in workers (#335, @botverse) | Improvement: use same color for same namespace. (#338, @lchenay) | . 2.3.3 / 2016-11-09 . Fix: Catch JSON.stringify() errors (#195, Jovan Alleyne) | Fix: Returning localStorage saved values (#331, Levi Thomason) | Improvement: Don’t create an empty object when no process (Nathan Rajlich) | . 2.3.2 / 2016-11-09 . Fix: be super-safe in index.js as well (@TooTallNate) | Fix: should check whether process exists (Tom Newby) | . 2.3.1 / 2016-11-09 . Fix: Added electron compatibility (#324, @paulcbetts) | Improvement: Added performance optimizations (@tootallnate) | Readme: Corrected PowerShell environment variable example (#252, @gimre) | Misc: Removed yarn lock file from source control (#321, @fengmk2) | . 2.3.0 / 2016-11-07 . Fix: Consistent placement of ms diff at end of output (#215, @gorangajic) | Fix: Escaping of regex special characters in namespace strings (#250, @zacronos) | Fix: Fixed bug causing crash on react-native (#282, @vkarpov15) | Feature: Enabled ES6+ compatible import via default export (#212 @bucaran) | Feature: Added %O formatter to reflect Chrome’s console.log capability (#279, @oncletom) | Package: Update “ms” to 0.7.2 (#315, @DevSide) | Package: removed superfluous version property from bower.json (#207 @kkirsche) | Readme: fix USE_COLORS to DEBUG_COLORS | Readme: Doc fixes for format string sugar (#269, @mlucool) | Readme: Updated docs for DEBUG_FD and DEBUG_COLORS environment variables (#232, @mattlyons0) | Readme: doc fixes for PowerShell (#271 #243, @exoticknight @unreadable) | Readme: better docs for browser support (#224, @matthewmueller) | Tooling: Added yarn integration for development (#317, @thebigredgeek) | Misc: Renamed History.md to CHANGELOG.md (@thebigredgeek) | Misc: Added license file (#226 #274, @CantemoInternal @sdaitzman) | Misc: Updated contributors (@thebigredgeek) | . 2.2.0 / 2015-05-09 . package: update “ms” to v0.7.1 (#202, @dougwilson) | README: add logging to file example (#193, @DanielOchoa) | README: fixed a typo (#191, @amir-s) | browser: expose storage (#190, @stephenmathieson) | Makefile: add a distclean target (#189, @stephenmathieson) | . 2.1.3 / 2015-03-13 . Updated stdout/stderr example (#186) | Updated example/stdout.js to match debug current behaviour | Renamed example/stderr.js to stdout.js | Update Readme.md (#184) | replace high intensity foreground color for bold (#182, #183) | . 2.1.2 / 2015-03-01 . dist: recompile | update “ms” to v0.7.0 | package: update “browserify” to v9.0.3 | component: fix “ms.js” repo location | changed bower package name | updated documentation about using debug in a browser | fix: security error on safari (#167, #168, @yields) | . 2.1.1 / 2014-12-29 . browser: use typeof to check for console existence | browser: check for console.log truthiness (fix IE 8/9) | browser: add support for Chrome apps | Readme: added Windows usage remarks | Add bower.json to properly support bower install | . 2.1.0 / 2014-10-15 . node: implement DEBUG_FD env variable support | package: update “browserify” to v6.1.0 | package: add “license” field to package.json (#135, @panuhorsmalahti) | . 2.0.0 / 2014-09-01 . package: update “browserify” to v5.11.0 | node: use stderr rather than stdout for logging (#29, @stephenmathieson) | . 1.0.4 / 2014-07-15 . dist: recompile | example: remove console.info() log usage | example: add “Content-Type” UTF-8 header to browser example | browser: place %c marker after the space character | browser: reset the “content” color via color: inherit | browser: add colors support for Firefox &gt;= v31 | debug: prefer an instance log() function over the global one (#119) | Readme: update documentation about styled console logs for FF v31 (#116, @wryk) | . 1.0.3 / 2014-07-09 . Add support for multiple wildcards in namespaces (#122, @seegno) | browser: fix lint | . 1.0.2 / 2014-06-10 . browser: update color palette (#113, @gscottolson) | common: make console logging function configurable (#108, @timoxley) | node: fix %o colors on old node &lt;= 0.8.x | Makefile: find node path using shell/which (#109, @timoxley) | . 1.0.1 / 2014-06-06 . browser: use removeItem() to clear localStorage | browser, node: don’t set DEBUG if namespaces is undefined (#107, @leedm777) | package: add “contributors” section | node: fix comment typo | README: list authors | . 1.0.0 / 2014-06-04 . make ms diff be global, not be scope | debug: ignore empty strings in enable() | node: make DEBUG_COLORS able to disable coloring | *: export the colors array | npmignore: don’t publish the dist dir | Makefile: refactor to use browserify | package: add “browserify” as a dev dependency | Readme: add Web Inspector Colors section | node: reset terminal color for the debug content | node: map “%o” to util.inspect() | browser: map “%j” to JSON.stringify() | debug: add custom “formatters” | debug: use “ms” module for humanizing the diff | Readme: add “bash” syntax highlighting | browser: add Firebug color support | browser: add colors for WebKit browsers | node: apply log to console | rewrite: abstract common logic for Node &amp; browsers | add .jshintrc file | . 0.8.1 / 2014-04-14 . package: re-add the “component” section | . 0.8.0 / 2014-03-30 . add enable() method for nodejs. Closes #27 | change from stderr to stdout | remove unnecessary index.js file | . 0.7.4 / 2013-11-13 . remove “browserify” key from package.json (fixes something in browserify) | . 0.7.3 / 2013-10-30 . fix: catch localStorage security error when cookies are blocked (Chrome) | add debug(err) support. Closes #46 | add .browser prop to package.json. Closes #42 | . 0.7.2 / 2013-02-06 . fix package.json | fix: Mobile Safari (private mode) is broken with debug | fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript | . 0.7.1 / 2013-02-05 . add repository URL to package.json | add DEBUG_COLORED to force colored output | add browserify support | fix component. Closes #24 | . 0.7.0 / 2012-05-04 . Added .component to package.json | Added debug.component.js build | . 0.6.0 / 2012-03-16 . Added support for “-“ prefix in DEBUG [Vinay Pulim] | Added .enabled flag to the node version [TooTallNate] | . 0.5.0 / 2012-02-02 . Added: humanize diffs. Closes #8 | Added debug.disable() to the CS variant | Removed padding. Closes #10 | Fixed: persist client-side variant again. Closes #9 | . 0.4.0 / 2012-02-01 . Added browser variant support for older browsers [TooTallNate] | Added debug.enable(&#39;project:*&#39;) to browser variant [TooTallNate] | Added padding to diff (moved it to the right) | . 0.3.0 / 2012-01-26 . Added millisecond diff when isatty, otherwise UTC string | . 0.2.0 / 2012-01-22 . Added wildcard support | . 0.1.0 / 2011-12-02 . Added: remove colors unless stderr isatty [TooTallNate] | . 0.0.1 / 2010-01-03 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/express/node_modules/debug/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/express/node_modules/debug/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page41": {
          "title": "1.2.0 / 2022-03-22",
          "content": "1.2.0 / 2022-03-22 . Remove set content headers that break response | deps: on-finished@2.4.1 | deps: statuses@2.0.1 Rename 425 Unordered Collection to standard 425 Too Early | . | . 1.1.2 / 2019-05-09 . Set stricter Content-Security-Policy header | deps: parseurl@~1.3.3 | deps: statuses@~1.5.0 | . 1.1.1 / 2018-03-06 . Fix 404 output for bad / missing pathnames | deps: encodeurl@~1.0.2 Fix encoding % as last character | . | deps: statuses@~1.4.0 | . 1.1.0 / 2017-09-24 . Use res.headersSent when available | . 1.0.6 / 2017-09-22 . deps: debug@2.6.9 | . 1.0.5 / 2017-09-15 . deps: parseurl@~1.3.2 perf: reduce overhead for full URLs | perf: unroll the “fast-path” RegExp | . | . 1.0.4 / 2017-08-03 . deps: debug@2.6.8 | . 1.0.3 / 2017-05-16 . deps: debug@2.6.7 deps: ms@2.0.0 | . | . 1.0.2 / 2017-04-22 . deps: debug@2.6.4 deps: ms@0.7.3 | . | . 1.0.1 / 2017-03-21 . Fix missing &lt;/html&gt; in HTML document | deps: debug@2.6.3 Fix: DEBUG_MAX_ARRAY_LENGTH | . | . 1.0.0 / 2017-02-15 . Fix exception when err cannot be converted to a string | Fully URL-encode the pathname in the 404 message | Only include the pathname in the 404 message | Send complete HTML document | Set Content-Security-Policy: default-src &#39;self&#39; header | deps: debug@2.6.1 Allow colors in workers | Deprecated DEBUG_FD environment variable set to 3 or higher | Fix error when running under React Native | Use same color for same namespace | deps: ms@0.7.2 | . | . 0.5.1 / 2016-11-12 . Fix exception when err.headers is not an object | deps: statuses@~1.3.1 | perf: hoist regular expressions | perf: remove duplicate validation path | . 0.5.0 / 2016-06-15 . Change invalid or non-numeric status code to 500 | Overwrite status message to match set status code | Prefer err.statusCode if err.status is invalid | Set response headers from err.headers object | Use statuses instead of http module for status messages Includes all defined status messages | . | . 0.4.1 / 2015-12-02 . deps: escape-html@~1.0.3 perf: enable strict mode | perf: optimize string replacement | perf: use faster string coercion | . | . 0.4.0 / 2015-06-14 . Fix a false-positive when unpiping in Node.js 0.8 | Support statusCode property on Error objects | Use unpipe module for unpiping requests | deps: escape-html@1.0.2 | deps: on-finished@~2.3.0 Add defined behavior for HTTP CONNECT requests | Add defined behavior for HTTP Upgrade requests | deps: ee-first@1.1.1 | . | perf: enable strict mode | perf: remove argument reassignment | . 0.3.6 / 2015-05-11 . deps: debug@~2.2.0 deps: ms@0.7.1 | . | . 0.3.5 / 2015-04-22 . deps: on-finished@~2.2.1 Fix isFinished(req) when data buffered | . | . 0.3.4 / 2015-03-15 . deps: debug@~2.1.3 Fix high intensity foreground color for bold | deps: ms@0.7.0 | . | . 0.3.3 / 2015-01-01 . deps: debug@~2.1.1 | deps: on-finished@~2.2.0 | . 0.3.2 / 2014-10-22 . deps: on-finished@~2.1.1 Fix handling of pipelined requests | . | . 0.3.1 / 2014-10-16 . deps: debug@~2.1.0 Implement DEBUG_FD env variable support | . | . 0.3.0 / 2014-09-17 . Terminate in progress response only on error | Use on-finished to determine request status | . 0.2.0 / 2014-09-03 . Set X-Content-Type-Options: nosniff header | deps: debug@~2.0.0 | . 0.1.0 / 2014-07-16 . Respond after request fully read prevents hung responses and socket hang ups | . | deps: debug@1.0.4 | . 0.0.3 / 2014-07-11 . deps: debug@1.0.3 Add support for multiple wildcards in namespaces | . | . 0.0.2 / 2014-06-19 . Handle invalid status codes | . 0.0.1 / 2014-06-05 . deps: debug@1.0.2 | . 0.0.0 / 2014-06-05 . Extracted from connect/express | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/finalhandler/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/finalhandler/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page42": {
          "title": "Security Policies and Procedures",
          "content": "Security Policies and Procedures . Reporting a Bug . The finalhandler team and community take all security bugs seriously. Thank you for improving the security of Express. We appreciate your efforts and responsible disclosure and will make every effort to acknowledge your contributions. . Report security bugs by emailing the current owner(s) of finalhandler. This information can be found in the npm registry using the command npm owner ls finalhandler. If unsure or unable to get the information from the above, open an issue in the project issue tracker asking for the current contact information. . To ensure the timely response to your report, please ensure that the entirety of the report is contained within the email body and not solely behind a web link or an attachment. . At least one owner will acknowledge your email within 48 hours, and will send a more detailed response within 48 hours indicating the next steps in handling your report. After the initial reply to your report, the owners will endeavor to keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/finalhandler/SECURITY.html",
          "relUrl": "/node_backend_Trystan/node_modules/finalhandler/SECURITY.html",
          "date": ""
      }
      
  

  
      ,"page43": {
          "title": "2.6.9 / 2017-09-22",
          "content": "2.6.9 / 2017-09-22 . remove ReDoS regexp in %o formatter (#504) | . 2.6.8 / 2017-05-18 . Fix: Check for undefined on browser globals (#462, @marbemac) | . 2.6.7 / 2017-05-16 . Fix: Update ms to 2.0.0 to fix regular expression denial of service vulnerability (#458, @hubdotcom) | Fix: Inline extend function in node implementation (#452, @dougwilson) | Docs: Fix typo (#455, @msasad) | . 2.6.5 / 2017-04-27 . Fix: null reference check on window.documentElement.style.WebkitAppearance (#447, @thebigredgeek) | Misc: clean up browser reference checks (#447, @thebigredgeek) | Misc: add npm-debug.log to .gitignore (@thebigredgeek) | . 2.6.4 / 2017-04-20 . Fix: bug that would occure if process.env.DEBUG is a non-string value. (#444, @LucianBuzzo) | Chore: ignore bower.json in npm installations. (#437, @joaovieira) | Misc: update “ms” to v0.7.3 (@tootallnate) | . 2.6.3 / 2017-03-13 . Fix: Electron reference to process.env.DEBUG (#431, @paulcbetts) | Docs: Changelog fix (@thebigredgeek) | . 2.6.2 / 2017-03-10 . Fix: DEBUG_MAX_ARRAY_LENGTH (#420, @slavaGanzin) | Docs: Add backers and sponsors from Open Collective (#422, @piamancini) | Docs: Add Slackin invite badge (@tootallnate) | . 2.6.1 / 2017-02-10 . Fix: Module’s export default syntax fix for IE8 Expected identifier error | Fix: Whitelist DEBUG_FD for values 1 and 2 only (#415, @pi0) | Fix: IE8 “Expected identifier” error (#414, @vgoma) | Fix: Namespaces would not disable once enabled (#409, @musikov) | . 2.6.0 / 2016-12-28 . Fix: added better null pointer checks for browser useColors (@thebigredgeek) | Improvement: removed explicit window.debug export (#404, @tootallnate) | Improvement: deprecated DEBUG_FD environment variable (#405, @tootallnate) | . 2.5.2 / 2016-12-25 . Fix: reference error on window within webworkers (#393, @KlausTrainer) | Docs: fixed README typo (#391, @lurch) | Docs: added notice about v3 api discussion (@thebigredgeek) | . 2.5.1 / 2016-12-20 . Fix: babel-core compatibility | . 2.5.0 / 2016-12-20 . Fix: wrong reference in bower file (@thebigredgeek) | Fix: webworker compatibility (@thebigredgeek) | Fix: output formatting issue (#388, @kribblo) | Fix: babel-loader compatibility (#383, @escwald) | Misc: removed built asset from repo and publications (@thebigredgeek) | Misc: moved source files to /src (#378, @yamikuronue) | Test: added karma integration and replaced babel with browserify for browser tests (#378, @yamikuronue) | Test: coveralls integration (#378, @yamikuronue) | Docs: simplified language in the opening paragraph (#373, @yamikuronue) | . 2.4.5 / 2016-12-17 . Fix: navigator undefined in Rhino (#376, @jochenberger) | Fix: custom log function (#379, @hsiliev) | Improvement: bit of cleanup + linting fixes (@thebigredgeek) | Improvement: rm non-maintainted dist/ dir (#375, @freewil) | Docs: simplified language in the opening paragraph. (#373, @yamikuronue) | . 2.4.4 / 2016-12-14 . Fix: work around debug being loaded in preload scripts for electron (#368, @paulcbetts) | . 2.4.3 / 2016-12-14 . Fix: navigation.userAgent error for react native (#364, @escwald) | . 2.4.2 / 2016-12-14 . Fix: browser colors (#367, @tootallnate) | Misc: travis ci integration (@thebigredgeek) | Misc: added linting and testing boilerplate with sanity check (@thebigredgeek) | . 2.4.1 / 2016-12-13 . Fix: typo that broke the package (#356) | . 2.4.0 / 2016-12-13 . Fix: bower.json references unbuilt src entry point (#342, @justmatt) | Fix: revert “handle regex special characters” (@tootallnate) | Feature: configurable util.inspect()`options for NodeJS (#327, @tootallnate) | Feature: %O`(big O) pretty-prints objects (#322, @tootallnate) | Improvement: allow colors in workers (#335, @botverse) | Improvement: use same color for same namespace. (#338, @lchenay) | . 2.3.3 / 2016-11-09 . Fix: Catch JSON.stringify() errors (#195, Jovan Alleyne) | Fix: Returning localStorage saved values (#331, Levi Thomason) | Improvement: Don’t create an empty object when no process (Nathan Rajlich) | . 2.3.2 / 2016-11-09 . Fix: be super-safe in index.js as well (@TooTallNate) | Fix: should check whether process exists (Tom Newby) | . 2.3.1 / 2016-11-09 . Fix: Added electron compatibility (#324, @paulcbetts) | Improvement: Added performance optimizations (@tootallnate) | Readme: Corrected PowerShell environment variable example (#252, @gimre) | Misc: Removed yarn lock file from source control (#321, @fengmk2) | . 2.3.0 / 2016-11-07 . Fix: Consistent placement of ms diff at end of output (#215, @gorangajic) | Fix: Escaping of regex special characters in namespace strings (#250, @zacronos) | Fix: Fixed bug causing crash on react-native (#282, @vkarpov15) | Feature: Enabled ES6+ compatible import via default export (#212 @bucaran) | Feature: Added %O formatter to reflect Chrome’s console.log capability (#279, @oncletom) | Package: Update “ms” to 0.7.2 (#315, @DevSide) | Package: removed superfluous version property from bower.json (#207 @kkirsche) | Readme: fix USE_COLORS to DEBUG_COLORS | Readme: Doc fixes for format string sugar (#269, @mlucool) | Readme: Updated docs for DEBUG_FD and DEBUG_COLORS environment variables (#232, @mattlyons0) | Readme: doc fixes for PowerShell (#271 #243, @exoticknight @unreadable) | Readme: better docs for browser support (#224, @matthewmueller) | Tooling: Added yarn integration for development (#317, @thebigredgeek) | Misc: Renamed History.md to CHANGELOG.md (@thebigredgeek) | Misc: Added license file (#226 #274, @CantemoInternal @sdaitzman) | Misc: Updated contributors (@thebigredgeek) | . 2.2.0 / 2015-05-09 . package: update “ms” to v0.7.1 (#202, @dougwilson) | README: add logging to file example (#193, @DanielOchoa) | README: fixed a typo (#191, @amir-s) | browser: expose storage (#190, @stephenmathieson) | Makefile: add a distclean target (#189, @stephenmathieson) | . 2.1.3 / 2015-03-13 . Updated stdout/stderr example (#186) | Updated example/stdout.js to match debug current behaviour | Renamed example/stderr.js to stdout.js | Update Readme.md (#184) | replace high intensity foreground color for bold (#182, #183) | . 2.1.2 / 2015-03-01 . dist: recompile | update “ms” to v0.7.0 | package: update “browserify” to v9.0.3 | component: fix “ms.js” repo location | changed bower package name | updated documentation about using debug in a browser | fix: security error on safari (#167, #168, @yields) | . 2.1.1 / 2014-12-29 . browser: use typeof to check for console existence | browser: check for console.log truthiness (fix IE 8/9) | browser: add support for Chrome apps | Readme: added Windows usage remarks | Add bower.json to properly support bower install | . 2.1.0 / 2014-10-15 . node: implement DEBUG_FD env variable support | package: update “browserify” to v6.1.0 | package: add “license” field to package.json (#135, @panuhorsmalahti) | . 2.0.0 / 2014-09-01 . package: update “browserify” to v5.11.0 | node: use stderr rather than stdout for logging (#29, @stephenmathieson) | . 1.0.4 / 2014-07-15 . dist: recompile | example: remove console.info() log usage | example: add “Content-Type” UTF-8 header to browser example | browser: place %c marker after the space character | browser: reset the “content” color via color: inherit | browser: add colors support for Firefox &gt;= v31 | debug: prefer an instance log() function over the global one (#119) | Readme: update documentation about styled console logs for FF v31 (#116, @wryk) | . 1.0.3 / 2014-07-09 . Add support for multiple wildcards in namespaces (#122, @seegno) | browser: fix lint | . 1.0.2 / 2014-06-10 . browser: update color palette (#113, @gscottolson) | common: make console logging function configurable (#108, @timoxley) | node: fix %o colors on old node &lt;= 0.8.x | Makefile: find node path using shell/which (#109, @timoxley) | . 1.0.1 / 2014-06-06 . browser: use removeItem() to clear localStorage | browser, node: don’t set DEBUG if namespaces is undefined (#107, @leedm777) | package: add “contributors” section | node: fix comment typo | README: list authors | . 1.0.0 / 2014-06-04 . make ms diff be global, not be scope | debug: ignore empty strings in enable() | node: make DEBUG_COLORS able to disable coloring | *: export the colors array | npmignore: don’t publish the dist dir | Makefile: refactor to use browserify | package: add “browserify” as a dev dependency | Readme: add Web Inspector Colors section | node: reset terminal color for the debug content | node: map “%o” to util.inspect() | browser: map “%j” to JSON.stringify() | debug: add custom “formatters” | debug: use “ms” module for humanizing the diff | Readme: add “bash” syntax highlighting | browser: add Firebug color support | browser: add colors for WebKit browsers | node: apply log to console | rewrite: abstract common logic for Node &amp; browsers | add .jshintrc file | . 0.8.1 / 2014-04-14 . package: re-add the “component” section | . 0.8.0 / 2014-03-30 . add enable() method for nodejs. Closes #27 | change from stderr to stdout | remove unnecessary index.js file | . 0.7.4 / 2013-11-13 . remove “browserify” key from package.json (fixes something in browserify) | . 0.7.3 / 2013-10-30 . fix: catch localStorage security error when cookies are blocked (Chrome) | add debug(err) support. Closes #46 | add .browser prop to package.json. Closes #42 | . 0.7.2 / 2013-02-06 . fix package.json | fix: Mobile Safari (private mode) is broken with debug | fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript | . 0.7.1 / 2013-02-05 . add repository URL to package.json | add DEBUG_COLORED to force colored output | add browserify support | fix component. Closes #24 | . 0.7.0 / 2012-05-04 . Added .component to package.json | Added debug.component.js build | . 0.6.0 / 2012-03-16 . Added support for “-“ prefix in DEBUG [Vinay Pulim] | Added .enabled flag to the node version [TooTallNate] | . 0.5.0 / 2012-02-02 . Added: humanize diffs. Closes #8 | Added debug.disable() to the CS variant | Removed padding. Closes #10 | Fixed: persist client-side variant again. Closes #9 | . 0.4.0 / 2012-02-01 . Added browser variant support for older browsers [TooTallNate] | Added debug.enable(&#39;project:*&#39;) to browser variant [TooTallNate] | Added padding to diff (moved it to the right) | . 0.3.0 / 2012-01-26 . Added millisecond diff when isatty, otherwise UTC string | . 0.2.0 / 2012-01-22 . Added wildcard support | . 0.1.0 / 2011-12-02 . Added: remove colors unless stderr isatty [TooTallNate] | . 0.0.1 / 2010-01-03 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/finalhandler/node_modules/debug/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/finalhandler/node_modules/debug/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page44": {
          "title": "0.2.0 / 2021-05-31",
          "content": "0.2.0 / 2021-05-31 . Use req.socket over deprecated req.connection | . 0.1.2 / 2017-09-14 . perf: improve header parsing | perf: reduce overhead when no X-Forwarded-For header | . 0.1.1 / 2017-09-10 . Fix trimming leading / trailing OWS | perf: hoist regular expression | . 0.1.0 / 2014-09-21 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/forwarded/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/forwarded/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page45": {
          "title": "0.5.2 / 2017-09-13",
          "content": "0.5.2 / 2017-09-13 . Fix regression matching multiple ETags in If-None-Match | perf: improve If-None-Match token parsing | . 0.5.1 / 2017-09-11 . Fix handling of modified headers with invalid dates | perf: improve ETag match loop | . 0.5.0 / 2017-02-21 . Fix incorrect result when If-None-Match has both * and ETags | Fix weak ETag matching to match spec | perf: delay reading header values until needed | perf: skip checking modified time if ETag check failed | perf: skip parsing If-None-Match when no ETag header | perf: use Date.parse instead of new Date | . 0.4.0 / 2017-02-05 . Fix false detection of no-cache request directive | perf: enable strict mode | perf: hoist regular expressions | perf: remove duplicate conditional | perf: remove unnecessary boolean coercions | . 0.3.0 / 2015-05-12 . Add weak ETag matching support | . 0.2.4 / 2014-09-07 . Support Node.js 0.6 | . 0.2.3 / 2014-09-07 . Move repository to jshttp | . 0.2.2 / 2014-02-19 . Revert “Fix for blank page on Safari reload” | . 0.2.1 / 2014-01-29 . Fix for blank page on Safari reload | . 0.2.0 / 2013-08-11 . Return stale for Cache-Control: no-cache | . 0.1.0 / 2012-06-15 . Add If-None-Match: * support | . 0.0.1 / 2012-06-10 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/fresh/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/fresh/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page46": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v1.1.2 - 2023-10-12 . Merged . Point to the correct file #16 | . Commits . [Tests] migrate tests to Github Actions 4f8b57c | [Tests] remove jscs 90eb2ed | [meta] update .gitignore 53fcdc3 | [Tests] up to node v11.10, v10.15, v9.11, v8.15, v6.16, v4.9; use nvm install-latest-npm; run audit script in tests 1fe8f6e | [meta] add auto-changelog 1921fcb | [Robustness] remove runtime dependency on all builtins except .apply f743e61 | Docs: enable badges; update wording 503cb12 | [readme] update badges 290c5db | [Tests] switch to nyc for coverage ea360ba | [Dev Deps] update eslint, @ljharb/eslint-config, tape cae5e9e | [meta] add funding field; create FUNDING.yml c9f4274 | [Tests] fix eslint errors from #15 f69aaa2 | [actions] fix permissions 99a0cd9 | [meta] use npmignore to autogenerate an npmignore file f03b524 | [Dev Deps] update @ljharb/eslint‑config, eslint, tape 7af9300 | [Dev Deps] update eslint, @ljharb/eslint-config, covert, tape 64a9127 | [Tests] use aud instead of npm audit e75069c | [Dev Deps] update @ljharb/eslint-config, aud, tape d03555c | [meta] add safe-publish-latest 9c8f809 | [Dev Deps] update @ljharb/eslint-config, tape baf6893 | [meta] create SECURITY.md 4db1779 | [Tests] add npm run audit c8b38ec | Revert “Point to the correct file” 05cdf0f | . v1.1.1 - 2017-08-28 . Commits . [Tests] up to node v8; newer npm breaks on older node; fix scripts 817f7d2 | [Dev Deps] update eslint, jscs, tape, @ljharb/eslint-config 854288b | [Dev Deps] update tape, jscs, eslint, @ljharb/eslint-config 83e639f | Only apps should have lockfiles 5ed97f5 | Use a SPDX-compliant “license” field. 5feefea | . v1.1.0 - 2016-02-14 . Commits . Update eslint, tape; use my personal shared eslint config 9c9062a | Add npm run eslint dd96c56 | [New] return the native bind when available. 82186e0 | [Dev Deps] update tape, jscs, eslint, @ljharb/eslint-config a3dd767 | Update eslint 3dae2f7 | Update tape, covert, jscs a181eee | [Tests] up to node v5.6, v4.3 964929a | Test up to io.js v2.1 2be7310 | Update tape, jscs, eslint, @ljharb/eslint-config 45f3d68 | [Dev Deps] update tape, jscs 6e1340d | [Tests] up to io.js v3.3, node v4.1 d9bad2b | Update eslint 935590c | [Dev Deps] update jscs, eslint, @ljharb/eslint-config 8c9a1ef | Test on io.js v2.2 9a3a38c | Run travis-ci tests on iojs and node v0.12; speed up builds; allow 0.8 failures. 69afc26 | [Dev Deps] Update tape, eslint 36c1be0 | Update tape, jscs 98d8303 | Update jscs 9633a4e | Update tape, jscs c80ef0f | Test up to io.js v3.0 7e2c853 | Test on io.js v2.4 5a199a2 | Test on io.js v2.3 a511b88 | Fixing a typo from 822b4e1938db02dc9584aa434fd3a45cb20caf43 732d6b6 | Update jscs da52a48 | Lock covert to v1.0.0. d6150fd | . v1.0.2 - 2014-10-04 . v1.0.1 - 2014-10-03 . Merged . make CI build faster #3 | . Commits . Using my standard jscs.json d8ee94c | Adding npm run lint 7571ab7 | Using consistent indentation e91a1b1 | Updating jscs 7e17892 | Using consistent quotes c50b57f | Adding keywords cb94631 | Directly export a function expression instead of using a declaration, and relying on hoisting. 5a33c5f | Naming npm URL and badge in README; use SVG 2aef8fc | Naming deps URLs in README 04228d7 | Naming travis-ci URLs in README; using SVG 62c810c | Make sure functions are invoked correctly (also passing coverage tests) 2b289b4 | Removing the strict mode pragmas; they make tests fail. 1aa701d | Adding myself as a contributor 85fd57b | Adding strict mode pragmas 915b08e | Adding devDeps URLs to README 4ccc731 | Fixing the description. a7a472c | Using a function expression instead of a function declaration. b5d3e4e | Updating tape f086be6 | Updating jscs 5f9bdb3 | Updating jscs 9b409ba | Run coverage as part of tests. 8e1b6d4 | Run linter as part of tests c1ca83f | Updating covert 701e837 | . v1.0.0 - 2014-08-09 . Commits . Make sure old and unstable nodes don’t fail Travis 27adca3 | Fixing an issue when the bound function is called as a constructor in ES3. e20122d | Adding npm run coverage a2e29c4 | Updating tape b741168 | Upgrading tape 63631a0 | Updating tape 363cb46 | . v0.2.0 - 2014-03-23 . Commits . Updating test coverage to match es5-shim. aa94d44 | initial 942ee07 | Setting the bound function’s length properly. 079f46a | Ensuring that some older browsers will throw when given a regex. 36ac55b | Removing npm scripts that don’t have dependencies 9d2be60 | Updating tape 297a4ac | Skipping length tests for now. d9891ea | don’t take my tea dccd930 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/function-bind/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/function-bind/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page47": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v1.2.2 - 2023-10-20 . Commits . [Dev Deps] update @ljharb/eslint-config, aud, call-bind, es-abstract, mock-property, object-inspect, tape f51bcf2 | [Refactor] use hasown instead of has 18d14b7 | [Deps] update function-bind 6e109c8 | . v1.2.1 - 2023-05-13 . Commits . [Fix] avoid a crash in envs without __proto__ 7bad8d0 | [Dev Deps] update es-abstract c60e6b7 | . v1.2.0 - 2023-01-19 . Commits . [actions] update checkout action ca6b12f | [Dev Deps] update @ljharb/eslint-config, es-abstract, object-inspect, tape 41a3727 | [Fix] ensure Error.prototype is undeniable c511e97 | [Dev Deps] update aud, es-abstract, tape 1bef8a8 | [Dev Deps] update aud, es-abstract 0d41f16 | [New] add BigInt64Array and BigUint64Array a6cca25 | [Tests] use gopd ecf7722 | . v1.1.3 - 2022-09-12 . Commits . [Dev Deps] update es-abstract, es-value-fixtures, tape 07ff291 | [Fix] properly check for % signs 50ac176 | . v1.1.2 - 2022-06-08 . Fixed . [Fix] properly validate against extra % signs #16 | . Commits . [actions] reuse common workflows 0972547 | [meta] use npmignore to autogenerate an npmignore file 5ba0b51 | [actions] use node/install instead of node/run; use codecov action c364492 | [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, es-abstract, object-inspect, tape dc04dad | [Dev Deps] update eslint, @ljharb/eslint-config, es-abstract, object-inspect, safe-publish-latest, tape 1c14059 | [Tests] use mock-property b396ef0 | [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, object-inspect, tape c2c758d | [Dev Deps] update eslint, @ljharb/eslint-config, aud, es-abstract, es-value-fixtures, object-inspect, tape 29e3c09 | [actions] update codecov uploader 8cbc141 | [Dev Deps] update @ljharb/eslint-config, es-abstract, es-value-fixtures, object-inspect, tape 10b6f5c | [readme] add github actions/codecov badges 4e25400 | [Tests] use for-each instead of foreach c05b957 | [Dev Deps] update es-abstract 29b05ae | [meta] use prepublishOnly script for npm 7+ 95c285d | [Deps] update has-symbols 593cb4f | [readme] fix repo URLs 1c8305b | [Deps] update has-symbols c7138b6 | [Dev Deps] remove unused has-bigints bd63aff | . v1.1.1 - 2021-02-03 . Fixed . [meta] export ./package.json #9 | . Commits . [readme] flesh out the readme; use evalmd d12f12c | [eslint] set up proper globals config 5a8c098 | [Dev Deps] update eslint 7b9a5c0 | . v1.1.0 - 2021-01-25 . Fixed . [Refactor] delay Function eval until syntax-derived values are requested #3 | . Commits . [Tests] migrate tests to Github Actions 2ab762b | [meta] do not publish github action workflow files 5e7108e | [Tests] add some coverage 01ac7a8 | [Dev Deps] update eslint, @ljharb/eslint-config, call-bind, es-abstract, tape; add call-bind 911b672 | [Refactor] rearrange evalled constructors a bit 7e7e4bf | [meta] add Automatic Rebase and Require Allow Edits workflows 0199968 | . v1.0.2 - 2020-12-17 . Commits . [Fix] Throw for non‑existent intrinsics 68f873b | [Fix] Throw for non‑existent segments in the intrinsic path 8325dee | [Dev Deps] update eslint, @ljharb/eslint-config, aud, has-bigints, object-inspect 0c227a7 | [meta] do not lint coverage output 70d2419 | . v1.0.1 - 2020-10-30 . Commits . [Tests] gather coverage data on every job d1d280d | [Fix] add missing dependencies 5031771 | [Tests] use es-value-fixtures af48765 | . v1.0.0 - 2020-10-29 . Commits . Implementation bbce57c | Tests 17b4f0d | Initial commit 3153294 | npm init fb326c4 | [meta] add Automatic Rebase and Require Allow Edits workflows 48862fb | [meta] add auto-changelog 5f28ad0 | [meta] add “funding”; create FUNDING.yml c2bbdde | [Tests] add npm run lint 0a84b98 | Only apps should have lockfiles 9586c75 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/get-intrinsic/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/get-intrinsic/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page48": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v1.0.1 - 2022-11-01 . Commits . [Fix] actually export gOPD instead of dP 4b624bf | . v1.0.0 - 2022-11-01 . Commits . Initial implementation, tests, readme 0911e01 | Initial commit b84e33f | [actions] add reusable workflows 12ae28a | npm init 280118b | [meta] add auto-changelog bb78de5 | [meta] create FUNDING.yml; add funding in package.json 11c22e6 | [meta] use npmignore to autogenerate an npmignore file 4f4537a | Only apps should have lockfiles c567022 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/gopd/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/gopd/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page49": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v1.0.1 - 2023-10-20 . Commits . [meta] use npmignore to autogenerate an npmignore file 5bbf4da | [actions] update rebase action to use reusable workflow 3a5585b | [Dev Deps] update @ljharb/eslint-config, aud, tape e5c1212 | [Dev Deps] update aud, tape e942917 | [Deps] update get-intrinsic f4a44ec | [Deps] update get-intrinsic eeb275b | . v1.0.0 - 2022-04-14 . Commits . Initial implementation, tests 303559f | Initial commit 3a7ca2d | read me dd73dce | npm init c1e6557 | Only apps should have lockfiles e72f7c6 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/has-property-descriptors/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/has-property-descriptors/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page50": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v1.0.1 - 2022-12-21 . Commits . [meta] correct URLs and description ef34483 | [patch] add an additional criteria e81959e | [Dev Deps] update aud 2bec2c4 | . v1.0.0 - 2022-12-12 . Commits . Initial implementation, tests, readme 6886fea | Initial commit 99129c8 | npm init 2844ad8 | Only apps should have lockfiles c65bc5e | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/has-proto/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/has-proto/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page51": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v1.0.3 - 2022-03-01 . Commits . [actions] use node/install instead of node/run; use codecov action 518b28f | [meta] add bugs and homepage fields; reorder package.json c480b13 | [actions] reuse common workflows 01d0ee0 | [actions] update codecov uploader 6424ebe | [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, tape dfa7e7f | [Dev Deps] update eslint, @ljharb/eslint-config, safe-publish-latest, tape 0c8d436 | [Dev Deps] update eslint, @ljharb/eslint-config, aud, tape 9026554 | [readme] add actions and codecov badges eaa9682 | [Dev Deps] update eslint, tape bc7a3ba | [Dev Deps] update eslint, auto-changelog 0ace00a | [meta] use prepublishOnly script for npm 7+ 093f72b | [Tests] test on all 16 minors 9b80d3d | . v1.0.2 - 2021-02-27 . Fixed . [Fix] use a universal way to get the original Symbol #11 | . Commits . [Tests] migrate tests to Github Actions 90ae798 | [meta] do not publish github action workflow files 29e60a1 | [Tests] run nyc on all tests 8476b91 | [readme] fix repo URLs, remove defunct badges 126288e | [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, core-js, get-own-property-symbols d84bdfa | [Tests] fix linting errors 0df3070 | [actions] add “Allow Edits” workflow 1e6bc29 | [Dev Deps] update eslint, @ljharb/eslint-config, tape 36cea2a | [Dev Deps] update eslint, @ljharb/eslint-config, aud, tape 1278338 | [Dev Deps] update eslint, @ljharb/eslint-config, aud, tape 1493254 | [Dev Deps] update eslint, @ljharb/eslint-config, core-js b090bf2 | [actions] switch Automatic Rebase workflow to pull_request_target event 4addb7a | [Dev Deps] update auto-changelog, tape 81d0baf | [Dev Deps] update auto-changelog; add aud 1a4e561 | [readme] remove unused testling URLs 3000941 | [Tests] only audit prod deps 692e974 | [Dev Deps] update @ljharb/eslint-config 51c946c | . v1.0.1 - 2019-11-16 . Commits . [Tests] use shared travis-ci configs ce396c9 | [Tests] up to node v12.4, v11.15, v10.15, v9.11, v8.15, v7.10, v6.17, v4.9; use nvm install-latest-npm 0690732 | [meta] add auto-changelog 2163d0b | [Dev Deps] update eslint, @ljharb/eslint-config, core-js, safe-publish-latest, tape 8e0951f | [actions] add automatic rebasing / merge commit blocking b09cdb7 | [Dev Deps] update eslint, @ljharb/eslint-config, safe-publish-latest, core-js, get-own-property-symbols, tape 1dd42cd | [meta] create FUNDING.yml aa57a17 | Only apps should have lockfiles a2d8bea | [Tests] use npx aud instead of nsp or npm audit with hoops 9e96cb7 | [meta] add funding field a0b32cf | [Dev Deps] update safe-publish-latest cb9f0a5 | . v1.0.0 - 2016-09-19 . Commits . Tests. ecb6eb9 | package.json 88a337c | Initial commit 42e1e55 | Initial implementation. 33f5cc6 | read me 01f1170 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/has-symbols/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/has-symbols/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page52": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v2.0.0 - 2023-10-19 . Commits . revamped implementation, tests, readme 72bf8b3 | [meta] revamp package.json 079775f | Only apps should have lockfiles 6640e23 | . v1.0.1 - 2023-10-10 . Commits . Initial commit 8dbfde6 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/hasown/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/hasown/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page53": {
          "title": "2.0.0 / 2021-12-17",
          "content": "2.0.0 / 2021-12-17 . Drop support for Node.js 0.6 | Remove I&#39;mateapot export; use ImATeapot instead | Remove support for status being non-first argument | Rename UnorderedCollection constructor to TooEarly | deps: depd@2.0.0 Replace internal eval usage with Function constructor | Use instance methods on process to check for listeners | . | deps: statuses@2.0.1 Fix messaging casing of 418 I&#39;m a Teapot | Remove code 306 | Rename 425 Unordered Collection to standard 425 Too Early | . | . 2021-11-14 / 1.8.1 . deps: toidentifier@1.0.1 | . 2020-06-29 / 1.8.0 . Add isHttpError export to determine if value is an HTTP error | deps: setprototypeof@1.2.0 | . 2019-06-24 / 1.7.3 . deps: inherits@2.0.4 | . 2019-02-18 / 1.7.2 . deps: setprototypeof@1.1.1 | . 2018-09-08 / 1.7.1 . Fix error creating objects in some environments | . 2018-07-30 / 1.7.0 . Set constructor name when possible | Use toidentifier module to make class names | deps: statuses@’&gt;= 1.5.0 &lt; 2’ | . 2018-03-29 / 1.6.3 . deps: depd@~1.1.2 perf: remove argument reassignment | . | deps: setprototypeof@1.1.0 | deps: statuses@’&gt;= 1.4.0 &lt; 2’ | . 2017-08-04 / 1.6.2 . deps: depd@1.1.1 Remove unnecessary Buffer loading | . | . 2017-02-20 / 1.6.1 . deps: setprototypeof@1.0.3 Fix shim for old browsers | . | . 2017-02-14 / 1.6.0 . Accept custom 4xx and 5xx status codes in factory | Add deprecation message to &quot;I&#39;mateapot&quot; export | Deprecate passing status code as anything except first argument in factory | Deprecate using non-error status codes | Make message property enumerable for HttpErrors | . 2016-11-16 / 1.5.1 . deps: inherits@2.0.3 Fix issue loading in browser | . | deps: setprototypeof@1.0.2 | deps: statuses@’&gt;= 1.3.1 &lt; 2’ | . 2016-05-18 / 1.5.0 . Support new code 421 Misdirected Request | Use setprototypeof module to replace __proto__ setting | deps: statuses@’&gt;= 1.3.0 &lt; 2’ Add 421 Misdirected Request | perf: enable strict mode | . | perf: enable strict mode | . 2016-01-28 / 1.4.0 . Add HttpError export, for err instanceof createError.HttpError | deps: inherits@2.0.1 | deps: statuses@’&gt;= 1.2.1 &lt; 2’ Fix message for status 451 | Remove incorrect nginx status code | . | . 2015-02-02 / 1.3.1 . Fix regression where status can be overwritten in createError props | . 2015-02-01 / 1.3.0 . Construct errors using defined constructors from createError | Fix error names that are not identifiers createError[&quot;I&#39;mateapot&quot;] is now createError.ImATeapot | . | Set a meaningful name property on constructed errors | . 2014-12-09 / 1.2.8 . Fix stack trace from exported function | Remove arguments.callee usage | . 2014-10-14 / 1.2.7 . Remove duplicate line | . 2014-10-02 / 1.2.6 . Fix expose to be true for ClientError constructor | . 2014-09-28 / 1.2.5 . deps: statuses@1 | . 2014-09-21 / 1.2.4 . Fix dependency version to work with old npms | . 2014-09-21 / 1.2.3 . deps: statuses@~1.1.0 | . 2014-09-21 / 1.2.2 . Fix publish error | . 2014-09-21 / 1.2.1 . Support Node.js 0.6 | Use inherits instead of util | . 2014-09-09 / 1.2.0 . Fix the way inheriting functions | Support expose being provided in properties argument | . 2014-09-08 / 1.1.0 . Default status to 500 | Support provided error to extend | . 2014-09-08 / 1.0.1 . Fix accepting string message | . 2014-09-08 / 1.0.0 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/http-errors/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/http-errors/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page54": {
          "title": "0.4.24 / 2018-08-22",
          "content": "0.4.24 / 2018-08-22 . Added MIK encoding (#196, by @Ivan-Kalatchev) | . 0.4.23 / 2018-05-07 . Fix deprecation warning in Node v10 due to the last usage of new Buffer (#185, by @felixbuenemann) | Switched from NodeBuffer to Buffer in typings (#155 by @felixfbecker, #186 by @larssn) | . 0.4.22 / 2018-05-05 . Use older semver style for dependencies to be compatible with Node version 0.10 (#182, by @dougwilson) | Fix tests to accomodate fixes in Node v10 (#182, by @dougwilson) | . 0.4.21 / 2018-04-06 . Fix encoding canonicalization (#156) | Fix the paths in the “browser” field in package.json (#174 by @LMLB) | Removed “contributors” section in package.json - see Git history instead. | . 0.4.20 / 2018-04-06 . Updated new Buffer() usages with recommended replacements as it’s being deprecated in Node v10 (#176, #178 by @ChALkeR) | . 0.4.19 / 2017-09-09 . Fixed iso8859-1 codec regression in handling untranslatable characters (#162, caused by #147) | Re-generated windows1255 codec, because it was updated in iconv project | Fixed grammar in error message when iconv-lite is loaded with encoding other than utf8 | . 0.4.18 / 2017-06-13 . Fixed CESU-8 regression in Node v8. | . 0.4.17 / 2017-04-22 . Updated typescript definition file to support Angular 2 AoT mode (#153 by @larssn) | . 0.4.16 / 2017-04-22 . Added support for React Native (#150) | Changed iso8859-1 encoding to usine internal ‘binary’ encoding, as it’s the same thing (#147 by @mscdex) | Fixed typo in Readme (#138 by @jiangzhuo) | Fixed build for Node v6.10+ by making correct version comparison | Added a warning if iconv-lite is loaded not as utf-8 (see #142) | . 0.4.15 / 2016-11-21 . Fixed typescript type definition (#137) | . 0.4.14 / 2016-11-20 . Preparation for v1.0 | Added Node v6 and latest Node versions to Travis CI test rig | Deprecated Node v0.8 support | Typescript typings (@larssn) | Fix encoding of Euro character in GB 18030 (inspired by @lygstate) | Add ms prefix to dbcs windows encodings (@rokoroku) | . 0.4.13 / 2015-10-01 . Fix silly mistake in deprecation notice. | . 0.4.12 / 2015-09-26 . Node v4 support: Added CESU-8 decoding (#106) | Added deprecation notice for extendNodeEncodings | Added Travis tests for Node v4 and io.js latest (#105 by @Mithgol) | . | . 0.4.11 / 2015-07-03 . Added CESU-8 encoding. | . 0.4.10 / 2015-05-26 . Changed UTF-16 endianness heuristic to take into account any ASCII chars, not just spaces. This should minimize the importance of “default” endianness. | . 0.4.9 / 2015-05-24 . Streamlined BOM handling: strip BOM by default, add BOM when encoding if addBOM: true. Added docs to Readme. | UTF16 now uses UTF16-LE by default. | Fixed minor issue with big5 encoding. | Added io.js testing on Travis; updated node-iconv version to test against. Now we just skip testing SBCS encodings that node-iconv doesn’t support. | (internal refactoring) Updated codec interface to use classes. | Use strict mode in all files. | . 0.4.8 / 2015-04-14 . added alias UNICODE-1-1-UTF-7 for UTF-7 encoding (#94) | . 0.4.7 / 2015-02-05 . stop official support of Node.js v0.8. Should still work, but no guarantees. reason: Packages needed for testing are hard to get on Travis CI. | work in environment where Object.prototype is monkey patched with enumerable props (#89). | . 0.4.6 / 2015-01-12 . fix rare aliases of single-byte encodings (thanks @mscdex) | double the timeout for dbcs tests to make them less flaky on travis | . 0.4.5 / 2014-11-20 . fix windows-31j and x-sjis encoding support (@nleush) | minor fix: undefined variable reference when internal error happens | . 0.4.4 / 2014-07-16 . added encodings UTF-7 (RFC2152) and UTF-7-IMAP (RFC3501 Section 5.1.3) | fixed streaming base64 encoding | . 0.4.3 / 2014-06-14 . added encodings UTF-16BE and UTF-16 with BOM | . 0.4.2 / 2014-06-12 . don’t throw exception if extendNodeEncodings() is called more than once | . 0.4.1 / 2014-06-11 . codepage 808 added | . 0.4.0 / 2014-06-10 . code is rewritten from scratch | all widespread encodings are supported | streaming interface added | browserify compatibility added | (optional) extend core primitive encodings to make usage even simpler | moved from vows to mocha as the testing framework | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/iconv-lite/Changelog.html",
          "relUrl": "/node_backend_Trystan/node_modules/iconv-lite/Changelog.html",
          "date": ""
      }
      
  

  
      ,"page55": {
          "title": "0.3.0 / 2014-09-07",
          "content": "0.3.0 / 2014-09-07 . Support Node.js 0.6 | Throw error when parameter format invalid on parse | . 0.2.0 / 2014-06-18 . Add typer.format() to format media types | . 0.1.0 / 2014-06-17 . Accept req as argument to parse | Accept res as argument to parse | Parse media type with extra LWS between type and first parameter | . 0.0.0 / 2014-06-13 . Initial implementation | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/media-typer/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/media-typer/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page56": {
          "title": "1.0.1 / 2016-01-17",
          "content": "1.0.1 / 2016-01-17 . perf: enable strict mode | . 1.0.0 / 2015-03-01 . Add option to only add new descriptors | Add simple argument validation | Add jsdoc to source file | . 0.0.2 / 2013-12-14 . Move repository to component organization | . 0.0.1 / 2013-10-29 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/merge-descriptors/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/merge-descriptors/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page57": {
          "title": "1.1.2 / 2016-01-17",
          "content": "1.1.2 / 2016-01-17 . perf: enable strict mode | . 1.1.1 / 2014-12-30 . Improve browserify support | . 1.1.0 / 2014-07-05 . Add CONNECT method | . 1.0.1 / 2014-06-02 . Fix module to work with harmony transform | . 1.0.0 / 2014-05-08 . Add PURGE method | . 0.1.0 / 2013-10-28 . Add http.METHODS support | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/methods/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/methods/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page58": {
          "title": "1.52.0 / 2022-02-21",
          "content": "1.52.0 / 2022-02-21 . Add extensions from IANA for more image/* types | Add extension .asc to application/pgp-keys | Add extensions to various XML types | Add new upstream MIME types | . 1.51.0 / 2021-11-08 . Add new upstream MIME types | Mark image/vnd.microsoft.icon as compressible | Mark image/vnd.ms-dds as compressible | . 1.50.0 / 2021-09-15 . Add deprecated iWorks mime types and extensions | Add new upstream MIME types | . 1.49.0 / 2021-07-26 . Add extension .trig to application/trig | Add new upstream MIME types | . 1.48.0 / 2021-05-30 . Add extension .mvt to application/vnd.mapbox-vector-tile | Add new upstream MIME types | Mark text/yaml as compressible | . 1.47.0 / 2021-04-01 . Add new upstream MIME types | Remove ambigious extensions from IANA for application/*+xml types | Update primary extension to .es for application/ecmascript | . 1.46.0 / 2021-02-13 . Add extension .amr to audio/amr | Add extension .m4s to video/iso.segment | Add extension .opus to audio/ogg | Add new upstream MIME types | . 1.45.0 / 2020-09-22 . Add application/ubjson with extension .ubj | Add image/avif with extension .avif | Add image/ktx2 with extension .ktx2 | Add extension .dbf to application/vnd.dbf | Add extension .rar to application/vnd.rar | Add extension .td to application/urc-targetdesc+xml | Add new upstream MIME types | Fix extension of application/vnd.apple.keynote to be .key | . 1.44.0 / 2020-04-22 . Add charsets from IANA | Add extension .cjs to application/node | Add new upstream MIME types | . 1.43.0 / 2020-01-05 . Add application/x-keepass2 with extension .kdbx | Add extension .mxmf to audio/mobile-xmf | Add extensions from IANA for application/*+xml types | Add new upstream MIME types | . 1.42.0 / 2019-09-25 . Add image/vnd.ms-dds with extension .dds | Add new upstream MIME types | Remove compressible from multipart/mixed | . 1.41.0 / 2019-08-30 . Add new upstream MIME types | Add application/toml with extension .toml | Mark font/ttf as compressible | . 1.40.0 / 2019-04-20 . Add extensions from IANA for model/* types | Add text/mdx with extension .mdx | . 1.39.0 / 2019-04-04 . Add extensions .siv and .sieve to application/sieve | Add new upstream MIME types | . 1.38.0 / 2019-02-04 . Add extension .nq to application/n-quads | Add extension .nt to application/n-triples | Add new upstream MIME types | Mark text/less as compressible | . 1.37.0 / 2018-10-19 . Add extensions to HEIC image types | Add new upstream MIME types | . 1.36.0 / 2018-08-20 . Add Apple file extensions from IANA | Add extensions from IANA for image/* types | Add new upstream MIME types | . 1.35.0 / 2018-07-15 . Add extension .owl to application/rdf+xml | Add new upstream MIME types Removes extension .woff from application/font-woff | . | . 1.34.0 / 2018-06-03 . Add extension .csl to application/vnd.citationstyles.style+xml | Add extension .es to application/ecmascript | Add new upstream MIME types | Add UTF-8 as default charset for text/turtle | Mark all XML-derived types as compressible | . 1.33.0 / 2018-02-15 . Add extensions from IANA for message/* types | Add new upstream MIME types | Fix some incorrect OOXML types | Remove application/font-woff2 | . 1.32.0 / 2017-11-29 . Add new upstream MIME types | Update text/hjson to registered application/hjson | Add text/shex with extension .shex | . 1.31.0 / 2017-10-25 . Add application/raml+yaml with extension .raml | Add application/wasm with extension .wasm | Add new font type from IANA | Add new upstream font extensions | Add new upstream MIME types | Add extensions for JPEG-2000 images | . 1.30.0 / 2017-08-27 . Add application/vnd.ms-outlook | Add application/x-arj | Add extension .mjs to application/javascript | Add glTF types and extensions | Add new upstream MIME types | Add text/x-org | Add VirtualBox MIME types | Fix source records for video/* types that are IANA | Update font/opentype to registered font/otf | . 1.29.0 / 2017-07-10 . Add application/fido.trusted-apps+json | Add extension .wadl to application/vnd.sun.wadl+xml | Add new upstream MIME types | Add UTF-8 as default charset for text/css | . 1.28.0 / 2017-05-14 . Add new upstream MIME types | Add extension .gz to application/gzip | Update extensions .md and .markdown to be text/markdown | . 1.27.0 / 2017-03-16 . Add new upstream MIME types | Add image/apng with extension .apng | . 1.26.0 / 2017-01-14 . Add new upstream MIME types | Add extension .geojson to application/geo+json | . 1.25.0 / 2016-11-11 . Add new upstream MIME types | . 1.24.0 / 2016-09-18 . Add audio/mp3 | Add new upstream MIME types | . 1.23.0 / 2016-05-01 . Add new upstream MIME types | Add extension .3gpp to audio/3gpp | . 1.22.0 / 2016-02-15 . Add text/slim | Add extension .rng to application/xml | Add new upstream MIME types | Fix extension of application/dash+xml to be .mpd | Update primary extension to .m4a for audio/mp4 | . 1.21.0 / 2016-01-06 . Add Google document types | Add new upstream MIME types | . 1.20.0 / 2015-11-10 . Add text/x-suse-ymp | Add new upstream MIME types | . 1.19.0 / 2015-09-17 . Add application/vnd.apple.pkpass | Add new upstream MIME types | . 1.18.0 / 2015-09-03 . Add new upstream MIME types | . 1.17.0 / 2015-08-13 . Add application/x-msdos-program | Add audio/g711-0 | Add image/vnd.mozilla.apng | Add extension .exe to application/x-msdos-program | . 1.16.0 / 2015-07-29 . Add application/vnd.uri-map | . 1.15.0 / 2015-07-13 . Add application/x-httpd-php | . 1.14.0 / 2015-06-25 . Add application/scim+json | Add application/vnd.3gpp.ussd+xml | Add application/vnd.biopax.rdf+xml | Add text/x-processing | . 1.13.0 / 2015-06-07 . Add nginx as a source | Add application/x-cocoa | Add application/x-java-archive-diff | Add application/x-makeself | Add application/x-perl | Add application/x-pilot | Add application/x-redhat-package-manager | Add application/x-sea | Add audio/x-m4a | Add audio/x-realaudio | Add image/x-jng | Add text/mathml | . 1.12.0 / 2015-06-05 . Add application/bdoc | Add application/vnd.hyperdrive+json | Add application/x-bdoc | Add extension .rtf to text/rtf | . 1.11.0 / 2015-05-31 . Add audio/wav | Add audio/wave | Add extension .litcoffee to text/coffeescript | Add extension .sfd-hdstx to application/vnd.hydrostatix.sof-data | Add extension .n-gage to application/vnd.nokia.n-gage.symbian.install | . 1.10.0 / 2015-05-19 . Add application/vnd.balsamiq.bmpr | Add application/vnd.microsoft.portable-executable | Add application/x-ns-proxy-autoconfig | . 1.9.1 / 2015-04-19 . Remove .json extension from application/manifest+json This is causing bugs downstream | . | . 1.9.0 / 2015-04-19 . Add application/manifest+json | Add application/vnd.micro+json | Add image/vnd.zbrush.pcx | Add image/x-ms-bmp | . 1.8.0 / 2015-03-13 . Add application/vnd.citationstyles.style+xml | Add application/vnd.fastcopy-disk-image | Add application/vnd.gov.sk.xmldatacontainer+xml | Add extension .jsonld to application/ld+json | . 1.7.0 / 2015-02-08 . Add application/vnd.gerber | Add application/vnd.msa-disk-image | . 1.6.1 / 2015-02-05 . Community extensions ownership transferred from node-mime | . 1.6.0 / 2015-01-29 . Add application/jose | Add application/jose+json | Add application/json-seq | Add application/jwk+json | Add application/jwk-set+json | Add application/jwt | Add application/rdap+json | Add application/vnd.gov.sk.e-form+xml | Add application/vnd.ims.imsccv1p3 | . 1.5.0 / 2014-12-30 . Add application/vnd.oracle.resource+json | Fix various invalid MIME type entries application/mbox+xml | application/oscp-response | application/vwg-multiplexed | audio/g721 | . | . 1.4.0 / 2014-12-21 . Add application/vnd.ims.imsccv1p2 | Fix various invalid MIME type entries application/vnd-acucobol | application/vnd-curl | application/vnd-dart | application/vnd-dxr | application/vnd-fdf | application/vnd-mif | application/vnd-sema | application/vnd-wap-wmlc | application/vnd.adobe.flash-movie | application/vnd.dece-zip | application/vnd.dvb_service | application/vnd.micrografx-igx | application/vnd.sealed-doc | application/vnd.sealed-eml | application/vnd.sealed-mht | application/vnd.sealed-ppt | application/vnd.sealed-tiff | application/vnd.sealed-xls | application/vnd.sealedmedia.softseal-html | application/vnd.sealedmedia.softseal-pdf | application/vnd.wap-slc | application/vnd.wap-wbxml | audio/vnd.sealedmedia.softseal-mpeg | image/vnd-djvu | image/vnd-svf | image/vnd-wap-wbmp | image/vnd.sealed-png | image/vnd.sealedmedia.softseal-gif | image/vnd.sealedmedia.softseal-jpg | model/vnd-dwf | model/vnd.parasolid.transmit-binary | model/vnd.parasolid.transmit-text | text/vnd-a | text/vnd-curl | text/vnd.wap-wml | . | Remove example template MIME types application/example | audio/example | image/example | message/example | model/example | multipart/example | text/example | video/example | . | . 1.3.1 / 2014-12-16 . Fix missing extensions application/json5 | text/hjson | . | . 1.3.0 / 2014-12-07 . Add application/a2l | Add application/aml | Add application/atfx | Add application/atxml | Add application/cdfx+xml | Add application/dii | Add application/json5 | Add application/lxf | Add application/mf4 | Add application/vnd.apache.thrift.compact | Add application/vnd.apache.thrift.json | Add application/vnd.coffeescript | Add application/vnd.enphase.envoy | Add application/vnd.ims.imsccv1p1 | Add text/csv-schema | Add text/hjson | Add text/markdown | Add text/yaml | . 1.2.0 / 2014-11-09 . Add application/cea | Add application/dit | Add application/vnd.gov.sk.e-form+zip | Add application/vnd.tmd.mediaflex.api+xml | Type application/epub+zip is now IANA-registered | . 1.1.2 / 2014-10-23 . Rebuild database for application/x-www-form-urlencoded change | . 1.1.1 / 2014-10-20 . Mark application/x-www-form-urlencoded as compressible. | . 1.1.0 / 2014-09-28 . Add application/font-woff2 | . 1.0.3 / 2014-09-25 . Fix engine requirement in package | . 1.0.2 / 2014-09-25 . Add application/coap-group+json | Add application/dcd | Add application/vnd.apache.thrift.binary | Add image/vnd.tencent.tap | Mark all JSON-derived types as compressible | Update text/vtt data | . 1.0.1 / 2014-08-30 . Fix extension ordering | . 1.0.0 / 2014-08-30 . Add application/atf | Add application/merge-patch+json | Add multipart/x-mixed-replace | Add source: &#39;apache&#39; metadata | Add source: &#39;iana&#39; metadata | Remove badly-assumed charset data | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/mime-db/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/mime-db/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page59": {
          "title": "2.1.35 / 2022-03-12",
          "content": "2.1.35 / 2022-03-12 . deps: mime-db@1.52.0 Add extensions from IANA for more image/* types | Add extension .asc to application/pgp-keys | Add extensions to various XML types | Add new upstream MIME types | . | . 2.1.34 / 2021-11-08 . deps: mime-db@1.51.0 Add new upstream MIME types | . | . 2.1.33 / 2021-10-01 . deps: mime-db@1.50.0 Add deprecated iWorks mime types and extensions | Add new upstream MIME types | . | . 2.1.32 / 2021-07-27 . deps: mime-db@1.49.0 Add extension .trig to application/trig | Add new upstream MIME types | . | . 2.1.31 / 2021-06-01 . deps: mime-db@1.48.0 Add extension .mvt to application/vnd.mapbox-vector-tile | Add new upstream MIME types | . | . 2.1.30 / 2021-04-02 . deps: mime-db@1.47.0 Add extension .amr to audio/amr | Remove ambigious extensions from IANA for application/*+xml types | Update primary extension to .es for application/ecmascript | . | . 2.1.29 / 2021-02-17 . deps: mime-db@1.46.0 Add extension .amr to audio/amr | Add extension .m4s to video/iso.segment | Add extension .opus to audio/ogg | Add new upstream MIME types | . | . 2.1.28 / 2021-01-01 . deps: mime-db@1.45.0 Add application/ubjson with extension .ubj | Add image/avif with extension .avif | Add image/ktx2 with extension .ktx2 | Add extension .dbf to application/vnd.dbf | Add extension .rar to application/vnd.rar | Add extension .td to application/urc-targetdesc+xml | Add new upstream MIME types | Fix extension of application/vnd.apple.keynote to be .key | . | . 2.1.27 / 2020-04-23 . deps: mime-db@1.44.0 Add charsets from IANA | Add extension .cjs to application/node | Add new upstream MIME types | . | . 2.1.26 / 2020-01-05 . deps: mime-db@1.43.0 Add application/x-keepass2 with extension .kdbx | Add extension .mxmf to audio/mobile-xmf | Add extensions from IANA for application/*+xml types | Add new upstream MIME types | . | . 2.1.25 / 2019-11-12 . deps: mime-db@1.42.0 Add new upstream MIME types | Add application/toml with extension .toml | Add image/vnd.ms-dds with extension .dds | . | . 2.1.24 / 2019-04-20 . deps: mime-db@1.40.0 Add extensions from IANA for model/* types | Add text/mdx with extension .mdx | . | . 2.1.23 / 2019-04-17 . deps: mime-db@~1.39.0 Add extensions .siv and .sieve to application/sieve | Add new upstream MIME types | . | . 2.1.22 / 2019-02-14 . deps: mime-db@~1.38.0 Add extension .nq to application/n-quads | Add extension .nt to application/n-triples | Add new upstream MIME types | . | . 2.1.21 / 2018-10-19 . deps: mime-db@~1.37.0 Add extensions to HEIC image types | Add new upstream MIME types | . | . 2.1.20 / 2018-08-26 . deps: mime-db@~1.36.0 Add Apple file extensions from IANA | Add extensions from IANA for image/* types | Add new upstream MIME types | . | . 2.1.19 / 2018-07-17 . deps: mime-db@~1.35.0 Add extension .csl to application/vnd.citationstyles.style+xml | Add extension .es to application/ecmascript | Add extension .owl to application/rdf+xml | Add new upstream MIME types | Add UTF-8 as default charset for text/turtle | . | . 2.1.18 / 2018-02-16 . deps: mime-db@~1.33.0 Add application/raml+yaml with extension .raml | Add application/wasm with extension .wasm | Add text/shex with extension .shex | Add extensions for JPEG-2000 images | Add extensions from IANA for message/* types | Add new upstream MIME types | Update font MIME types | Update text/hjson to registered application/hjson | . | . 2.1.17 / 2017-09-01 . deps: mime-db@~1.30.0 Add application/vnd.ms-outlook | Add application/x-arj | Add extension .mjs to application/javascript | Add glTF types and extensions | Add new upstream MIME types | Add text/x-org | Add VirtualBox MIME types | Fix source records for video/* types that are IANA | Update font/opentype to registered font/otf | . | . 2.1.16 / 2017-07-24 . deps: mime-db@~1.29.0 Add application/fido.trusted-apps+json | Add extension .wadl to application/vnd.sun.wadl+xml | Add extension .gz to application/gzip | Add new upstream MIME types | Update extensions .md and .markdown to be text/markdown | . | . 2.1.15 / 2017-03-23 . deps: mime-db@~1.27.0 Add new mime types | Add image/apng | . | . 2.1.14 / 2017-01-14 . deps: mime-db@~1.26.0 Add new mime types | . | . 2.1.13 / 2016-11-18 . deps: mime-db@~1.25.0 Add new mime types | . | . 2.1.12 / 2016-09-18 . deps: mime-db@~1.24.0 Add new mime types | Add audio/mp3 | . | . 2.1.11 / 2016-05-01 . deps: mime-db@~1.23.0 Add new mime types | . | . 2.1.10 / 2016-02-15 . deps: mime-db@~1.22.0 Add new mime types | Fix extension of application/dash+xml | Update primary extension for audio/mp4 | . | . 2.1.9 / 2016-01-06 . deps: mime-db@~1.21.0 Add new mime types | . | . 2.1.8 / 2015-11-30 . deps: mime-db@~1.20.0 Add new mime types | . | . 2.1.7 / 2015-09-20 . deps: mime-db@~1.19.0 Add new mime types | . | . 2.1.6 / 2015-09-03 . deps: mime-db@~1.18.0 Add new mime types | . | . 2.1.5 / 2015-08-20 . deps: mime-db@~1.17.0 Add new mime types | . | . 2.1.4 / 2015-07-30 . deps: mime-db@~1.16.0 Add new mime types | . | . 2.1.3 / 2015-07-13 . deps: mime-db@~1.15.0 Add new mime types | . | . 2.1.2 / 2015-06-25 . deps: mime-db@~1.14.0 Add new mime types | . | . 2.1.1 / 2015-06-08 . perf: fix deopt during mapping | . 2.1.0 / 2015-06-07 . Fix incorrectly treating extension-less file name as extension i.e. &#39;path/to/json&#39; will no longer return application/json | . | Fix .charset(type) to accept parameters | Fix .charset(type) to match case-insensitive | Improve generation of extension to MIME mapping | Refactor internals for readability and no argument reassignment | Prefer application/* MIME types from the same source | Prefer any type over application/octet-stream | deps: mime-db@~1.13.0 Add nginx as a source | Add new mime types | . | . 2.0.14 / 2015-06-06 . deps: mime-db@~1.12.0 Add new mime types | . | . 2.0.13 / 2015-05-31 . deps: mime-db@~1.11.0 Add new mime types | . | . 2.0.12 / 2015-05-19 . deps: mime-db@~1.10.0 Add new mime types | . | . 2.0.11 / 2015-05-05 . deps: mime-db@~1.9.1 Add new mime types | . | . 2.0.10 / 2015-03-13 . deps: mime-db@~1.8.0 Add new mime types | . | . 2.0.9 / 2015-02-09 . deps: mime-db@~1.7.0 Add new mime types | Community extensions ownership transferred from node-mime | . | . 2.0.8 / 2015-01-29 . deps: mime-db@~1.6.0 Add new mime types | . | . 2.0.7 / 2014-12-30 . deps: mime-db@~1.5.0 Add new mime types | Fix various invalid MIME type entries | . | . 2.0.6 / 2014-12-30 . deps: mime-db@~1.4.0 Add new mime types | Fix various invalid MIME type entries | Remove example template MIME types | . | . 2.0.5 / 2014-12-29 . deps: mime-db@~1.3.1 Fix missing extensions | . | . 2.0.4 / 2014-12-10 . deps: mime-db@~1.3.0 Add new mime types | . | . 2.0.3 / 2014-11-09 . deps: mime-db@~1.2.0 Add new mime types | . | . 2.0.2 / 2014-09-28 . deps: mime-db@~1.1.0 Add new mime types | Update charsets | . | . 2.0.1 / 2014-09-07 . Support Node.js 0.6 | . 2.0.0 / 2014-09-02 . Use mime-db | Remove .define() | . 1.0.2 / 2014-08-04 . Set charset=utf-8 for text/javascript | . 1.0.1 / 2014-06-24 . Add text/jsx type | . 1.0.0 / 2014-05-12 . Return false for unknown types | Set charset=utf-8 for application/json | . 0.1.0 / 2014-05-02 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/mime-types/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/mime-types/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page60": {
          "title": "Changelog",
          "content": "Changelog . v1.6.0 (24/11/2017) . No changelog for this release. . . v2.0.4 (24/11/2017) . [closed] Switch to mime-score module for resolving extension contention issues. #182 | [closed] Update mime-db to 1.31.0 in v1.x branch #181 | . . v1.5.0 (22/11/2017) . [closed] need ES5 version ready in npm package #179 | [closed] mime-db no trace of iWork - pages / numbers / etc. #178 | [closed] How it works in brownser ? #176 | [closed] Missing ./Mime #175 | [closed] Vulnerable Regular Expression #167 | . . v2.0.3 (25/09/2017) . No changelog for this release. . . v1.4.1 (25/09/2017) . [closed] Issue when bundling with webpack #172 | . . v2.0.2 (15/09/2017) . [V2] fs.readFileSync is not a function #165 | [closed] The extension for video/quicktime should map to .mov, not .qt #164 | [V2] [v2 Feedback request] Mime class API #163 | [V2] [v2 Feedback request] Resolving conflicts over extensions #162 | [V2] Allow callers to load module with official, full, or no defined types. #161 | [V2] Use “facets” to resolve extension conflicts #160 | [V2] Remove fs and path dependencies #152 | [V2] Default content-type should not be application/octet-stream #139 | [V2] reset mime-types #124 | [V2] Extensionless paths should return null or false #113 | . . v2.0.1 (14/09/2017) . [closed] Changelog for v2.0 does not mention breaking changes #171 | [closed] MIME breaking with ‘class’ declaration as it is without ‘use strict mode’ #170 | . . v2.0.0 (12/09/2017) . [closed] woff and woff2 #168 | . . v1.4.0 (28/08/2017) . [closed] support for ac3 voc files #159 | [closed] Help understanding change from application/xml to text/xml #158 | [closed] no longer able to override mimetype #157 | [closed] application/vnd.adobe.photoshop #147 | [closed] Directories should appear as something other than application/octet-stream #135 | [closed] requested features #131 | [closed] Make types.json loading optional? #129 | [closed] Cannot find module ‘./types.json’ #120 | [V2] .wav files show up as “audio/x-wav” instead of “audio/x-wave” #118 | [closed] Don’t be a pain in the ass for node community #108 | [closed] don’t make default_type global #78 | [closed] mime.extension() fails if the content-type is parameterized #74 | . . v1.3.6 (11/05/2017) . [closed] .md should be text/markdown as of March 2016 #154 | [closed] Error while installing mime #153 | [closed] application/manifest+json #149 | [closed] Dynamic adaptive streaming over HTTP (DASH) file extension typo #141 | [closed] charsets image/png undefined #140 | [closed] Mime-db dependency out of date #130 | [closed] how to support plist？ #126 | [closed] how does .types file format look like? #123 | [closed] Feature: support for expanding MIME patterns #121 | [closed] DEBUG_MIME doesn’t work #117 | . . v1.3.4 (06/02/2015) . No changelog for this release. . . v1.3.3 (06/02/2015) . No changelog for this release. . . v1.3.1 (05/02/2015) . [closed] Consider adding support for Handlebars .hbs file ending #111 | [closed] Consider adding support for hjson. #110 | [closed] Add mime type for Opus audio files #94 | [closed] Consider making the Requesting New Types information more visible #77 | . . v1.3.0 (05/02/2015) . [closed] Add common name? #114 | [closed] application/x-yaml #104 | [closed] Add mime type for WOFF file format 2.0 #102 | [closed] application/x-msi for .msi #99 | [closed] Add mimetype for gettext translation files #98 | [closed] collaborators #88 | [closed] getting errot in installation of mime module…any1 can help? #87 | [closed] should application/json’s charset be utf8? #86 | [closed] Add “license” and “licenses” to package.json #81 | [closed] lookup with extension-less file on Windows returns wrong type #68 | . . v1.2.11 (15/08/2013) . [closed] Update mime.types #65 | [closed] Publish a new version #63 | [closed] README should state upfront that “application/octet-stream” is default for unknown extension #55 | [closed] Suggested improvement to the charset API #52 | . . v1.2.10 (25/07/2013) . [closed] Mime type for woff files should be application/font-woff and not application/x-font-woff #62 | [closed] node.types in conflict with mime.types #51 | . . v1.2.9 (17/01/2013) . [closed] Please update “mime” NPM #49 | [closed] Please add semicolon #46 | [closed] parse full mime types #43 | . . v1.2.8 (10/01/2013) . [closed] /js directory mime is application/javascript. Is it correct? #47 | [closed] Add mime types for lua code. #45 | . . v1.2.7 (19/10/2012) . [closed] cannot install 1.2.7 via npm #41 | [closed] Transfer ownership to @broofa #36 | [closed] it’s wrong to set charset to UTF-8 for text #30 | [closed] Allow multiple instances of MIME types container #27 | . . v1.2.5 (16/02/2012) . [closed] When looking up a types, check hasOwnProperty #23 | [closed] Bump version to 1.2.2 #18 | [closed] No license #16 | [closed] Some types missing that are used by html5/css3 #13 | [closed] npm install fails for 1.2.1 #12 | [closed] image/pjpeg + image/x-png #10 | [closed] symlink #8 | [closed] gzip #2 | [closed] ALL CAPS filenames return incorrect mime type #1 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/mime/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/mime/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page61": {
          "title": "0.6.3 / 2022-01-22",
          "content": "0.6.3 / 2022-01-22 . Revert “Lazy-load modules from main entry point” | . 0.6.2 / 2019-04-29 . Fix sorting charset, encoding, and language with extra parameters | . 0.6.1 / 2016-05-02 . perf: improve Accept parsing speed | perf: improve Accept-Charset parsing speed | perf: improve Accept-Encoding parsing speed | perf: improve Accept-Language parsing speed | . 0.6.0 / 2015-09-29 . Fix including type extensions in parameters in Accept parsing | Fix parsing Accept parameters with quoted equals | Fix parsing Accept parameters with quoted semicolons | Lazy-load modules from main entry point | perf: delay type concatenation until needed | perf: enable strict mode | perf: hoist regular expressions | perf: remove closures getting spec properties | perf: remove a closure from media type parsing | perf: remove property delete from media type parsing | . 0.5.3 / 2015-05-10 . Fix media type parameter matching to be case-insensitive | . 0.5.2 / 2015-05-06 . Fix comparing media types with quoted values | Fix splitting media types with quoted commas | . 0.5.1 / 2015-02-14 . Fix preference sorting to be stable for long acceptable lists | . 0.5.0 / 2014-12-18 . Fix list return order when large accepted list | Fix missing identity encoding when q=0 exists | Remove dynamic building of Negotiator class | . 0.4.9 / 2014-10-14 . Fix error when media type has invalid parameter | . 0.4.8 / 2014-09-28 . Fix all negotiations to be case-insensitive | Stable sort preferences of same quality according to client order | Support Node.js 0.6 | . 0.4.7 / 2014-06-24 . Handle invalid provided languages | Handle invalid provided media types | . 0.4.6 / 2014-06-11 . Order by specificity when quality is the same | . 0.4.5 / 2014-05-29 . Fix regression in empty header handling | . 0.4.4 / 2014-05-29 . Fix behaviors when headers are not present | . 0.4.3 / 2014-04-16 . Handle slashes on media params correctly | . 0.4.2 / 2014-02-28 . Fix media type sorting | Handle media types params strictly | . 0.4.1 / 2014-01-16 . Use most specific matches | . 0.4.0 / 2014-01-09 . Remove preferred prefix from methods | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/negotiator/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/negotiator/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page62": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v1.13.1 - 2023-10-19 . Commits . [Fix] in IE 8, global can !== window despite them being prototypes of each other 30d0859 | . v1.13.0 - 2023-10-14 . Commits . [New] add special handling for the global object 431bab2 | [Dev Deps] update @ljharb/eslint-config, aud, tape fd4f619 | [Dev Deps] update mock-property, tape b453f6c | [Dev Deps] update error-cause e8ffc57 | [Dev Deps] update tape 054b8b9 | [Dev Deps] temporarily remove aud due to breaking change in transitive deps 2476845 | [Dev Deps] pin glob, since v10.3.8+ requires a broken jackspeak 383fa5e | [Dev Deps] pin jackspeak since 2.1.2+ depends on npm aliases, which kill the install process in npm &lt; 6 68c244c | . v1.12.3 - 2023-01-12 . Commits . [Fix] in eg FF 24, collections lack forEach 75fc226 | [actions] update rebase action to use reusable workflow 250a277 | [Dev Deps] update aud, es-value-fixtures, tape 66a19b3 | [Dev Deps] update @ljharb/eslint-config, aud, error-cause c43d332 | [Tests] add @pkgjs/support to postlint e2618d2 | . v1.12.2 - 2022-05-26 . Commits . [Fix] use util.inspect for a custom inspection symbol method e243bf2 | [meta] add support info ca20ba3 | [Fix] ignore cause in node v16.9 and v16.10 where it has a bug 86aa553 | . v1.12.1 - 2022-05-21 . Commits . [Tests] use mock-property 4ec8893 | [meta] use npmignore to autogenerate an npmignore file 07f868c | [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, tape b05244b | [Dev Deps] update @ljharb/eslint-config, error-cause, es-value-fixtures, functions-have-names, tape d037398 | [Fix] properly handle callable regexes in older engines 848fe48 | . v1.12.0 - 2021-12-18 . Commits . [New] add numericSeparator boolean option 2d2d537 | [Robustness] cache more prototype methods 191533d | [New] ensure an Error’s cause is displayed 53bc2ce | [Dev Deps] update eslint, @ljharb/eslint-config bc164b6 | [Robustness] cache RegExp.prototype.test a314ab8 | [meta] fix auto-changelog settings 5ed0983 | . v1.11.1 - 2021-12-05 . Commits . [meta] add auto-changelog 7dbdd22 | [actions] reuse common workflows c8823bc | [Dev Deps] update eslint, @ljharb/eslint-config, safe-publish-latest, tape 7532b12 | [Refactor] use has-tostringtag to behave correctly in the presence of symbol shams 94abb5d | [actions] update codecov uploader 5ed5102 | [Dev Deps] update eslint, tape 37b2ad2 | [meta] add sideEffects flag d341f90 | . v1.11.0 - 2021-07-12 . Commits . [New] customInspect: add symbol option, to mimic modern util.inspect behavior e973a6e | [Dev Deps] update eslint 05f1cb3 | . v1.10.3 - 2021-05-07 . Commits . [Fix] handle core-js Symbol shams 4acfc2c | [readme] update badges 95c323a | [Dev Deps] update eslint, @ljharb/eslint-config, aud cb38f48 | . v1.10.2 - 2021-04-17 . Commits . [Fix] use a robust check for a boxed Symbol 87f12d6 | . v1.10.1 - 2021-04-17 . Commits . [Fix] use a robust check for a boxed bigint d5ca829 | . v1.10.0 - 2021-04-17 . Commits . [Tests] increase coverage d8abb8a | [actions] use node/install instead of node/run; use codecov action 4bfec2e | [New] respect Symbol.toStringTag on objects 799b58f | [Fix] do not allow Symbol.toStringTag to masquerade as builtins d6c5b37 | [New] add WeakRef support b6d898e | [meta] do not publish github action workflow files 918cdfc | [meta] create FUNDING.yml 0bb5fc5 | [Dev Deps] update eslint, @ljharb/eslint-config, aud, tape 22c8dc0 | [meta] use prepublishOnly script for npm 7+ e52ee09 | [Dev Deps] update eslint 7c4e6fd | . v1.9.0 - 2020-11-30 . Commits . [Tests] migrate tests to Github Actions d262251 | [New] add enumerable own Symbols to plain object output ee60c03 | [Tests] add passing tests 01ac3e4 | [actions] add “Require Allow Edits” action c2d7746 | [Dev Deps] update eslint, @ljharb/eslint-config, aud, core-js 70058de | [Fix] hex characters in strings should be uppercased, to match node assert 6ab8faa | [Tests] run nyc on all tests 4c47372 | [Tests] node 0.8 has an unpredictable property order; fix groups test by removing property f192069 | [New] add enumerable properties to Function inspect result, per node’s assert fd38e1b | [Tests] fix tests for node &lt; 10, due to regex match groups 2ac6462 | [Dev Deps] update eslint, @ljharb/eslint-config 44b59e2 | [Robustness] cache Symbol.prototype.toString f3c2074 | [Dev Deps] update eslint 9411294 | [meta] require-allow-edits no longer requires an explicit github token 36c0220 | [actions] update rebase checkout action to v2 55a39a6 | [actions] switch Automatic Rebase workflow to pull_request_target event f59fd3c | [Dev Deps] update eslint a492bec | . v1.8.0 - 2020-06-18 . Fixed . [New] add indent option #27 | . Commits . [Tests] add codecov 4324cbb | [New] add maxStringLength option b3995cb | [New] add customInspect option, to disable custom inspect methods 28b9179 | [Tests] add Date and RegExp tests 3b28eca | [actions] add automatic rebasing / merge commit blocking 0d9c6c0 | [Dev Deps] update eslint, @ljharb/eslint-config, core-js, tape; add aud 7c204f2 | [readme] fix repo URLs, remove testling 34ca9a0 | [Fix] when truncating a deep array, note it as [Array] instead of just [Object] f74c82d | [Dev Deps] update eslint, @ljharb/eslint-config, tape 1a8a5ea | [Fix] do not be fooled by a function’s own toString method 7cb5c65 | [patch] indicate explicitly that anon functions are anonymous, to match node 81ebdd4 | [Dev Deps] loosen the core-js dep e7472e8 | [Dev Deps] update tape 699827e | [meta] add safe-publish-latest c5d2868 | [Dev Deps] update @ljharb/eslint-config 9199501 | . v1.7.0 - 2019-11-10 . Commits . [Tests] use shared travis-ci configs 19899ed | [Tests] add linting a00f057 | [Tests] lint last file 2698047 | [Tests] up to node v12.7, v11.15, v10.16, v8.16, v6.17 589e87a | [New] add support for WeakMap and WeakSet 3ddb3e4 | [meta] clean up license so github can detect it properly 27527bb | [Tests] cover util.inspect.custom 36d47b9 | [Dev Deps] update eslint, @ljharb/eslint-config, core-js, tape b614eaa | [Tests] fix coverage thresholds 7b7b176 | [Tests] bigint tests now can run on unflagged node 063af31 | [Refactor] add early bailout to isMap and isSet checks fc51047 | [meta] add funding field 7f9953a | [Tests] Fix invalid strict-mode syntax with hexadecimal a8b5425 | [Dev Deps] update @ljharb/eslint-config 98df157 | add copyright to LICENSE bb69fd0 | [Tests] use npx aud in posttest 4838353 | [Tests] move 0.6 to allowed failures, because it won‘t build on travis 1bff32a | . v1.6.0 - 2018-05-02 . Commits . [New] add support for boxed BigInt primitives 356c66a | [Tests] up to node v10.0, v9.11, v8.11, v6.14, v4.9 c77b65b | [New] Add support for upcoming BigInt 1ac548e | [Tests] run bigint tests in CI with –harmony-bigint flag d31b738 | [Dev Deps] update core-js, tape ff9eff6 | [Docs] fix example to use safer-buffer 48cae12 | . v1.5.0 - 2017-12-25 . Commits . [New] add quoteStyle option f5a72d2 | [Tests] add more test coverage 30ebe4e | [Tests] require 0.6 to pass 99a008c | . v1.4.1 - 2017-12-19 . Commits . [Tests] up to node v9.3, v8.9, v6.12 6674476 | [Fix] inspect(Object(-0)) should be “Object(-0)”, not “Object(0)” d0a031f | . v1.4.0 - 2017-10-24 . Commits . [Tests] add npm run coverage 3b48fb2 | [Tests] remove commented-out osx builds 71e24db | [New] add support for util.inspect.custom, in node only. 20cca77 | [Tests] up to node v8.6; use nvm install-latest-npm to ensure new npm doesn’t break old node 252952d | [Tests] up to node v8.8 4aa868d | [Dev Deps] update core-js, tape 59483d1 | . v1.3.0 - 2017-07-31 . Fixed . [Fix] Map/Set: work around core-js bug &lt; v2.5.0 #9 | . Commits . [New] add support for arrays with additional object keys 0d19937 | [Tests] up to node v8.2, v7.10, v6.11; fix new npm breaking on older nodes e24784a | Only apps should have lockfiles c6faebc | [Dev Deps] update tape 7345a0a | . v1.2.2 - 2017-03-24 . Commits . [Tests] up to node v7.7, v6.10, v4.8; improve test matrix a2ddc15 | [Tests] up to node v7.0, v6.9, v5.12, v4.6, io.js v3.3; improve test matrix a48949f | [Performance] check for primitive types as early as possible. 3b8092a | [Refactor] remove unneeded elses. 7255034 | [Refactor] avoid recreating lowbyte function every time. 81edd34 | [Fix] differentiate -0 from 0 521d345 | [Refactor] move object key gathering into separate function aca6265 | [Refactor] consolidate wrapping logic for boxed primitives into a function. 4e440cd | [Robustness] use typeof instead of comparing to literal undefined 5ca6f60 | [Refactor] consolidate Map/Set notations. 4e576e5 | [Tests] ensure that this function remains anonymous, despite ES6 name inference. 7540ae5 | [Refactor] explicitly coerce Error objects to strings. 7f4ca84 | [Refactor] split up var declarations for debuggability 6f2c11e | [Robustness] cache Object.prototype.toString df44a20 | [Dev Deps] update tape 3ec714e | [Dev Deps] update tape beb72d9 | . v1.2.1 - 2016-04-09 . Fixed . [Fix] fix Boolean false object inspection. #7 | . v1.2.0 - 2016-04-09 . Fixed . [New] add support for inspecting String/Number/Boolean objects. #6 | . Commits . [Dev Deps] update tape 742caa2 | . v1.1.0 - 2015-12-14 . Merged . [New] add ES6 Map/Set support. #4 | . Fixed . [New] add ES6 Map/Set support. #3 | . Commits . Update travis.yml to test on bunches of iojs and node versions. 4c1fd65 | [Dev Deps] update tape 88a907e | . 1.0.2 - 2015-08-07 . Commits . [Fix] Cache Object.prototype.hasOwnProperty in case it’s deleted later. 1d0075d | [Dev Deps] Update tape ca8d5d7 | gitignore node_modules since this is a reusable modules. ed41407 | . 1.0.1 - 2015-07-19 . Commits . Make inspect work with symbol primitives and objects, including in node 0.11 and 0.12. ddf1b94 | bump tape 103d674 | use newer travis config d497276 | . 1.0.0 - 2014-08-05 . Commits . error inspect works properly 260a22d | seen coverage 57269e8 | htmlelement instance coverage 397ffe1 | more element coverage 6905cc2 | failing test for type errors 385b615 | fn name coverage edc906d | server-side element test 362d1d3 | custom inspect fn e89b0f6 | fixed browser test b530882 | depth test, matches node 1cfd9e0 | exercise hasOwnProperty path 8d753fb | more cases covered for errors c5c46a5 | W obj key test case b0eceee | coverage for explicit depth param e12b91c | . 0.4.0 - 2014-03-21 . Commits . passing lowbyte interpolation test b847511 | lowbyte test 4a2b0e1 | . 0.3.1 - 2014-03-04 . Commits . sort keys a07b19c | . 0.3.0 - 2014-03-04 . Commits . [] and {} instead of [ ] and { } 654c44b | . 0.2.0 - 2014-03-04 . Commits . failing holes test 99cdfad | regex already work e324033 | failing undef/null test 1f88a00 | holes in the all example 7d345f3 | check for .inspect(), fixes Buffer use-case c3f7546 | fixes for holes ce25f73 | weird null behavior 405c1ea | tape is actually a devDependency, upgrade 703b0ce | put date in the example a342219 | passing the null test 4ab737e | . 0.1.3 - 2013-07-26 . Commits . special isElement() check 882768a | oh right old IEs don’t have indexOf either 36d1275 | . 0.1.1 - 2013-07-26 . Commits . tests! 4422fd9 | fix for ie&lt;9, doesn’t have hasOwnProperty 6b7d611 | fix for all IEs: no f.name 4e0c2f6 | badges 5ed0d88 | . 0.1.0 - 2013-07-26 . Commits . [Function] for functions ad5c485 | . 0.0.0 - 2013-07-26 . Commits . working browser example 34be6b6 | package.json etc cad51f2 | docs complete b80cce2 | circular example 4b4a7b9 | string rep 7afb479 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/object-inspect/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/object-inspect/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page63": {
          "title": "2.4.1 / 2022-02-22",
          "content": "2.4.1 / 2022-02-22 . Fix error on early async hooks implementations | . 2.4.0 / 2022-02-21 . Prevent loss of async hooks context | . 2.3.0 / 2015-05-26 . Add defined behavior for HTTP CONNECT requests | Add defined behavior for HTTP Upgrade requests | deps: ee-first@1.1.1 | . 2.2.1 / 2015-04-22 . Fix isFinished(req) when data buffered | . 2.2.0 / 2014-12-22 . Add message object to callback arguments | . 2.1.1 / 2014-10-22 . Fix handling of pipelined requests | . 2.1.0 / 2014-08-16 . Check if socket is detached | Return undefined for isFinished if state unknown | . 2.0.0 / 2014-08-16 . Add isFinished function | Move to jshttp organization | Remove support for plain socket argument | Rename to on-finished | Support both req and res as arguments | deps: ee-first@1.0.5 | . 1.2.2 / 2014-06-10 . Reduce listeners added to emitters avoids “event emitter leak” warnings when used multiple times on same request | . | . 1.2.1 / 2014-06-08 . Fix returned value when already finished | . 1.2.0 / 2014-06-05 . Call callback when called on already-finished socket | . 1.1.4 / 2014-05-27 . Support node.js 0.8 | . 1.1.3 / 2014-04-30 . Make sure errors passed as instanceof Error | . 1.1.2 / 2014-04-18 . Default the socket to passed-in object | . 1.1.1 / 2014-01-16 . Rename module to finished | . 1.1.0 / 2013-12-25 . Call callback when called on already-errored socket | . 1.0.1 / 2013-12-20 . Actually pass the error to the callback | . 1.0.0 / 2013-12-20 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/on-finished/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/on-finished/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page64": {
          "title": "1.3.3 / 2019-04-15",
          "content": "1.3.3 / 2019-04-15 . Fix Node.js 0.8 return value inconsistencies | . 1.3.2 / 2017-09-09 . perf: reduce overhead for full URLs | perf: unroll the “fast-path” RegExp | . 1.3.1 / 2016-01-17 . perf: enable strict mode | . 1.3.0 / 2014-08-09 . Add parseurl.original for parsing req.originalUrl with fallback | Return undefined if req.url is undefined | . 1.2.0 / 2014-07-21 . Cache URLs based on original value | Remove no-longer-needed URL mis-parse work-around | Simplify the “fast-path” RegExp | . 1.1.3 / 2014-07-08 . Fix typo | . 1.1.2 / 2014-07-08 . Seriously fix Node.js 0.8 compatibility | . 1.1.1 / 2014-07-08 . Fix Node.js 0.8 compatibility | . 1.1.0 / 2014-07-08 . Incorporate URL href-only parse fast-path | . 1.0.1 / 2014-03-08 . Add missing require | . 1.0.0 / 2014-03-08 . Genesis from connect | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/parseurl/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/parseurl/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page65": {
          "title": "0.1.7 / 2015-07-28",
          "content": "0.1.7 / 2015-07-28 . Fixed regression with escaped round brackets and matching groups. | . 0.1.6 / 2015-06-19 . Replace index feature by outputting all parameters, unnamed and named. | . 0.1.5 / 2015-05-08 . Add an index property for position in match result. | . 0.1.4 / 2015-03-05 . Add license information | . 0.1.3 / 2014-07-06 . Better array support | Improved support for trailing slash in non-ending mode | . 0.1.0 / 2014-03-06 . add options.end | . 0.0.2 / 2013-02-10 . Update to match current express | add .license property to component.json | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/path-to-regexp/History.html",
          "relUrl": "/node_backend_Trystan/node_modules/path-to-regexp/History.html",
          "date": ""
      }
      
  

  
      ,"page66": {
          "title": "2.0.7 / 2021-05-31",
          "content": "2.0.7 / 2021-05-31 . deps: forwarded@0.2.0 Use req.socket over deprecated req.connection | . | . 2.0.6 / 2020-02-24 . deps: ipaddr.js@1.9.1 | . 2.0.5 / 2019-04-16 . deps: ipaddr.js@1.9.0 | . 2.0.4 / 2018-07-26 . deps: ipaddr.js@1.8.0 | . 2.0.3 / 2018-02-19 . deps: ipaddr.js@1.6.0 | . 2.0.2 / 2017-09-24 . deps: forwarded@~0.1.2 perf: improve header parsing | perf: reduce overhead when no X-Forwarded-For header | . | . 2.0.1 / 2017-09-10 . deps: forwarded@~0.1.1 Fix trimming leading / trailing OWS | perf: hoist regular expression | . | deps: ipaddr.js@1.5.2 | . 2.0.0 / 2017-08-08 . Drop support for Node.js below 0.10 | . 1.1.5 / 2017-07-25 . Fix array argument being altered | deps: ipaddr.js@1.4.0 | . 1.1.4 / 2017-03-24 . deps: ipaddr.js@1.3.0 | . 1.1.3 / 2017-01-14 . deps: ipaddr.js@1.2.0 | . 1.1.2 / 2016-05-29 . deps: ipaddr.js@1.1.1 Fix IPv6-mapped IPv4 validation edge cases | . | . 1.1.1 / 2016-05-03 . Fix regression matching mixed versions against multiple subnets | . 1.1.0 / 2016-05-01 . Fix accepting various invalid netmasks IPv4 netmasks must be contingous | IPv6 addresses cannot be used as a netmask | . | deps: ipaddr.js@1.1.0 | . 1.0.10 / 2015-12-09 . deps: ipaddr.js@1.0.5 Fix regression in isValid with non-string arguments | . | . 1.0.9 / 2015-12-01 . deps: ipaddr.js@1.0.4 Fix accepting some invalid IPv6 addresses | Reject CIDRs with negative or overlong masks | . | perf: enable strict mode | . 1.0.8 / 2015-05-10 . deps: ipaddr.js@1.0.1 | . 1.0.7 / 2015-03-16 . deps: ipaddr.js@0.1.9 Fix OOM on certain inputs to isValid | . | . 1.0.6 / 2015-02-01 . deps: ipaddr.js@0.1.8 | . 1.0.5 / 2015-01-08 . deps: ipaddr.js@0.1.6 | . 1.0.4 / 2014-11-23 . deps: ipaddr.js@0.1.5 Fix edge cases with isValid | . | . 1.0.3 / 2014-09-21 . Use forwarded npm module | . 1.0.2 / 2014-09-18 . Fix a global leak when multiple subnets are trusted | Support Node.js 0.6 | deps: ipaddr.js@0.1.3 | . 1.0.1 / 2014-06-03 . Fix links in npm package | . 1.0.0 / 2014-05-08 . Add trust argument to determine proxy trust on Accepts custom function | Accepts IPv4/IPv6 address(es) | Accepts subnets | Accepts pre-defined names | . | Add optional trust argument to proxyaddr.all to stop at first untrusted | Add proxyaddr.compile to pre-compile trust function to make subsequent calls faster | . 0.0.1 / 2014-05-04 . Fix bad npm publish | . 0.0.0 / 2014-05-04 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/proxy-addr/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/proxy-addr/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page67": {
          "title": "**6.11.0",
          "content": "**6.11.0 . [New] [Fix] stringify: revert 0e903c0; add commaRoundTrip option (#442) | [readme] fix version badge | . 6.10.5 . [Fix] stringify: with arrayFormat: comma, properly include an explicit [] on a single-item array (#434) | . 6.10.4 . [Fix] stringify: with arrayFormat: comma, include an explicit [] on a single-item array (#441) | [meta] use npmignore to autogenerate an npmignore file | [Dev Deps] update eslint, @ljharb/eslint-config, aud, has-symbol, object-inspect, tape | . 6.10.3 . [Fix] parse: ignore __proto__ keys (#428) | [Robustness] stringify: avoid relying on a global undefined (#427) | [actions] reuse common workflows | [Dev Deps] update eslint, @ljharb/eslint-config, object-inspect, tape | . 6.10.2 . [Fix] stringify: actually fix cyclic references (#426) | [Fix] stringify: avoid encoding arrayformat comma when encodeValuesOnly = true (#424) | [readme] remove travis badge; add github actions/codecov badges; update URLs | [Docs] add note and links for coercing primitive values (#408) | [actions] update codecov uploader | [actions] update workflows | [Tests] clean up stringify tests slightly | [Dev Deps] update eslint, @ljharb/eslint-config, aud, object-inspect, safe-publish-latest, tape | . 6.10.1 . [Fix] stringify: avoid exception on repeated object values (#402) | . 6.10.0 . [New] stringify: throw on cycles, instead of an infinite loop (#395, #394, #393) | [New] parse: add allowSparse option for collapsing arrays with missing indices (#312) | [meta] fix README.md (#399) | [meta] only run npm run dist in publish, not install | [Dev Deps] update eslint, @ljharb/eslint-config, aud, has-symbols, tape | [Tests] fix tests on node v0.6 | [Tests] use ljharb/actions/node/install instead of ljharb/actions/node/run | [Tests] Revert “[meta] ignore eclint transitive audit warning” | . 6.9.7 . [Fix] parse: ignore __proto__ keys (#428) | [Fix] stringify: avoid encoding arrayformat comma when encodeValuesOnly = true (#424) | [Robustness] stringify: avoid relying on a global undefined (#427) | [readme] remove travis badge; add github actions/codecov badges; update URLs | [Docs] add note and links for coercing primitive values (#408) | [Tests] clean up stringify tests slightly | [meta] fix README.md (#399) | Revert “[meta] ignore eclint transitive audit warning” | [actions] backport actions from main | [Dev Deps] backport updates from main | . 6.9.6 . [Fix] restore dist dir; mistakenly removed in d4f6c32 | . 6.9.5 . [Fix] stringify: do not encode parens for RFC1738 | [Fix] stringify: fix arrayFormat comma with empty array/objects (#350) | Refactor format: remove util.assign call | [meta] add “Allow Edits” workflow; update rebase workflow | [actions] switch Automatic Rebase workflow to pull_request_target event | [Tests] stringify: add tests for #378 | [Tests] migrate tests to Github Actions | [Tests] run nyc on all tests; use tape runner | [Dev Deps] update eslint, @ljharb/eslint-config, browserify, mkdirp, object-inspect, tape; add aud | . 6.9.4 . [Fix] stringify: when arrayFormat is comma, respect serializeDate (#364) | Refactor stringify: reduce branching (part of #350) | Refactor move maybeMap to utils | [Dev Deps] update browserify, tape | . 6.9.3 . [Fix] proper comma parsing of URL-encoded commas (#361) | [Fix] parses comma delimited array while having percent-encoded comma treated as normal text (#336) | . 6.9.2 . [Fix] parse: Fix parsing array from object with comma true (#359) | [Fix] parse: throw a TypeError instead of an Error for bad charset (#349) | [meta] ignore eclint transitive audit warning | [meta] fix indentation in package.json | [meta] add tidelift marketing copy | [Dev Deps] update eslint, @ljharb/eslint-config, object-inspect, has-symbols, tape, mkdirp, iconv-lite | [actions] add automatic rebasing / merge commit blocking | . 6.9.1 . [Fix] parse: with comma true, handle field that holds an array of arrays (#335) | [Fix] parse: with comma true, do not split non-string values (#334) | [meta] add funding field | [Dev Deps] update eslint, @ljharb/eslint-config | [Tests] use shared travis-ci config | . 6.9.0 . [New] parse/stringify: Pass extra key/value argument to decoder (#333) | [Dev Deps] update eslint, @ljharb/eslint-config, evalmd | [Tests] parse: add passing arrayFormat tests | [Tests] add posttest using npx aud to run npm audit without a lockfile | [Tests] up to node v12.10, v11.15, v10.16, v8.16 | [Tests] Buffer.from in node v5.0-v5.9 and v4.0-v4.4 requires a TypedArray | . 6.8.3 . [Fix] parse: ignore __proto__ keys (#428) | [Robustness] stringify: avoid relying on a global undefined (#427) | [Fix] stringify: avoid encoding arrayformat comma when encodeValuesOnly = true (#424) | [readme] remove travis badge; add github actions/codecov badges; update URLs | [Tests] clean up stringify tests slightly | [Docs] add note and links for coercing primitive values (#408) | [meta] fix README.md (#399) | [actions] backport actions from main | [Dev Deps] backport updates from main | Refactor stringify: reduce branching | [meta] do not publish workflow files | . 6.8.2 . [Fix] proper comma parsing of URL-encoded commas (#361) | [Fix] parses comma delimited array while having percent-encoded comma treated as normal text (#336) | . 6.8.1 . [Fix] parse: Fix parsing array from object with comma true (#359) | [Fix] parse: throw a TypeError instead of an Error for bad charset (#349) | [Fix] parse: with comma true, handle field that holds an array of arrays (#335) | [fix] parse: with comma true, do not split non-string values (#334) | [meta] add tidelift marketing copy | [meta] add funding field | [Dev Deps] update eslint, @ljharb/eslint-config, tape, safe-publish-latest, evalmd, has-symbols, iconv-lite, mkdirp, object-inspect | [Tests] parse: add passing arrayFormat tests | [Tests] use shared travis-ci configs | [Tests] Buffer.from in node v5.0-v5.9 and v4.0-v4.4 requires a TypedArray | [actions] add automatic rebasing / merge commit blocking | . 6.8.0 . [New] add depth=false to preserve the original key; [Fix] depth=0 should preserve the original key (#326) | [New] [Fix] stringify symbols and bigints | [Fix] ensure node 0.12 can stringify Symbols | [Fix] fix for an impossible situation: when the formatter is called with a non-string value | Refactor formats: tiny bit of cleanup. | [Dev Deps] update eslint, @ljharb/eslint-config, browserify, safe-publish-latest, iconv-lite, tape | [Tests] add tests for depth=0 and depth=false behavior, both current and intuitive/intended (#326) | [Tests] use eclint instead of editorconfig-tools | [docs] readme: add security note | [meta] add github sponsorship | [meta] add FUNDING.yml | [meta] Clean up license text so it’s properly detected as BSD-3-Clause | . 6.7.3 . [Fix] parse: ignore __proto__ keys (#428) | [Fix] stringify: avoid encoding arrayformat comma when encodeValuesOnly = true (#424) | [Robustness] stringify: avoid relying on a global undefined (#427) | [readme] remove travis badge; add github actions/codecov badges; update URLs | [Docs] add note and links for coercing primitive values (#408) | [meta] fix README.md (#399) | [meta] do not publish workflow files | [actions] backport actions from main | [Dev Deps] backport updates from main | [Tests] use nyc for coverage | [Tests] clean up stringify tests slightly | . 6.7.2 . [Fix] proper comma parsing of URL-encoded commas (#361) | [Fix] parses comma delimited array while having percent-encoded comma treated as normal text (#336) | . 6.7.1 . [Fix] parse: Fix parsing array from object with comma true (#359) | [Fix] parse: with comma true, handle field that holds an array of arrays (#335) | [fix] parse: with comma true, do not split non-string values (#334) | [Fix] parse: throw a TypeError instead of an Error for bad charset (#349) | [Fix] fix for an impossible situation: when the formatter is called with a non-string value | Refactor formats: tiny bit of cleanup. | readme: add security note | [meta] add tidelift marketing copy | [meta] add funding field | [meta] add FUNDING.yml | [meta] Clean up license text so it’s properly detected as BSD-3-Clause | [Dev Deps] update eslint, @ljharb/eslint-config, tape, safe-publish-latest, evalmd, iconv-lite, mkdirp, object-inspect, browserify | [Tests] parse: add passing arrayFormat tests | [Tests] use shared travis-ci configs | [Tests] Buffer.from in node v5.0-v5.9 and v4.0-v4.4 requires a TypedArray | [Tests] add tests for depth=0 and depth=false behavior, both current and intuitive/intended | [Tests] use eclint instead of editorconfig-tools | [actions] add automatic rebasing / merge commit blocking | . 6.7.0 . [New] stringify/parse: add comma as an arrayFormat option (#276, #219) | [Fix] correctly parse nested arrays (#212) | [Fix] utils.merge: avoid a crash with a null target and a truthy non-array source, also with an array source | [Robustness] stringify: cache Object.prototype.hasOwnProperty | Refactor utils: isBuffer: small tweak; add tests | Refactor use cached Array.isArray | Refactor parse/stringify: make a function to normalize the options | Refactor utils: reduce observable [[Get]]s | Refactor stringify/utils: cache Array.isArray | [Tests] always use String(x) over x.toString() | [Tests] fix Buffer tests to work in node &lt; 4.5 and node &lt; 5.10 | [Tests] temporarily allow coverage to fail | . 6.6.1 . [Fix] parse: ignore __proto__ keys (#428) | [Fix] fix for an impossible situation: when the formatter is called with a non-string value | [Fix] utils.merge: avoid a crash with a null target and an array source | [Fix] utils.merge: avoid a crash with a null target and a truthy non-array source | [Fix] correctly parse nested arrays | [Robustness] stringify: avoid relying on a global undefined (#427) | [Robustness] stringify: cache Object.prototype.hasOwnProperty | Refactor formats: tiny bit of cleanup. | Refactor utils: isBuffer: small tweak; add tests | | Refactor utils: reduce observable [[Get]]s | Refactor use cached Array.isArray | Refactor parse/stringify: make a function to normalize the options | [readme] remove travis badge; add github actions/codecov badges; update URLs | [Docs] Clarify the need for “arrayLimit” option | [meta] fix README.md (#399) | [meta] do not publish workflow files | [meta] Clean up license text so it’s properly detected as BSD-3-Clause | [meta] add FUNDING.yml | [meta] Fixes typo in CHANGELOG.md | [actions] backport actions from main | [Tests] fix Buffer tests to work in node &lt; 4.5 and node &lt; 5.10 | [Tests] always use String(x) over x.toString() | [Dev Deps] backport from main | . 6.6.0 . [New] Add support for iso-8859-1, utf8 “sentinel” and numeric entities (#268) | [New] move two-value combine to a utils function (#189) | [Fix] stringify: fix a crash with strictNullHandling and a custom filter/serializeDate (#279) | [Fix] when parseArrays is false, properly handle keys ending in [] (#260) | [Fix] stringify: do not crash in an obscure combo of interpretNumericEntities, a bad custom decoder, &amp; iso-8859-1 | [Fix] utils: merge: fix crash when source is a truthy primitive &amp; no options are provided | refactor stringify: Avoid arr = arr.concat(…), push to the existing instance (#269) | Refactor parse: only need to reassign the var once | Refactor parse/stringify: clean up charset options checking; fix defaults | Refactor add missing defaults | Refactor parse: one less concat call | Refactor utils: compactQueue: make it explicitly side-effecting | [Dev Deps] update browserify, eslint, @ljharb/eslint-config, iconv-lite, safe-publish-latest, tape | [Tests] up to node v10.10, v9.11, v8.12, v6.14, v4.9; pin included builds to LTS | . 6.5.3 . [Fix] parse: ignore __proto__ keys (#428) | [Fix] utils.merge`: avoid a crash with a null target and a truthy non-array source | [Fix] correctly parse nested arrays | [Fix] stringify: fix a crash with strictNullHandling and a custom filter/serializeDate (#279) | [Fix] utils: merge: fix crash when source is a truthy primitive &amp; no options are provided | [Fix] when parseArrays is false, properly handle keys ending in [] | [Fix] fix for an impossible situation: when the formatter is called with a non-string value | [Fix] utils.merge: avoid a crash with a null target and an array source | Refactor utils: reduce observable [[Get]]s | Refactor use cached Array.isArray | Refactor stringify: Avoid arr = arr.concat(…), push to the existing instance (#269) | Refactor parse: only need to reassign the var once | [Robustness] stringify: avoid relying on a global undefined (#427) | [readme] remove travis badge; add github actions/codecov badges; update URLs | [Docs] Clean up license text so it’s properly detected as BSD-3-Clause | [Docs] Clarify the need for “arrayLimit” option | [meta] fix README.md (#399) | [meta] add FUNDING.yml | [actions] backport actions from main | [Tests] always use String(x) over x.toString() | [Tests] remove nonexistent tape option | [Dev Deps] backport from main | . 6.5.2 . [Fix] use safer-buffer instead of Buffer constructor | Refactor utils: module.exports one thing, instead of mutating exports (#230) | [Dev Deps] update browserify, eslint, iconv-lite, safer-buffer, tape, browserify | . 6.5.1 . [Fix] Fix parsing &amp; compacting very deep objects (#224) | Refactor name utils functions | [Dev Deps] update eslint, @ljharb/eslint-config, tape | [Tests] up to node v8.4; use nvm install-latest-npm so newer npm doesn’t break older node | [Tests] Use precise dist for Node.js 0.6 runtime (#225) | [Tests] make 0.6 required, now that it’s passing | [Tests] on node v8.2; fix npm on node 0.6 | . 6.5.0 . [New] add utils.assign | [New] pass default encoder/decoder to custom encoder/decoder functions (#206) | [New] parse/stringify: add ignoreQueryPrefix/addQueryPrefix options, respectively (#213) | [Fix] Handle stringifying empty objects with addQueryPrefix (#217) | [Fix] do not mutate options argument (#207) | Refactor parse: cache index to reuse in else statement (#182) | [Docs] add various badges to readme (#208) | [Dev Deps] update eslint, browserify, iconv-lite, tape | [Tests] up to node v8.1, v7.10, v6.11; npm v4.6 breaks on node &lt; v1; npm v5+ breaks on node &lt; v4 | [Tests] add editorconfig-tools | . 6.4.1 . [Fix] parse: ignore __proto__ keys (#428) | [Fix] fix for an impossible situation: when the formatter is called with a non-string value | [Fix] use safer-buffer instead of Buffer constructor | [Fix] utils.merge: avoid a crash with a null target and an array source | [Fix] utils.merge`: avoid a crash with a null target and a truthy non-array source | [Fix] stringify: fix a crash with strictNullHandling and a custom filter/serializeDate (#279) | [Fix] utils: merge: fix crash when source is a truthy primitive &amp; no options are provided | [Fix] when parseArrays is false, properly handle keys ending in [] | [Robustness] stringify: avoid relying on a global undefined (#427) | Refactor use cached Array.isArray | Refactor stringify: Avoid arr = arr.concat(…), push to the existing instance (#269) | [readme] remove travis badge; add github actions/codecov badges; update URLs | [Docs] Clarify the need for “arrayLimit” option | [meta] fix README.md (#399) | [meta] Clean up license text so it’s properly detected as BSD-3-Clause | [meta] add FUNDING.yml | [actions] backport actions from main | [Tests] remove nonexistent tape option | [Dev Deps] backport from main | . 6.4.0 . [New] qs.stringify: add encodeValuesOnly option | [Fix] follow allowPrototypes option during merge (#201, #201) | [Fix] support keys starting with brackets (#202, #200) | [Fix] chmod a-x | [Dev Deps] update eslint | [Tests] up to node v7.7, v6.10, v4.8; disable osx builds since they block linux builds | [eslint] reduce warnings | . 6.3.3 . [Fix] parse: ignore __proto__ keys (#428) | [Fix] fix for an impossible situation: when the formatter is called with a non-string value | [Fix] utils.merge: avoid a crash with a null target and an array source | [Fix] utils.merge`: avoid a crash with a null target and a truthy non-array source | [Fix] stringify: fix a crash with strictNullHandling and a custom filter/serializeDate (#279) | [Fix] utils: merge: fix crash when source is a truthy primitive &amp; no options are provided | [Fix] when parseArrays is false, properly handle keys ending in [] | [Robustness] stringify: avoid relying on a global undefined (#427) | Refactor use cached Array.isArray | Refactor stringify: Avoid arr = arr.concat(…), push to the existing instance (#269) | [Docs] Clarify the need for “arrayLimit” option | [meta] fix README.md (#399) | [meta] Clean up license text so it’s properly detected as BSD-3-Clause | [meta] add FUNDING.yml | [actions] backport actions from main | [Tests] use safer-buffer instead of Buffer constructor | [Tests] remove nonexistent tape option | [Dev Deps] backport from main | . 6.3.2 . [Fix] follow allowPrototypes option during merge (#201, #200) | [Dev Deps] update eslint | [Fix] chmod a-x | [Fix] support keys starting with brackets (#202, #200) | [Tests] up to node v7.7, v6.10, v4.8; disable osx builds since they block linux builds | . 6.3.1 . [Fix] ensure that allowPrototypes: false does not ever shadow Object.prototype properties (thanks, @snyk!) | [Dev Deps] update eslint, @ljharb/eslint-config, browserify, iconv-lite, qs-iconv, tape | [Tests] on all node minors; improve test matrix | [Docs] document stringify option allowDots (#195) | [Docs] add empty object and array values example (#195) | [Docs] Fix minor inconsistency/typo (#192) | [Docs] document stringify option sort (#191) | Refactor stringify: throw faster with an invalid encoder | Refactor remove unnecessary escapes (#184) | Remove contributing.md, since qs is no longer part of hapi (#183) | . 6.3.0 . [New] Add support for RFC 1738 (#174, #173) | [New] stringify: Add serializeDate option to customize Date serialization (#159) | [Fix] ensure utils.merge handles merging two arrays | Refactor only constructors should be capitalized | Refactor capitalized var names are for constructors only | Refactor avoid using a sparse array | [Robustness] formats: cache String#replace | [Dev Deps] update browserify, eslint, @ljharb/eslint-config; add safe-publish-latest | [Tests] up to node v6.8, v4.6; improve test matrix | [Tests] flesh out arrayLimit/arrayFormat tests (#107) | [Tests] skip Object.create tests when null objects are not available | [Tests] Turn on eslint for test files (#175) | . 6.2.4 . [Fix] parse: ignore __proto__ keys (#428) | [Fix] utils.merge: avoid a crash with a null target and an array source | [Fix] utils.merge: avoid a crash with a null target and a truthy non-array source | [Fix] utils: merge: fix crash when source is a truthy primitive &amp; no options are provided | [Fix] when parseArrays is false, properly handle keys ending in [] | [Robustness] stringify: avoid relying on a global undefined (#427) | Refactor use cached Array.isArray | [Docs] Clarify the need for “arrayLimit” option | [meta] fix README.md (#399) | [meta] Clean up license text so it’s properly detected as BSD-3-Clause | [meta] add FUNDING.yml | [actions] backport actions from main | [Tests] use safer-buffer instead of Buffer constructor | [Tests] remove nonexistent tape option | [Dev Deps] backport from main | . 6.2.3 . [Fix] follow allowPrototypes option during merge (#201, #200) | [Fix] chmod a-x | [Fix] support keys starting with brackets (#202, #200) | [Tests] up to node v7.7, v6.10, v4.8; disable osx builds since they block linux builds | . 6.2.2 . [Fix] ensure that allowPrototypes: false does not ever shadow Object.prototype properties | . 6.2.1 . [Fix] ensure key[]=x&amp;key[]&amp;key[]=y results in 3, not 2, values | Refactor Be explicit and use Object.prototype.hasOwnProperty.call | [Tests] remove parallelshell since it does not reliably report failures | [Tests] up to node v6.3, v5.12 | [Dev Deps] update tape, eslint, @ljharb/eslint-config, qs-iconv | . 6.2.0 . [New] pass Buffers to the encoder/decoder directly (#161) | [New] add “encoder” and “decoder” options, for custom param encoding/decoding (#160) | [Fix] fix compacting of nested sparse arrays (#150) | . **6.1.2 . [Fix] follow allowPrototypes option during merge (#201, #200) | [Fix] chmod a-x | [Fix] support keys starting with brackets (#202, #200) | [Tests] up to node v7.7, v6.10, v4.8; disable osx builds since they block linux builds | . 6.1.1 . [Fix] ensure that allowPrototypes: false does not ever shadow Object.prototype properties | . 6.1.0 . [New] allowDots option for stringify (#151) | [Fix] “sort” option should work at a depth of 3 or more (#151) | [Fix] Restore dist directory; will be removed in v7 (#148) | . 6.0.4 . [Fix] follow allowPrototypes option during merge (#201, #200) | [Fix] chmod a-x | [Fix] support keys starting with brackets (#202, #200) | [Tests] up to node v7.7, v6.10, v4.8; disable osx builds since they block linux builds | . 6.0.3 . [Fix] ensure that allowPrototypes: false does not ever shadow Object.prototype properties | [Fix] Restore dist directory; will be removed in v7 (#148) | . 6.0.2 . Revert ES6 requirement and restore support for node down to v0.8. | . 6.0.1 . #127 Fix engines definition in package.json | . 6.0.0 . #124 Use ES6 and drop support for node &lt; v4 | . 5.2.1 . [Fix] ensure key[]=x&amp;key[]&amp;key[]=y results in 3, not 2, values | . 5.2.0 . #64 Add option to sort object keys in the query string | . 5.1.0 . #117 make URI encoding stringified results optional | #106 Add flag skipNulls to optionally skip null values in stringify | . 5.0.0 . #114 default allowDots to false | #100 include dist to npm | . 4.0.0 . #98 make returning plain objects and allowing prototype overwriting properties optional | . 3.1.0 . #89 Add option to disable “Transform dot notation to bracket notation” | . 3.0.0 . #80 qs.parse silently drops properties | #77 Perf boost | #60 Add explicit option to disable array parsing | #74 Bad parse when turning array into object | #81 Add a filter option | #68 Fixed issue with recursion and passing strings into objects. | #66 Add mixed array and object dot notation support Closes: #47 | #76 RFC 3986 | #85 No equal sign | #84 update license attribute | . 2.4.1 . #73 Property ‘hasOwnProperty’ of object # is not a function | . 2.4.0 . #70 Add arrayFormat option | . 2.3.3 . #59 make sure array indexes are &gt;= 0, closes #57 | #58 make qs usable for browser loader | . 2.3.2 . #55 allow merging a string into an object | . 2.3.1 . #52 Return “undefined” and “false” instead of throwing “TypeError”. | . 2.3.0 . #50 add option to omit array indices, closes #46 | . 2.2.5 . #39 Is there an alternative to Buffer.isBuffer? | #49 refactor utils.merge, fixes #45 | #41 avoid browserifying Buffer, for #39 | . 2.2.4 . #38 how to handle object keys beginning with a number | . 2.2.3 . #37 parser discards first empty value in array | #36 Update to lab 4.x | . 2.2.2 . #33 Error when plain object in a value | #34 use Object.prototype.hasOwnProperty.call instead of obj.hasOwnProperty | #24 Changelog? Semver? | . 2.2.1 . #32 account for circular references properly, closes #31 | #31 qs.parse stackoverflow on circular objects | . 2.2.0 . #26 Don’t use Buffer global if it’s not present | #30 Bug when merging non-object values into arrays | #29 Don’t call Utils.clone at the top of Utils.merge | #23 Ability to not limit parameters? | . 2.1.0 . #22 Enable using a RegExp as delimiter | . 2.0.0 . #18 Why is there arrayLimit? | #20 Configurable parametersLimit | #21 make all limits optional, for #18, for #20 | . 1.2.2 . #19 Don’t overwrite null values | . 1.2.1 . #16 ignore non-string delimiters | #15 Close code block | . 1.2.0 . #12 Add optional delim argument | #13 fix #11: flattened keys in array are now correctly parsed | . 1.1.0 . #7 Empty values of a POST array disappear after being submitted | #9 Should not omit equals signs (=) when value is null | #6 Minor grammar fix in README | . 1.0.2 . #5 array holes incorrectly copied into object on large index | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/qs/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/qs/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page68": {
          "title": "1.2.1 / 2019-05-10",
          "content": "1.2.1 / 2019-05-10 . Improve error when str is not a string | . 1.2.0 / 2016-06-01 . Add combine option to combine overlapping ranges | . 1.1.0 / 2016-05-13 . Fix incorrectly returning -1 when there is at least one valid range | perf: remove internal function | . 1.0.3 / 2015-10-29 . perf: enable strict mode | . 1.0.2 / 2014-09-08 . Support Node.js 0.6 | . 1.0.1 / 2014-09-07 . Move repository to jshttp | . 1.0.0 / 2013-12-11 . Add repository to package.json | Add MIT license | . 0.0.4 / 2012-06-17 . Change ret -1 for unsatisfiable and -2 when invalid | . 0.0.3 / 2012-06-17 . Fix last-byte-pos default to len - 1 | . 0.0.2 / 2012-06-14 . Add .type | . 0.0.1 / 2012-06-11 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/range-parser/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/range-parser/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page69": {
          "title": "2.5.1 / 2022-02-28",
          "content": "2.5.1 / 2022-02-28 . Fix error on early async hooks implementations | . 2.5.0 / 2022-02-21 . Prevent loss of async hooks context | Prevent hanging when stream is not readable | deps: http-errors@2.0.0 deps: depd@2.0.0 | deps: statuses@2.0.1 | . | . 2.4.3 / 2022-02-14 . deps: bytes@3.1.2 | . 2.4.2 / 2021-11-16 . deps: bytes@3.1.1 | deps: http-errors@1.8.1 deps: setprototypeof@1.2.0 | deps: toidentifier@1.0.1 | . | . 2.4.1 / 2019-06-25 . deps: http-errors@1.7.3 deps: inherits@2.0.4 | . | . 2.4.0 / 2019-04-17 . deps: bytes@3.1.0 Add petabyte (pb) support | . | deps: http-errors@1.7.2 Set constructor name when possible | deps: setprototypeof@1.1.1 | deps: statuses@’&gt;= 1.5.0 &lt; 2’ | . | deps: iconv-lite@0.4.24 Added encoding MIK | . | . 2.3.3 / 2018-05-08 . deps: http-errors@1.6.3 deps: depd@~1.1.2 | deps: setprototypeof@1.1.0 | deps: statuses@’&gt;= 1.3.1 &lt; 2’ | . | deps: iconv-lite@0.4.23 Fix loading encoding with year appended | Fix deprecation warnings on Node.js 10+ | . | . 2.3.2 / 2017-09-09 . deps: iconv-lite@0.4.19 Fix ISO-8859-1 regression | Update Windows-1255 | . | . 2.3.1 / 2017-09-07 . deps: bytes@3.0.0 | deps: http-errors@1.6.2 deps: depd@1.1.1 | . | perf: skip buffer decoding on overage chunk | . 2.3.0 / 2017-08-04 . Add TypeScript definitions | Use http-errors for standard emitted errors | deps: bytes@2.5.0 | deps: iconv-lite@0.4.18 Add support for React Native | Add a warning if not loaded as utf-8 | Fix CESU-8 decoding in Node.js 8 | Improve speed of ISO-8859-1 encoding | . | . 2.2.0 / 2017-01-02 . deps: iconv-lite@0.4.15 Added encoding MS-31J | Added encoding MS-932 | Added encoding MS-936 | Added encoding MS-949 | Added encoding MS-950 | Fix GBK/GB18030 handling of Euro character | . | . 2.1.7 / 2016-06-19 . deps: bytes@2.4.0 | perf: remove double-cleanup on happy path | . 2.1.6 / 2016-03-07 . deps: bytes@2.3.0 Drop partial bytes on all parsed units | Fix parsing byte string that looks like hex | . | . 2.1.5 / 2015-11-30 . deps: bytes@2.2.0 | deps: iconv-lite@0.4.13 | . 2.1.4 / 2015-09-27 . Fix masking critical errors from iconv-lite | deps: iconv-lite@0.4.12 Fix CESU-8 decoding in Node.js 4.x | . | . 2.1.3 / 2015-09-12 . Fix sync callback when attaching data listener causes sync read Node.js 0.10 compatibility issue | . | . 2.1.2 / 2015-07-05 . Fix error stack traces to skip makeError | deps: iconv-lite@0.4.11 Add encoding CESU-8 | . | . 2.1.1 / 2015-06-14 . Use unpipe module for unpiping requests | . 2.1.0 / 2015-05-28 . deps: iconv-lite@0.4.10 Improved UTF-16 endianness detection | Leading BOM is now removed when decoding | The encoding UTF-16 without BOM now defaults to UTF-16LE when detection fails | . | . 2.0.2 / 2015-05-21 . deps: bytes@2.1.0 Slight optimizations | . | . 2.0.1 / 2015-05-10 . Fix a false-positive when unpiping in Node.js 0.8 | . 2.0.0 / 2015-05-08 . Return a promise without callback instead of thunk | deps: bytes@2.0.1 units no longer case sensitive when parsing | . | . 1.3.4 / 2015-04-15 . Fix hanging callback if request aborts during read | deps: iconv-lite@0.4.8 Add encoding alias UNICODE-1-1-UTF-7 | . | . 1.3.3 / 2015-02-08 . deps: iconv-lite@0.4.7 Gracefully support enumerables on Object.prototype | . | . 1.3.2 / 2015-01-20 . deps: iconv-lite@0.4.6 Fix rare aliases of single-byte encodings | . | . 1.3.1 / 2014-11-21 . deps: iconv-lite@0.4.5 Fix Windows-31J and X-SJIS encoding support | . | . 1.3.0 / 2014-07-20 . Fully unpipe the stream on error Fixes Cannot switch to old mode now error on Node.js 0.10+ | . | . 1.2.3 / 2014-07-20 . deps: iconv-lite@0.4.4 Added encoding UTF-7 | . | . 1.2.2 / 2014-06-19 . Send invalid encoding error to callback | . 1.2.1 / 2014-06-15 . deps: iconv-lite@0.4.3 Added encodings UTF-16BE and UTF-16 with BOM | . | . 1.2.0 / 2014-06-13 . Passing string as options interpreted as encoding | Support all encodings from iconv-lite | . 1.1.7 / 2014-06-12 . use string_decoder module from npm | . 1.1.6 / 2014-05-27 . check encoding for old streams1 | support node.js &lt; 0.10.6 | . 1.1.5 / 2014-05-14 . bump bytes | . 1.1.4 / 2014-04-19 . allow true as an option | bump bytes | . 1.1.3 / 2014-03-02 . fix case when length=null | . 1.1.2 / 2013-12-01 . be less strict on state.encoding check | . 1.1.1 / 2013-11-27 . add engines | . 1.1.0 / 2013-11-27 . add err.statusCode and err.type | allow for encoding option to be true | pause the stream instead of dumping on error | throw if the stream’s encoding is set | . 1.0.1 / 2013-11-19 . dont support streams1, throw if dev set encoding | . 1.0.0 / 2013-11-17 . rename expected option to length | . 0.2.0 / 2013-11-15 . republish | . 0.1.1 / 2013-11-15 . use bytes | . 0.1.0 / 2013-11-11 . generator support | . 0.0.3 / 2013-10-10 . update repo | . 0.0.2 / 2013-09-14 . dump stream on bad headers | listen to events after defining received and buffers | . 0.0.1 / 2013-09-14 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/raw-body/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/raw-body/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page70": {
          "title": "Security Policies and Procedures",
          "content": "Security Policies and Procedures . Reporting a Bug . The raw-body team and community take all security bugs seriously. Thank you for improving the security of Express. We appreciate your efforts and responsible disclosure and will make every effort to acknowledge your contributions. . Report security bugs by emailing the current owners of raw-body. This information can be found in the npm registry using the command npm owner ls raw-body. If unsure or unable to get the information from the above, open an issue in the project issue tracker asking for the current contact information. . To ensure the timely response to your report, please ensure that the entirety of the report is contained within the email body and not solely behind a web link or an attachment. . At least one owner will acknowledge your email within 48 hours, and will send a more detailed response within 48 hours indicating the next steps in handling your report. After the initial reply to your report, the owners will endeavor to keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/raw-body/SECURITY.html",
          "relUrl": "/node_backend_Trystan/node_modules/raw-body/SECURITY.html",
          "date": ""
      }
      
  

  
      ,"page71": {
          "title": "Porting to the Buffer.from/Buffer.alloc API",
          "content": "Porting to the Buffer.from/Buffer.alloc API . . Overview . Variant 1: Drop support for Node.js ≤ 4.4.x and 5.0.0 — 5.9.x. (recommended) | Variant 2: Use a polyfill | Variant 3: manual detection, with safeguards | . Finding problematic bits of code using grep . Just run grep -nrE &#39;[^a-zA-Z](Slow)?Buffer s* (&#39; --exclude-dir node_modules. . It will find all the potentially unsafe places in your own code (with some considerably unlikely exceptions). . Finding problematic bits of code using Node.js 8 . If you’re using Node.js ≥ 8.0.0 (which is recommended), Node.js exposes multiple options that help with finding the relevant pieces of code: . --trace-warnings will make Node.js show a stack trace for this warning and other warnings that are printed by Node.js. | --trace-deprecation does the same thing, but only for deprecation warnings. | --pending-deprecation will show more types of deprecation warnings. In particular, it will show the Buffer() deprecation warning, even on Node.js 8. | . You can set these flags using an environment variable: . $ export NODE_OPTIONS=&#39;--trace-warnings --pending-deprecation&#39; $ cat example.js &#39;use strict&#39;; const foo = new Buffer(&#39;foo&#39;); $ node example.js (node:7147) [DEP0005] DeprecationWarning: The Buffer() and new Buffer() constructors are not recommended for use due to security and usability concerns. Please use the new Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() construction methods instead. at showFlaggedDeprecation (buffer.js:127:13) at new Buffer (buffer.js:148:3) at Object.&lt;anonymous&gt; (/path/to/example.js:2:13) [... more stack trace lines ...] . Finding problematic bits of code using linters . Eslint rules no-buffer-constructor or node/no-deprecated-api also find calls to deprecated Buffer() API. Those rules are included in some pre-sets. . There is a drawback, though, that it doesn’t always work correctly when Buffer is overriden e.g. with a polyfill, so recommended is a combination of this and some other method described above. . . Variant 1: Drop support for Node.js ≤ 4.4.x and 5.0.0 — 5.9.x. . This is the recommended solution nowadays that would imply only minimal overhead. . The Node.js 5.x release line has been unsupported since July 2016, and the Node.js 4.x release line reaches its End of Life in April 2018 (→ Schedule). This means that these versions of Node.js will not receive any updates, even in case of security issues, so using these release lines should be avoided, if at all possible. . What you would do in this case is to convert all new Buffer() or Buffer() calls to use Buffer.alloc() or Buffer.from(), in the following way: . For new Buffer(number), replace it with Buffer.alloc(number). | For new Buffer(string) (or new Buffer(string, encoding)), replace it with Buffer.from(string) (or Buffer.from(string, encoding)). | For all other combinations of arguments (these are much rarer), also replace new Buffer(...arguments) with Buffer.from(...arguments). | . Note that Buffer.alloc() is also faster on the current Node.js versions than new Buffer(size).fill(0), which is what you would otherwise need to ensure zero-filling. . Enabling eslint rule no-buffer-constructor or node/no-deprecated-api is recommended to avoid accidential unsafe Buffer API usage. . There is also a JSCodeshift codemod for automatically migrating Buffer constructors to Buffer.alloc() or Buffer.from(). Note that it currently only works with cases where the arguments are literals or where the constructor is invoked with two arguments. . If you currently support those older Node.js versions and dropping them would be a semver-major change for you, or if you support older branches of your packages, consider using Variant 2 or Variant 3 on older branches, so people using those older branches will also receive the fix. That way, you will eradicate potential issues caused by unguarded Buffer API usage and your users will not observe a runtime deprecation warning when running your code on Node.js 10. . . Variant 2: Use a polyfill . Utilize safer-buffer as a polyfill to support older Node.js versions. . You would take exacly the same steps as in Variant 1, but with a polyfill const Buffer = require(&#39;safer-buffer&#39;).Buffer in all files where you use the new Buffer api. . Make sure that you do not use old new Buffer API — in any files where the line above is added, using old new Buffer() API will throw. It will be easy to notice that in CI, though. . Alternatively, you could use buffer-from and/or buffer-alloc ponyfills — those are great, the only downsides being 4 deps in the tree and slightly more code changes to migrate off them (as you would be using e.g. Buffer.from under a different name). If you need only Buffer.from polyfilled — buffer-from alone which comes with no extra dependencies. . Alternatively, you could use safe-buffer — it also provides a polyfill, but takes a different approach which has it’s drawbacks. It will allow you to also use the older new Buffer() API in your code, though — but that’s arguably a benefit, as it is problematic, can cause issues in your code, and will start emitting runtime deprecation warnings starting with Node.js 10. . Note that in either case, it is important that you also remove all calls to the old Buffer API manually — just throwing in safe-buffer doesn’t fix the problem by itself, it just provides a polyfill for the new API. I have seen people doing that mistake. . Enabling eslint rule no-buffer-constructor or node/no-deprecated-api is recommended. . Don’t forget to drop the polyfill usage once you drop support for Node.js &lt; 4.5.0. . . Variant 3 — manual detection, with safeguards . This is useful if you create Buffer instances in only a few places (e.g. one), or you have your own wrapper around them. . Buffer(0) . This special case for creating empty buffers can be safely replaced with Buffer.concat([]), which returns the same result all the way down to Node.js 0.8.x. . Buffer(notNumber) . Before: . var buf = new Buffer(notNumber, encoding); . After: . var buf; if (Buffer.from &amp;&amp; Buffer.from !== Uint8Array.from) { buf = Buffer.from(notNumber, encoding); } else { if (typeof notNumber === &#39;number&#39;) throw new Error(&#39;The &quot;size&quot; argument must be of type number.&#39;); buf = new Buffer(notNumber, encoding); } . encoding is optional. . Note that the typeof notNumber before new Buffer is required (for cases when notNumber argument is not hard-coded) and is not caused by the deprecation of Buffer constructor — it’s exactly why the Buffer constructor is deprecated. Ecosystem packages lacking this type-check caused numereous security issues — situations when unsanitized user input could end up in the Buffer(arg) create problems ranging from DoS to leaking sensitive information to the attacker from the process memory. . When notNumber argument is hardcoded (e.g. literal &quot;abc&quot; or [0,1,2]), the typeof check can be omitted. . Also note that using TypeScript does not fix this problem for you — when libs written in TypeScript are used from JS, or when user input ends up there — it behaves exactly as pure JS, as all type checks are translation-time only and are not present in the actual JS code which TS compiles to. . Buffer(number) . For Node.js 0.10.x (and below) support: . var buf; if (Buffer.alloc) { buf = Buffer.alloc(number); } else { buf = new Buffer(number); buf.fill(0); } . Otherwise (Node.js ≥ 0.12.x): . const buf = Buffer.alloc ? Buffer.alloc(number) : new Buffer(number).fill(0); . Regarding Buffer.allocUnsafe . Be extra cautious when using Buffer.allocUnsafe: . Don’t use it if you don’t have a good reason to e.g. you probably won’t ever see a performance difference for small buffers, in fact, those might be even faster with Buffer.alloc(), | if your code is not in the hot code path — you also probably won’t notice a difference, | keep in mind that zero-filling minimizes the potential risks. | . | If you use it, make sure that you never return the buffer in a partially-filled state, if you are writing to it sequentially — always truncate it to the actuall written length | . | . Errors in handling buffers allocated with Buffer.allocUnsafe could result in various issues, ranged from undefined behaviour of your code to sensitive data (user input, passwords, certs) leaking to the remote attacker. . Note that the same applies to new Buffer usage without zero-filling, depending on the Node.js version (and lacking type checks also adds DoS to the list of potential problems). . . FAQ . . What is wrong with the Buffer constructor? . The Buffer constructor could be used to create a buffer in many different ways: . new Buffer(42) creates a Buffer of 42 bytes. Before Node.js 8, this buffer contained arbitrary memory for performance reasons, which could include anything ranging from program source code to passwords and encryption keys. | new Buffer(&#39;abc&#39;) creates a Buffer that contains the UTF-8-encoded version of the string &#39;abc&#39;. A second argument could specify another encoding: For example, new Buffer(string, &#39;base64&#39;) could be used to convert a Base64 string into the original sequence of bytes that it represents. | There are several other combinations of arguments. | . This meant that, in code like var buffer = new Buffer(foo);, it is not possible to tell what exactly the contents of the generated buffer are without knowing the type of foo. . Sometimes, the value of foo comes from an external source. For example, this function could be exposed as a service on a web server, converting a UTF-8 string into its Base64 form: . function stringToBase64(req, res) { // The request body should have the format of `{ string: &#39;foobar&#39; }` const rawBytes = new Buffer(req.body.string) const encoded = rawBytes.toString(&#39;base64&#39;) res.end({ encoded: encoded }) } . Note that this code does not validate the type of req.body.string: . req.body.string is expected to be a string. If this is the case, all goes well. | req.body.string is controlled by the client that sends the request. | If req.body.string is the number 50, the rawBytes would be 50 bytes: Before Node.js 8, the content would be uninitialized | After Node.js 8, the content would be 50 bytes with the value 0 | . | . Because of the missing type check, an attacker could intentionally send a number as part of the request. Using this, they can either: . Read uninitialized memory. This will leak passwords, encryption keys and other kinds of sensitive information. (Information leak) | Force the program to allocate a large amount of memory. For example, when specifying 500000000 as the input value, each request will allocate 500MB of memory. This can be used to either exhaust the memory available of a program completely and make it crash, or slow it down significantly. (Denial of Service) | . Both of these scenarios are considered serious security issues in a real-world web server context. . when using Buffer.from(req.body.string) instead, passing a number will always throw an exception instead, giving a controlled behaviour that can always be handled by the program. . . The Buffer() constructor has been deprecated for a while. Is this really an issue? . Surveys of code in the npm ecosystem have shown that the Buffer() constructor is still widely used. This includes new code, and overall usage of such code has actually been increasing. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/safer-buffer/Porting-Buffer.html",
          "relUrl": "/node_backend_Trystan/node_modules/safer-buffer/Porting-Buffer.html",
          "date": ""
      }
      
  

  
      ,"page72": {
          "title": "0.18.0 / 2022-03-23",
          "content": "0.18.0 / 2022-03-23 . Fix emitted 416 error missing headers property | Limit the headers removed for 304 response | deps: depd@2.0.0 Replace internal eval usage with Function constructor | Use instance methods on process to check for listeners | . | deps: destroy@1.2.0 | deps: http-errors@2.0.0 deps: depd@2.0.0 | deps: statuses@2.0.1 | . | deps: on-finished@2.4.1 | deps: statuses@2.0.1 | . 0.17.2 / 2021-12-11 . pref: ignore empty http tokens | deps: http-errors@1.8.1 deps: inherits@2.0.4 | deps: toidentifier@1.0.1 | deps: setprototypeof@1.2.0 | . | deps: ms@2.1.3 | . 0.17.1 / 2019-05-10 . Set stricter CSP header in redirect &amp; error responses | deps: range-parser@~1.2.1 | . 0.17.0 / 2019-05-03 . deps: http-errors@~1.7.2 Set constructor name when possible | Use toidentifier module to make class names | deps: depd@~1.1.2 | deps: setprototypeof@1.1.1 | deps: statuses@’&gt;= 1.5.0 &lt; 2’ | . | deps: mime@1.6.0 Add extensions for JPEG-2000 images | Add new font/* types from IANA | Add WASM mapping | Update .bdoc to application/bdoc | Update .bmp to image/bmp | Update .m4a to audio/mp4 | Update .rtf to application/rtf | Update .wav to audio/wav | Update .xml to application/xml | Update generic extensions to application/octet-stream: .deb, .dll, .dmg, .exe, .iso, .msi | Use mime-score module to resolve extension conflicts | . | deps: ms@2.1.1 Add week/w support | Fix negative number handling | . | deps: statuses@~1.5.0 | perf: remove redundant path.normalize call | . 0.16.2 / 2018-02-07 . Fix incorrect end tag in default error &amp; redirects | deps: depd@~1.1.2 perf: remove argument reassignment | . | deps: encodeurl@~1.0.2 Fix encoding % as last character | . | deps: statuses@~1.4.0 | . 0.16.1 / 2017-09-29 . Fix regression in edge-case behavior for empty path | . 0.16.0 / 2017-09-27 . Add immutable option | Fix missing &lt;/html&gt; in default error &amp; redirects | Use instance methods on steam to check for listeners | deps: mime@1.4.1 Add 70 new types for file extensions | Set charset as “UTF-8” for .js and .json | . | perf: improve path validation speed | . 0.15.6 / 2017-09-22 . deps: debug@2.6.9 | perf: improve If-Match token parsing | . 0.15.5 / 2017-09-20 . deps: etag@~1.8.1 perf: replace regular expression with substring | . | deps: fresh@0.5.2 Fix handling of modified headers with invalid dates | perf: improve ETag match loop | perf: improve If-None-Match token parsing | . | . 0.15.4 / 2017-08-05 . deps: debug@2.6.8 | deps: depd@~1.1.1 Remove unnecessary Buffer loading | . | deps: http-errors@~1.6.2 deps: depd@1.1.1 | . | . 0.15.3 / 2017-05-16 . deps: debug@2.6.7 deps: ms@2.0.0 | . | deps: ms@2.0.0 | . 0.15.2 / 2017-04-26 . deps: debug@2.6.4 Fix DEBUG_MAX_ARRAY_LENGTH | deps: ms@0.7.3 | . | deps: ms@1.0.0 | . 0.15.1 / 2017-03-04 . Fix issue when Date.parse does not return NaN on invalid date | Fix strict violation in broken environments | . 0.15.0 / 2017-02-25 . Support If-Match and If-Unmodified-Since headers | Add res and path arguments to directory event | Remove usage of res._headers private field Improves compatibility with Node.js 8 nightly | . | Send complete HTML document in redirect &amp; error responses | Set default CSP header in redirect &amp; error responses | Use res.getHeaderNames() when available | Use res.headersSent when available | deps: debug@2.6.1 Allow colors in workers | Deprecated DEBUG_FD environment variable set to 3 or higher | Fix error when running under React Native | Use same color for same namespace | deps: ms@0.7.2 | . | deps: etag@~1.8.0 | deps: fresh@0.5.0 Fix false detection of no-cache request directive | Fix incorrect result when If-None-Match has both * and ETags | Fix weak ETag matching to match spec | perf: delay reading header values until needed | perf: enable strict mode | perf: hoist regular expressions | perf: remove duplicate conditional | perf: remove unnecessary boolean coercions | perf: skip checking modified time if ETag check failed | perf: skip parsing If-None-Match when no ETag header | perf: use Date.parse instead of new Date | . | deps: http-errors@~1.6.1 Make message property enumerable for HttpErrors | deps: setprototypeof@1.0.3 | . | . 0.14.2 / 2017-01-23 . deps: http-errors@~1.5.1 deps: inherits@2.0.3 | deps: setprototypeof@1.0.2 | deps: statuses@’&gt;= 1.3.1 &lt; 2’ | . | deps: ms@0.7.2 | deps: statuses@~1.3.1 | . 0.14.1 / 2016-06-09 . Fix redirect error when path contains raw non-URL characters | Fix redirect when path starts with multiple forward slashes | . 0.14.0 / 2016-06-06 . Add acceptRanges option | Add cacheControl option | Attempt to combine multiple ranges into single range | Correctly inherit from Stream class | Fix Content-Range header in 416 responses when using start/end options | Fix Content-Range header missing from default 416 responses | Ignore non-byte Range headers | deps: http-errors@~1.5.0 Add HttpError export, for err instanceof createError.HttpError | Support new code 421 Misdirected Request | Use setprototypeof module to replace __proto__ setting | deps: inherits@2.0.1 | deps: statuses@’&gt;= 1.3.0 &lt; 2’ | perf: enable strict mode | . | deps: range-parser@~1.2.0 Fix incorrectly returning -1 when there is at least one valid range | perf: remove internal function | . | deps: statuses@~1.3.0 Add 421 Misdirected Request | perf: enable strict mode | . | perf: remove argument reassignment | . 0.13.2 / 2016-03-05 . Fix invalid Content-Type header when send.mime.default_type unset | . 0.13.1 / 2016-01-16 . deps: depd@~1.1.0 Support web browser loading | perf: enable strict mode | . | deps: destroy@~1.0.4 perf: enable strict mode | . | deps: escape-html@~1.0.3 perf: enable strict mode | perf: optimize string replacement | perf: use faster string coercion | . | deps: range-parser@~1.0.3 perf: enable strict mode | . | . 0.13.0 / 2015-06-16 . Allow Node.js HTTP server to set Date response header | Fix incorrectly removing Content-Location on 304 response | Improve the default redirect response headers | Send appropriate headers on default error response | Use http-errors for standard emitted errors | Use statuses instead of http module for status messages | deps: escape-html@1.0.2 | deps: etag@~1.7.0 Improve stat performance by removing hashing | . | deps: fresh@0.3.0 Add weak ETag matching support | . | deps: on-finished@~2.3.0 Add defined behavior for HTTP CONNECT requests | Add defined behavior for HTTP Upgrade requests | deps: ee-first@1.1.1 | . | perf: enable strict mode | perf: remove unnecessary array allocations | . 0.12.3 / 2015-05-13 . deps: debug@~2.2.0 deps: ms@0.7.1 | . | deps: depd@~1.0.1 | deps: etag@~1.6.0 | Improve support for JXcore | Support “fake” stats objects in environments without fs | deps: ms@0.7.1 Prevent extraordinarily long inputs | . | deps: on-finished@~2.2.1 | . 0.12.2 / 2015-03-13 . Throw errors early for invalid extensions or index options | deps: debug@~2.1.3 Fix high intensity foreground color for bold | deps: ms@0.7.0 | . | . 0.12.1 / 2015-02-17 . Fix regression sending zero-length files | . 0.12.0 / 2015-02-16 . Always read the stat size from the file | Fix mutating passed-in options | deps: mime@1.3.4 | . 0.11.1 / 2015-01-20 . Fix root path disclosure | . 0.11.0 / 2015-01-05 . deps: debug@~2.1.1 | deps: etag@~1.5.1 deps: crc@3.2.1 | . | deps: ms@0.7.0 Add milliseconds | Add msecs | Add secs | Add mins | Add hrs | Add yrs | . | deps: on-finished@~2.2.0 | . 0.10.1 / 2014-10-22 . deps: on-finished@~2.1.1 Fix handling of pipelined requests | . | . 0.10.0 / 2014-10-15 . deps: debug@~2.1.0 Implement DEBUG_FD env variable support | . | deps: depd@~1.0.0 | deps: etag@~1.5.0 Improve string performance | Slightly improve speed for weak ETags over 1KB | . | . 0.9.3 / 2014-09-24 . deps: etag@~1.4.0 Support “fake” stats objects | . | . 0.9.2 / 2014-09-15 . deps: depd@0.4.5 | deps: etag@~1.3.1 | deps: range-parser@~1.0.2 | . 0.9.1 / 2014-09-07 . deps: fresh@0.2.4 | . 0.9.0 / 2014-09-07 . Add lastModified option | Use etag to generate ETag header | deps: debug@~2.0.0 | . 0.8.5 / 2014-09-04 . Fix malicious path detection for empty string path | . 0.8.4 / 2014-09-04 . Fix a path traversal issue when using root | . 0.8.3 / 2014-08-16 . deps: destroy@1.0.3 renamed from dethroy | . | deps: on-finished@2.1.0 | . 0.8.2 / 2014-08-14 . Work around fd leak in Node.js 0.10 for fs.ReadStream | deps: dethroy@1.0.2 | . 0.8.1 / 2014-08-05 . Fix extensions behavior when file already has extension | . 0.8.0 / 2014-08-05 . Add extensions option | . 0.7.4 / 2014-08-04 . Fix serving index files without root dir | . 0.7.3 / 2014-07-29 . Fix incorrect 403 on Windows and Node.js 0.11 | . 0.7.2 / 2014-07-27 . deps: depd@0.4.4 Work-around v8 generating empty stack traces | . | . 0.7.1 / 2014-07-26 . deps: depd@0.4.3 Fix exception when global Error.stackTraceLimit is too low | . | . 0.7.0 / 2014-07-20 . Deprecate hidden option; use dotfiles option | Add dotfiles option | deps: debug@1.0.4 | deps: depd@0.4.2 Add TRACE_DEPRECATION environment variable | Remove non-standard grey color from color output | Support --no-deprecation argument | Support --trace-deprecation argument | . | . 0.6.0 / 2014-07-11 . Deprecate from option; use root option | Deprecate send.etag() – use etag in options | Deprecate send.hidden() – use hidden in options | Deprecate send.index() – use index in options | Deprecate send.maxage() – use maxAge in options | Deprecate send.root() – use root in options | Cap maxAge value to 1 year | deps: debug@1.0.3 Add support for multiple wildcards in namespaces | . | . 0.5.0 / 2014-06-28 . Accept string for maxAge (converted by ms) | Add headers event | Include link in default redirect response | Use EventEmitter.listenerCount to count listeners | . 0.4.3 / 2014-06-11 . Do not throw un-catchable error on file open race condition | Use escape-html for HTML escaping | deps: debug@1.0.2 fix some debugging output colors on node.js 0.8 | . | deps: finished@1.2.2 | deps: fresh@0.2.2 | . 0.4.2 / 2014-06-09 . fix “event emitter leak” warnings | deps: debug@1.0.1 | deps: finished@1.2.1 | . 0.4.1 / 2014-06-02 . Send max-age in Cache-Control in correct format | . 0.4.0 / 2014-05-27 . Calculate ETag with md5 for reduced collisions | Fix wrong behavior when index file matches directory | Ignore stream errors after request ends Goodbye EBADF, read | . | Skip directories in index file search | deps: debug@0.8.1 | . 0.3.0 / 2014-04-24 . Fix sending files with dots without root set | Coerce option types | Accept API options in options object | Set etags to “weak” | Include file path in etag | Make “Can’t set headers after they are sent.” catchable | Send full entity-body for multi range requests | Default directory access to 403 when index disabled | Support multiple index paths | Support “If-Range” header | Control whether to generate etags | deps: mime@1.2.11 | . 0.2.0 / 2014-01-29 . update range-parser and fresh | . 0.1.4 / 2013-08-11 . update fresh | . 0.1.3 / 2013-07-08 . Revert “Fix fd leak” | . 0.1.2 / 2013-07-03 . Fix fd leak | . 0.1.0 / 2012-08-25 . add options parameter to send() that is passed to fs.createReadStream() [kanongil] | . 0.0.4 / 2012-08-16 . allow custom “Accept-Ranges” definition | . 0.0.3 / 2012-07-16 . fix normalization of the root directory. Closes #3 | . 0.0.2 / 2012-07-09 . add passing of req explicitly for now (YUCK) | . 0.0.1 / 2010-01-03 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/send/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/send/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page73": {
          "title": "Security Policies and Procedures",
          "content": "Security Policies and Procedures . Reporting a Bug . The send team and community take all security bugs seriously. Thank you for improving the security of Express. We appreciate your efforts and responsible disclosure and will make every effort to acknowledge your contributions. . Report security bugs by emailing the current owner(s) of send. This information can be found in the npm registry using the command npm owner ls send. If unsure or unable to get the information from the above, open an issue in the project issue tracker asking for the current contact information. . To ensure the timely response to your report, please ensure that the entirety of the report is contained within the email body and not solely behind a web link or an attachment. . At least one owner will acknowledge your email within 48 hours, and will send a more detailed response within 48 hours indicating the next steps in handling your report. After the initial reply to your report, the owners will endeavor to keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/send/SECURITY.html",
          "relUrl": "/node_backend_Trystan/node_modules/send/SECURITY.html",
          "date": ""
      }
      
  

  
      ,"page74": {
          "title": "2.6.9 / 2017-09-22",
          "content": "2.6.9 / 2017-09-22 . remove ReDoS regexp in %o formatter (#504) | . 2.6.8 / 2017-05-18 . Fix: Check for undefined on browser globals (#462, @marbemac) | . 2.6.7 / 2017-05-16 . Fix: Update ms to 2.0.0 to fix regular expression denial of service vulnerability (#458, @hubdotcom) | Fix: Inline extend function in node implementation (#452, @dougwilson) | Docs: Fix typo (#455, @msasad) | . 2.6.5 / 2017-04-27 . Fix: null reference check on window.documentElement.style.WebkitAppearance (#447, @thebigredgeek) | Misc: clean up browser reference checks (#447, @thebigredgeek) | Misc: add npm-debug.log to .gitignore (@thebigredgeek) | . 2.6.4 / 2017-04-20 . Fix: bug that would occure if process.env.DEBUG is a non-string value. (#444, @LucianBuzzo) | Chore: ignore bower.json in npm installations. (#437, @joaovieira) | Misc: update “ms” to v0.7.3 (@tootallnate) | . 2.6.3 / 2017-03-13 . Fix: Electron reference to process.env.DEBUG (#431, @paulcbetts) | Docs: Changelog fix (@thebigredgeek) | . 2.6.2 / 2017-03-10 . Fix: DEBUG_MAX_ARRAY_LENGTH (#420, @slavaGanzin) | Docs: Add backers and sponsors from Open Collective (#422, @piamancini) | Docs: Add Slackin invite badge (@tootallnate) | . 2.6.1 / 2017-02-10 . Fix: Module’s export default syntax fix for IE8 Expected identifier error | Fix: Whitelist DEBUG_FD for values 1 and 2 only (#415, @pi0) | Fix: IE8 “Expected identifier” error (#414, @vgoma) | Fix: Namespaces would not disable once enabled (#409, @musikov) | . 2.6.0 / 2016-12-28 . Fix: added better null pointer checks for browser useColors (@thebigredgeek) | Improvement: removed explicit window.debug export (#404, @tootallnate) | Improvement: deprecated DEBUG_FD environment variable (#405, @tootallnate) | . 2.5.2 / 2016-12-25 . Fix: reference error on window within webworkers (#393, @KlausTrainer) | Docs: fixed README typo (#391, @lurch) | Docs: added notice about v3 api discussion (@thebigredgeek) | . 2.5.1 / 2016-12-20 . Fix: babel-core compatibility | . 2.5.0 / 2016-12-20 . Fix: wrong reference in bower file (@thebigredgeek) | Fix: webworker compatibility (@thebigredgeek) | Fix: output formatting issue (#388, @kribblo) | Fix: babel-loader compatibility (#383, @escwald) | Misc: removed built asset from repo and publications (@thebigredgeek) | Misc: moved source files to /src (#378, @yamikuronue) | Test: added karma integration and replaced babel with browserify for browser tests (#378, @yamikuronue) | Test: coveralls integration (#378, @yamikuronue) | Docs: simplified language in the opening paragraph (#373, @yamikuronue) | . 2.4.5 / 2016-12-17 . Fix: navigator undefined in Rhino (#376, @jochenberger) | Fix: custom log function (#379, @hsiliev) | Improvement: bit of cleanup + linting fixes (@thebigredgeek) | Improvement: rm non-maintainted dist/ dir (#375, @freewil) | Docs: simplified language in the opening paragraph. (#373, @yamikuronue) | . 2.4.4 / 2016-12-14 . Fix: work around debug being loaded in preload scripts for electron (#368, @paulcbetts) | . 2.4.3 / 2016-12-14 . Fix: navigation.userAgent error for react native (#364, @escwald) | . 2.4.2 / 2016-12-14 . Fix: browser colors (#367, @tootallnate) | Misc: travis ci integration (@thebigredgeek) | Misc: added linting and testing boilerplate with sanity check (@thebigredgeek) | . 2.4.1 / 2016-12-13 . Fix: typo that broke the package (#356) | . 2.4.0 / 2016-12-13 . Fix: bower.json references unbuilt src entry point (#342, @justmatt) | Fix: revert “handle regex special characters” (@tootallnate) | Feature: configurable util.inspect()`options for NodeJS (#327, @tootallnate) | Feature: %O`(big O) pretty-prints objects (#322, @tootallnate) | Improvement: allow colors in workers (#335, @botverse) | Improvement: use same color for same namespace. (#338, @lchenay) | . 2.3.3 / 2016-11-09 . Fix: Catch JSON.stringify() errors (#195, Jovan Alleyne) | Fix: Returning localStorage saved values (#331, Levi Thomason) | Improvement: Don’t create an empty object when no process (Nathan Rajlich) | . 2.3.2 / 2016-11-09 . Fix: be super-safe in index.js as well (@TooTallNate) | Fix: should check whether process exists (Tom Newby) | . 2.3.1 / 2016-11-09 . Fix: Added electron compatibility (#324, @paulcbetts) | Improvement: Added performance optimizations (@tootallnate) | Readme: Corrected PowerShell environment variable example (#252, @gimre) | Misc: Removed yarn lock file from source control (#321, @fengmk2) | . 2.3.0 / 2016-11-07 . Fix: Consistent placement of ms diff at end of output (#215, @gorangajic) | Fix: Escaping of regex special characters in namespace strings (#250, @zacronos) | Fix: Fixed bug causing crash on react-native (#282, @vkarpov15) | Feature: Enabled ES6+ compatible import via default export (#212 @bucaran) | Feature: Added %O formatter to reflect Chrome’s console.log capability (#279, @oncletom) | Package: Update “ms” to 0.7.2 (#315, @DevSide) | Package: removed superfluous version property from bower.json (#207 @kkirsche) | Readme: fix USE_COLORS to DEBUG_COLORS | Readme: Doc fixes for format string sugar (#269, @mlucool) | Readme: Updated docs for DEBUG_FD and DEBUG_COLORS environment variables (#232, @mattlyons0) | Readme: doc fixes for PowerShell (#271 #243, @exoticknight @unreadable) | Readme: better docs for browser support (#224, @matthewmueller) | Tooling: Added yarn integration for development (#317, @thebigredgeek) | Misc: Renamed History.md to CHANGELOG.md (@thebigredgeek) | Misc: Added license file (#226 #274, @CantemoInternal @sdaitzman) | Misc: Updated contributors (@thebigredgeek) | . 2.2.0 / 2015-05-09 . package: update “ms” to v0.7.1 (#202, @dougwilson) | README: add logging to file example (#193, @DanielOchoa) | README: fixed a typo (#191, @amir-s) | browser: expose storage (#190, @stephenmathieson) | Makefile: add a distclean target (#189, @stephenmathieson) | . 2.1.3 / 2015-03-13 . Updated stdout/stderr example (#186) | Updated example/stdout.js to match debug current behaviour | Renamed example/stderr.js to stdout.js | Update Readme.md (#184) | replace high intensity foreground color for bold (#182, #183) | . 2.1.2 / 2015-03-01 . dist: recompile | update “ms” to v0.7.0 | package: update “browserify” to v9.0.3 | component: fix “ms.js” repo location | changed bower package name | updated documentation about using debug in a browser | fix: security error on safari (#167, #168, @yields) | . 2.1.1 / 2014-12-29 . browser: use typeof to check for console existence | browser: check for console.log truthiness (fix IE 8/9) | browser: add support for Chrome apps | Readme: added Windows usage remarks | Add bower.json to properly support bower install | . 2.1.0 / 2014-10-15 . node: implement DEBUG_FD env variable support | package: update “browserify” to v6.1.0 | package: add “license” field to package.json (#135, @panuhorsmalahti) | . 2.0.0 / 2014-09-01 . package: update “browserify” to v5.11.0 | node: use stderr rather than stdout for logging (#29, @stephenmathieson) | . 1.0.4 / 2014-07-15 . dist: recompile | example: remove console.info() log usage | example: add “Content-Type” UTF-8 header to browser example | browser: place %c marker after the space character | browser: reset the “content” color via color: inherit | browser: add colors support for Firefox &gt;= v31 | debug: prefer an instance log() function over the global one (#119) | Readme: update documentation about styled console logs for FF v31 (#116, @wryk) | . 1.0.3 / 2014-07-09 . Add support for multiple wildcards in namespaces (#122, @seegno) | browser: fix lint | . 1.0.2 / 2014-06-10 . browser: update color palette (#113, @gscottolson) | common: make console logging function configurable (#108, @timoxley) | node: fix %o colors on old node &lt;= 0.8.x | Makefile: find node path using shell/which (#109, @timoxley) | . 1.0.1 / 2014-06-06 . browser: use removeItem() to clear localStorage | browser, node: don’t set DEBUG if namespaces is undefined (#107, @leedm777) | package: add “contributors” section | node: fix comment typo | README: list authors | . 1.0.0 / 2014-06-04 . make ms diff be global, not be scope | debug: ignore empty strings in enable() | node: make DEBUG_COLORS able to disable coloring | *: export the colors array | npmignore: don’t publish the dist dir | Makefile: refactor to use browserify | package: add “browserify” as a dev dependency | Readme: add Web Inspector Colors section | node: reset terminal color for the debug content | node: map “%o” to util.inspect() | browser: map “%j” to JSON.stringify() | debug: add custom “formatters” | debug: use “ms” module for humanizing the diff | Readme: add “bash” syntax highlighting | browser: add Firebug color support | browser: add colors for WebKit browsers | node: apply log to console | rewrite: abstract common logic for Node &amp; browsers | add .jshintrc file | . 0.8.1 / 2014-04-14 . package: re-add the “component” section | . 0.8.0 / 2014-03-30 . add enable() method for nodejs. Closes #27 | change from stderr to stdout | remove unnecessary index.js file | . 0.7.4 / 2013-11-13 . remove “browserify” key from package.json (fixes something in browserify) | . 0.7.3 / 2013-10-30 . fix: catch localStorage security error when cookies are blocked (Chrome) | add debug(err) support. Closes #46 | add .browser prop to package.json. Closes #42 | . 0.7.2 / 2013-02-06 . fix package.json | fix: Mobile Safari (private mode) is broken with debug | fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript | . 0.7.1 / 2013-02-05 . add repository URL to package.json | add DEBUG_COLORED to force colored output | add browserify support | fix component. Closes #24 | . 0.7.0 / 2012-05-04 . Added .component to package.json | Added debug.component.js build | . 0.6.0 / 2012-03-16 . Added support for “-“ prefix in DEBUG [Vinay Pulim] | Added .enabled flag to the node version [TooTallNate] | . 0.5.0 / 2012-02-02 . Added: humanize diffs. Closes #8 | Added debug.disable() to the CS variant | Removed padding. Closes #10 | Fixed: persist client-side variant again. Closes #9 | . 0.4.0 / 2012-02-01 . Added browser variant support for older browsers [TooTallNate] | Added debug.enable(&#39;project:*&#39;) to browser variant [TooTallNate] | Added padding to diff (moved it to the right) | . 0.3.0 / 2012-01-26 . Added millisecond diff when isatty, otherwise UTC string | . 0.2.0 / 2012-01-22 . Added wildcard support | . 0.1.0 / 2011-12-02 . Added: remove colors unless stderr isatty [TooTallNate] | . 0.0.1 / 2010-01-03 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/send/node_modules/debug/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/send/node_modules/debug/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page75": {
          "title": "1.15.0 / 2022-03-24",
          "content": "1.15.0 / 2022-03-24 . deps: send@0.18.0 Fix emitted 416 error missing headers property | Limit the headers removed for 304 response | deps: depd@2.0.0 | deps: destroy@1.2.0 | deps: http-errors@2.0.0 | deps: on-finished@2.4.1 | deps: statuses@2.0.1 | . | . 1.14.2 / 2021-12-15 . deps: send@0.17.2 deps: http-errors@1.8.1 | deps: ms@2.1.3 | pref: ignore empty http tokens | . | . 1.14.1 / 2019-05-10 . Set stricter CSP header in redirect response | deps: send@0.17.1 deps: range-parser@~1.2.1 | . | . 1.14.0 / 2019-05-07 . deps: parseurl@~1.3.3 | deps: send@0.17.0 deps: http-errors@~1.7.2 | deps: mime@1.6.0 | deps: ms@2.1.1 | deps: statuses@~1.5.0 | perf: remove redundant path.normalize call | . | . 1.13.2 / 2018-02-07 . Fix incorrect end tag in redirects | deps: encodeurl@~1.0.2 Fix encoding % as last character | . | deps: send@0.16.2 deps: depd@~1.1.2 | deps: encodeurl@~1.0.2 | deps: statuses@~1.4.0 | . | . 1.13.1 / 2017-09-29 . Fix regression when root is incorrectly set to a file | deps: send@0.16.1 | . 1.13.0 / 2017-09-27 . deps: send@0.16.0 Add 70 new types for file extensions | Add immutable option | Fix missing &lt;/html&gt; in default error &amp; redirects | Set charset as “UTF-8” for .js and .json | Use instance methods on steam to check for listeners | deps: mime@1.4.1 | perf: improve path validation speed | . | . 1.12.6 / 2017-09-22 . deps: send@0.15.6 deps: debug@2.6.9 | perf: improve If-Match token parsing | . | perf: improve slash collapsing | . 1.12.5 / 2017-09-21 . deps: parseurl@~1.3.2 perf: reduce overhead for full URLs | perf: unroll the “fast-path” RegExp | . | deps: send@0.15.5 Fix handling of modified headers with invalid dates | deps: etag@~1.8.1 | deps: fresh@0.5.2 | . | . 1.12.4 / 2017-08-05 . deps: send@0.15.4 deps: debug@2.6.8 | deps: depd@~1.1.1 | deps: http-errors@~1.6.2 | . | . 1.12.3 / 2017-05-16 . deps: send@0.15.3 deps: debug@2.6.7 | . | . 1.12.2 / 2017-04-26 . deps: send@0.15.2 deps: debug@2.6.4 | . | . 1.12.1 / 2017-03-04 . deps: send@0.15.1 Fix issue when Date.parse does not return NaN on invalid date | Fix strict violation in broken environments | . | . 1.12.0 / 2017-02-25 . Send complete HTML document in redirect response | Set default CSP header in redirect response | deps: send@0.15.0 Fix false detection of no-cache request directive | Fix incorrect result when If-None-Match has both * and ETags | Fix weak ETag matching to match spec | Remove usage of res._headers private field | Support If-Match and If-Unmodified-Since headers | Use res.getHeaderNames() when available | Use res.headersSent when available | deps: debug@2.6.1 | deps: etag@~1.8.0 | deps: fresh@0.5.0 | deps: http-errors@~1.6.1 | . | . 1.11.2 / 2017-01-23 . deps: send@0.14.2 deps: http-errors@~1.5.1 | deps: ms@0.7.2 | deps: statuses@~1.3.1 | . | . 1.11.1 / 2016-06-10 . Fix redirect error when req.url contains raw non-URL characters | deps: send@0.14.1 | . 1.11.0 / 2016-06-07 . Use status code 301 for redirects | deps: send@0.14.0 Add acceptRanges option | Add cacheControl option | Attempt to combine multiple ranges into single range | Correctly inherit from Stream class | Fix Content-Range header in 416 responses when using start/end options | Fix Content-Range header missing from default 416 responses | Ignore non-byte Range headers | deps: http-errors@~1.5.0 | deps: range-parser@~1.2.0 | deps: statuses@~1.3.0 | perf: remove argument reassignment | . | . 1.10.3 / 2016-05-30 . deps: send@0.13.2 Fix invalid Content-Type header when send.mime.default_type unset | . | . 1.10.2 / 2016-01-19 . deps: parseurl@~1.3.1 perf: enable strict mode | . | . 1.10.1 / 2016-01-16 . deps: escape-html@~1.0.3 perf: enable strict mode | perf: optimize string replacement | perf: use faster string coercion | . | deps: send@0.13.1 deps: depd@~1.1.0 | deps: destroy@~1.0.4 | deps: escape-html@~1.0.3 | deps: range-parser@~1.0.3 | . | . 1.10.0 / 2015-06-17 . Add fallthrough option Allows declaring this middleware is the final destination | Provides better integration with Express patterns | . | Fix reading options from options prototype | Improve the default redirect response headers | deps: escape-html@1.0.2 | deps: send@0.13.0 Allow Node.js HTTP server to set Date response header | Fix incorrectly removing Content-Location on 304 response | Improve the default redirect response headers | Send appropriate headers on default error response | Use http-errors for standard emitted errors | Use statuses instead of http module for status messages | deps: escape-html@1.0.2 | deps: etag@~1.7.0 | deps: fresh@0.3.0 | deps: on-finished@~2.3.0 | perf: enable strict mode | perf: remove unnecessary array allocations | . | perf: enable strict mode | perf: remove argument reassignment | . 1.9.3 / 2015-05-14 . deps: send@0.12.3 deps: debug@~2.2.0 | deps: depd@~1.0.1 | deps: etag@~1.6.0 | deps: ms@0.7.1 | deps: on-finished@~2.2.1 | . | . 1.9.2 / 2015-03-14 . deps: send@0.12.2 Throw errors early for invalid extensions or index options | deps: debug@~2.1.3 | . | . 1.9.1 / 2015-02-17 . deps: send@0.12.1 Fix regression sending zero-length files | . | . 1.9.0 / 2015-02-16 . deps: send@0.12.0 Always read the stat size from the file | Fix mutating passed-in options | deps: mime@1.3.4 | . | . 1.8.1 / 2015-01-20 . Fix redirect loop in Node.js 0.11.14 | deps: send@0.11.1 Fix root path disclosure | . | . 1.8.0 / 2015-01-05 . deps: send@0.11.0 deps: debug@~2.1.1 | deps: etag@~1.5.1 | deps: ms@0.7.0 | deps: on-finished@~2.2.0 | . | . 1.7.2 / 2015-01-02 . Fix potential open redirect when mounted at root | . 1.7.1 / 2014-10-22 . deps: send@0.10.1 deps: on-finished@~2.1.1 | . | . 1.7.0 / 2014-10-15 . deps: send@0.10.0 deps: debug@~2.1.0 | deps: depd@~1.0.0 | deps: etag@~1.5.0 | . | . 1.6.5 / 2015-02-04 . Fix potential open redirect when mounted at root Back-ported from v1.7.2 | . | . 1.6.4 / 2014-10-08 . Fix redirect loop when index file serving disabled | . 1.6.3 / 2014-09-24 . deps: send@0.9.3 deps: etag@~1.4.0 | . | . 1.6.2 / 2014-09-15 . deps: send@0.9.2 deps: depd@0.4.5 | deps: etag@~1.3.1 | deps: range-parser@~1.0.2 | . | . 1.6.1 / 2014-09-07 . deps: send@0.9.1 deps: fresh@0.2.4 | . | . 1.6.0 / 2014-09-07 . deps: send@0.9.0 Add lastModified option | Use etag to generate ETag header | deps: debug@~2.0.0 | . | . 1.5.4 / 2014-09-04 . deps: send@0.8.5 Fix a path traversal issue when using root | Fix malicious path detection for empty string path | . | . 1.5.3 / 2014-08-17 . deps: send@0.8.3 | . 1.5.2 / 2014-08-14 . deps: send@0.8.2 Work around fd leak in Node.js 0.10 for fs.ReadStream | . | . 1.5.1 / 2014-08-09 . Fix parsing of weird req.originalUrl values | deps: parseurl@~1.3.0 | deps: utils-merge@1.0.0 | . 1.5.0 / 2014-08-05 . deps: send@0.8.1 Add extensions option | . | . 1.4.4 / 2014-08-04 . deps: send@0.7.4 Fix serving index files without root dir | . | . 1.4.3 / 2014-07-29 . deps: send@0.7.3 Fix incorrect 403 on Windows and Node.js 0.11 | . | . 1.4.2 / 2014-07-27 . deps: send@0.7.2 deps: depd@0.4.4 | . | . 1.4.1 / 2014-07-26 . deps: send@0.7.1 deps: depd@0.4.3 | . | . 1.4.0 / 2014-07-21 . deps: parseurl@~1.2.0 Cache URLs based on original value | Remove no-longer-needed URL mis-parse work-around | Simplify the “fast-path” RegExp | . | deps: send@0.7.0 Add dotfiles option | deps: debug@1.0.4 | deps: depd@0.4.2 | . | . 1.3.2 / 2014-07-11 . deps: send@0.6.0 Cap maxAge value to 1 year | deps: debug@1.0.3 | . | . 1.3.1 / 2014-07-09 . deps: parseurl@~1.1.3 faster parsing of href-only URLs | . | . 1.3.0 / 2014-06-28 . Add setHeaders option | Include HTML link in redirect response | deps: send@0.5.0 Accept string for maxAge (converted by ms) | . | . 1.2.3 / 2014-06-11 . deps: send@0.4.3 Do not throw un-catchable error on file open race condition | Use escape-html for HTML escaping | deps: debug@1.0.2 | deps: finished@1.2.2 | deps: fresh@0.2.2 | . | . 1.2.2 / 2014-06-09 . deps: send@0.4.2 fix “event emitter leak” warnings | deps: debug@1.0.1 | deps: finished@1.2.1 | . | . 1.2.1 / 2014-06-02 . use escape-html for escaping | deps: send@0.4.1 Send max-age in Cache-Control in correct format | . | . 1.2.0 / 2014-05-29 . deps: send@0.4.0 Calculate ETag with md5 for reduced collisions | Fix wrong behavior when index file matches directory | Ignore stream errors after request ends | Skip directories in index file search | deps: debug@0.8.1 | . | . 1.1.0 / 2014-04-24 . Accept options directly to send module | deps: send@0.3.0 | . 1.0.4 / 2014-04-07 . Resolve relative paths at middleware setup | Use parseurl to parse the URL from request | . 1.0.3 / 2014-03-20 . Do not rely on connect-like environments | . 1.0.2 / 2014-03-06 . deps: send@0.2.0 | . 1.0.1 / 2014-03-05 . Add mime export for back-compat | . 1.0.0 / 2014-03-05 . Genesis from connect | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/serve-static/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/serve-static/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page76": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v1.1.1 - 2023-10-19 . Fixed . [Fix] move define-data-property to runtime deps #2 | . Commits . [Dev Deps] update object-inspect; add missing call-bind 5aecf79 | . v1.1.0 - 2023-10-13 . Commits . [New] add env entry point 475c87a | [Tests] add coverage with nyc 14f0bf8 | [eslint] fix linting failure fb516f9 | [Deps] update define-data-property d727e7c | . v1.0.1 - 2023-10-12 . Commits . [Refactor] use get-intrinsic, since it‘s in the dep graph anyways 278a954 | [meta] add exports 72acfe5 | . v1.0.0 - 2023-10-12 . Commits . Initial implementation, tests, readme fce14e1 | Initial commit ca7ba85 | npm init 6a7e493 | Only apps should have lockfiles d2bf6c4 | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/set-function-length/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/set-function-length/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page77": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. . The format is based on Keep a Changelog and this project adheres to Semantic Versioning. . v1.0.4 - 2020-12-29 . Commits . [Tests] migrate tests to Github Actions 10909cb | [Refactor] Use a linked list rather than an array, and move accessed nodes to the beginning 195613f | [meta] do not publish github action workflow files 290ec29 | [Tests] run nyc on all tests; use tape runner ea6d030 | [actions] add “Allow Edits” workflow d464d8f | [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog 02daca8 | [Refactor] use call-bind and get-intrinsic instead of es-abstract e09d481 | [Deps] update object.assign ee83aa8 | [actions] update rebase action to use checkout v2 7726b0b | . v1.0.3 - 2020-08-23 . Commits . [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, tape 1f10561 | [Deps] update es-abstract, object-inspect bc20159 | [Dev Deps] update @ljharb/eslint-config, tape b9b2b22 | [Dev Deps] update eslint, @ljharb/eslint-config, tape 7055ab4 | [Dev Deps] update auto-changelog; add aud d278c37 | [actions] switch Automatic Rebase workflow to pull_request_target event 3bcf982 | [Tests] only audit prod deps 18d01c4 | [Deps] update es-abstract 6ab096d | [Dev Deps] update tape 9dc174c | [Deps] update es-abstract 431d0f0 | [Deps] update es-abstract 49869fd | [meta] Add package.json to package’s exports 77d9cdc | . v1.0.2 - 2019-12-20 . Commits . [Dev Deps] update @ljharb/eslint-config, tape 4a526df | [Deps] update es-abstract d4f6e62 | . v1.0.1 - 2019-12-01 . Commits . [Fix] add missing “exports” d212907 | . v1.0.0 - 2019-12-01 . Commits . Initial implementation dbebd3a | Initial tests 73bdefe | Initial commit 43c03e1 | npm init 5c090a7 | [meta] add auto-changelog a5c4e56 | [actions] add automatic rebasing / merge commit blocking bab1683 | [meta] add funding field; create FUNDING.yml 63d7aea | [Tests] add npm run lint 46a5a81 | Only apps should have lockfiles 8b16b03 | [meta] add safe-publish-latest 2f098ef | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/side-channel/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/side-channel/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page78": {
          "title": "2.0.1 / 2021-01-03",
          "content": "2.0.1 / 2021-01-03 . Fix returning values from Object.prototype | . 2.0.0 / 2020-04-19 . Drop support for Node.js 0.6 | Fix messaging casing of 418 I&#39;m a Teapot | Remove code 306 | Remove status[code] exports; use status.message[code] | Remove status[msg] exports; use status.code[msg] | Rename 425 Unordered Collection to standard 425 Too Early | Rename STATUS_CODES export to message | Return status message for statuses(code) when given code | . 1.5.0 / 2018-03-27 . Add 103 Early Hints | . 1.4.0 / 2017-10-20 . Add STATUS_CODES export | . 1.3.1 / 2016-11-11 . Fix return type in JSDoc | . 1.3.0 / 2016-05-17 . Add 421 Misdirected Request | perf: enable strict mode | . 1.2.1 / 2015-02-01 . Fix message for status 451 451 Unavailable For Legal Reasons | . | . 1.2.0 / 2014-09-28 . Add 208 Already Repored | Add 226 IM Used | Add 306 (Unused) | Add 415 Unable For Legal Reasons | Add 508 Loop Detected | . 1.1.1 / 2014-09-24 . Add missing 308 to codes.json | . 1.1.0 / 2014-09-21 . Add codes.json for universal support | . 1.0.4 / 2014-08-20 . Package cleanup | . 1.0.3 / 2014-06-08 . Add 308 to .redirect category | . 1.0.2 / 2014-03-13 . Add .retry category | . 1.0.1 / 2014-03-12 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/statuses/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/statuses/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page79": {
          "title": "1.0.1 / 2021-11-14",
          "content": "1.0.1 / 2021-11-14 . pref: enable strict mode | . 1.0.0 / 2018-07-09 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/toidentifier/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/toidentifier/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page80": {
          "title": "1.6.18 / 2019-04-26",
          "content": "1.6.18 / 2019-04-26 . Fix regression passing request object to typeis.is | . 1.6.17 / 2019-04-25 . deps: mime-types@~2.1.24 Add Apple file extensions from IANA | Add extension .csl to application/vnd.citationstyles.style+xml | Add extension .es to application/ecmascript | Add extension .nq to application/n-quads | Add extension .nt to application/n-triples | Add extension .owl to application/rdf+xml | Add extensions .siv and .sieve to application/sieve | Add extensions from IANA for image/* types | Add extensions from IANA for model/* types | Add extensions to HEIC image types | Add new mime types | Add text/mdx with extension .mdx | . | perf: prevent internal throw on invalid type | . 1.6.16 / 2018-02-16 . deps: mime-types@~2.1.18 Add application/raml+yaml with extension .raml | Add application/wasm with extension .wasm | Add text/shex with extension .shex | Add extensions for JPEG-2000 images | Add extensions from IANA for message/* types | Add extension .mjs to application/javascript | Add extension .wadl to application/vnd.sun.wadl+xml | Add extension .gz to application/gzip | Add glTF types and extensions | Add new mime types | Update extensions .md and .markdown to be text/markdown | Update font MIME types | Update text/hjson to registered application/hjson | . | . 1.6.15 / 2017-03-31 . deps: mime-types@~2.1.15 Add new mime types | . | . 1.6.14 / 2016-11-18 . deps: mime-types@~2.1.13 Add new mime types | . | . 1.6.13 / 2016-05-18 . deps: mime-types@~2.1.11 Add new mime types | . | . 1.6.12 / 2016-02-28 . deps: mime-types@~2.1.10 Add new mime types | Fix extension of application/dash+xml | Update primary extension for audio/mp4 | . | . 1.6.11 / 2016-01-29 . deps: mime-types@~2.1.9 Add new mime types | . | . 1.6.10 / 2015-12-01 . deps: mime-types@~2.1.8 Add new mime types | . | . 1.6.9 / 2015-09-27 . deps: mime-types@~2.1.7 Add new mime types | . | . 1.6.8 / 2015-09-04 . deps: mime-types@~2.1.6 Add new mime types | . | . 1.6.7 / 2015-08-20 . Fix type error when given invalid type to match against | deps: mime-types@~2.1.5 Add new mime types | . | . 1.6.6 / 2015-07-31 . deps: mime-types@~2.1.4 Add new mime types | . | . 1.6.5 / 2015-07-16 . deps: mime-types@~2.1.3 Add new mime types | . | . 1.6.4 / 2015-07-01 . deps: mime-types@~2.1.2 Add new mime types | . | perf: enable strict mode | perf: remove argument reassignment | . 1.6.3 / 2015-06-08 . deps: mime-types@~2.1.1 Add new mime types | . | perf: reduce try block size | perf: remove bitwise operations | . 1.6.2 / 2015-05-10 . deps: mime-types@~2.0.11 Add new mime types | . | . 1.6.1 / 2015-03-13 . deps: mime-types@~2.0.10 Add new mime types | . | . 1.6.0 / 2015-02-12 . fix false-positives in hasBody Transfer-Encoding check | support wildcard for both type and subtype (*/*) | . 1.5.7 / 2015-02-09 . fix argument reassignment | deps: mime-types@~2.0.9 Add new mime types | . | . 1.5.6 / 2015-01-29 . deps: mime-types@~2.0.8 Add new mime types | . | . 1.5.5 / 2014-12-30 . deps: mime-types@~2.0.7 Add new mime types | Fix missing extensions | Fix various invalid MIME type entries | Remove example template MIME types | deps: mime-db@~1.5.0 | . | . 1.5.4 / 2014-12-10 . deps: mime-types@~2.0.4 Add new mime types | deps: mime-db@~1.3.0 | . | . 1.5.3 / 2014-11-09 . deps: mime-types@~2.0.3 Add new mime types | deps: mime-db@~1.2.0 | . | . 1.5.2 / 2014-09-28 . deps: mime-types@~2.0.2 Add new mime types | deps: mime-db@~1.1.0 | . | . 1.5.1 / 2014-09-07 . Support Node.js 0.6 | deps: media-typer@0.3.0 | deps: mime-types@~2.0.1 Support Node.js 0.6 | . | . 1.5.0 / 2014-09-05 . fix hasbody to be true for content-length: 0 | . 1.4.0 / 2014-09-02 . update mime-types | . 1.3.2 / 2014-06-24 . use ~ range on mime-types | . 1.3.1 / 2014-06-19 . fix global variable leak | . 1.3.0 / 2014-06-19 . improve type parsing . invalid media type never matches | media type not case-sensitive | extra LWS does not affect results | . | . 1.2.2 / 2014-06-19 . fix behavior on unknown type argument | . 1.2.1 / 2014-06-03 . switch dependency from mime to mime-types@1.0.0 | . 1.2.0 / 2014-05-11 . support suffix matching: . +json matches application/vnd+json | */vnd+json matches application/vnd+json | application/*+json matches application/vnd+json | . | . 1.1.0 / 2014-04-12 . add non-array values support | expose internal utilities: . .is() | .hasBody() | .normalize() | .match() | . | . 1.0.1 / 2014-03-30 . add multipart as a shorthand | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/type-is/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/type-is/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page81": {
          "title": "1.0.0 / 2015-06-14",
          "content": "1.0.0 / 2015-06-14 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/unpipe/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/unpipe/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page82": {
          "title": "Changelog",
          "content": "Changelog . All notable changes to this project will be documented in this file. See standard-version for commit guidelines. . 9.0.1 (2023-09-12) . build . Fix CI to work with Node.js 20.x | . 9.0.0 (2022-09-05) . ⚠ BREAKING CHANGES . Drop Node.js 10.x support. This library always aims at supporting one EOLed LTS release which by this time now is 12.x which has reached EOL 30 Apr 2022. . | Remove the minified UMD build from the package. . Minified code is hard to audit and since this is a widely used library it seems more appropriate nowadays to optimize for auditability than to ship a legacy module format that, at best, serves educational purposes nowadays. . For production browser use cases, users should be using a bundler. For educational purposes, today’s online sandboxes like replit.com offer convenient ways to load npm modules, so the use case for UMD through repos like UNPKG or jsDelivr has largely vanished. . | Drop IE 11 and Safari 10 support. Drop support for browsers that don’t correctly implement const/let and default arguments, and no longer transpile the browser build to ES2015. . This also removes the fallback on msCrypto instead of the crypto API. . Browser tests are run in the first supported version of each supported browser and in the latest (as of this commit) version available on Browserstack. . | . Features . optimize uuid.v1 by 1.3x uuid.v4 by 4.3x (430%) (#597) (3a033f6) | remove UMD build (#645) (e948a0f), closes #620 | use native crypto.randomUUID when available (#600) (c9e076c) | . Bug Fixes . add Jest/jsdom compatibility (#642) (16f9c46) | change default export to named function (#545) (c57bc5a) | handle error when parameter is not set in v3 and v5 (#622) (fcd7388) | run npm audit fix (#644) (04686f5) | upgrading from uuid3 broken link (#568) (1c849da) | . build . drop Node.js 8.x from babel transpile target (#603) (aa11485) | drop support for legacy browsers (IE11, Safari 10) (#604) (0f433e5) . | drop node 10.x to upgrade dev dependencies (#653) (28a5712), closes #643 | . 8.3.2 (2020-12-08) . Bug Fixes . lazy load getRandomValues (#537) (16c8f6d), closes #536 | . 8.3.1 (2020-10-04) . Bug Fixes . support expo&gt;=39.0.0 (#515) (c65a0f3), closes #375 | . 8.3.0 (2020-07-27) . Features . add parse/stringify/validate/version/NIL APIs (#479) (0e6c10b), closes #475 #478 #480 #481 #180 | . 8.2.0 (2020-06-23) . Features . improve performance of v1 string representation (#453) (0ee0b67) | remove deprecated v4 string parameter (#454) (88ce3ca), closes #437 | support jspm (#473) (e9f2587) | . Bug Fixes . prepare package exports for webpack 5 (#468) (8d6e6a5) | . 8.1.0 (2020-05-20) . Features . improve v4 performance by reusing random number array (#435) (bf4af0d) | optimize V8 performance of bytesToUuid (#434) (e156415) | . Bug Fixes . export package.json required by react-native and bundlers (#449) (be1c8fe), closes ai/nanoevents#44 #444 | . 8.0.0 (2020-04-29) . ⚠ BREAKING CHANGES . For native ECMAScript Module (ESM) usage in Node.js only named exports are exposed, there is no more default export. . -import uuid from &#39;uuid&#39;; -console.log(uuid.v4()); // -&gt; &#39;cd6c3b08-0adc-4f4b-a6ef-36087a1c9869&#39; +import { v4 as uuidv4 } from &#39;uuid&#39;; +uuidv4(); // ⇨ &#39;9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d&#39; . | Deep requiring specific algorithms of this library like require(&#39;uuid/v4&#39;), which has been deprecated in uuid@7, is no longer supported. . Instead use the named exports that this module exports. . For ECMAScript Modules (ESM): . -import uuidv4 from &#39;uuid/v4&#39;; +import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); . For CommonJS: . -const uuidv4 = require(&#39;uuid/v4&#39;); +const { v4: uuidv4 } = require(&#39;uuid&#39;); uuidv4(); . | . Features . native Node.js ES Modules (wrapper approach) (#423) (2d9f590), closes #245 #419 #342 | remove deep requires (#426) (daf72b8) | . Bug Fixes . add CommonJS syntax example to README quickstart section (#417) (e0ec840) | . 7.0.3 (2020-03-31) . Bug Fixes . make deep require deprecation warning work in browsers (#409) (4b71107), closes #408 | . 7.0.2 (2020-03-04) . Bug Fixes . make access to msCrypto consistent (#393) (8bf2a20) | simplify link in deprecation warning (#391) (bb2c8e4) | update links to match content in readme (#386) (44f2f86) | . 7.0.1 (2020-02-25) . Bug Fixes . clean up esm builds for node and browser (#383) (59e6a49) | provide browser versions independent from module system (#380) (4344a22), closes #378 | . 7.0.0 (2020-02-24) . ⚠ BREAKING CHANGES . The default export, which used to be the v4() method but which was already discouraged in v3.x of this library, has been removed. | Explicitly note that deep imports of the different uuid version functions are deprecated and no longer encouraged and that ECMAScript module named imports should be used instead. Emit a deprecation warning for people who deep-require the different algorithm variants. | Remove builtin support for insecure random number generators in the browser. Users who want that will have to supply their own random number generator function. | Remove support for generating v3 and v5 UUIDs in Node.js&lt;4.x | Convert code base to ECMAScript Modules (ESM) and release CommonJS build for node and ESM build for browser bundlers. | . Features . add UMD build to npm package (#357) (4e75adf), closes #345 | add various es module and CommonJS examples (b238510) | ensure that docs are up-to-date in CI (ee5e77d) | hybrid CommonJS &amp; ECMAScript modules build (a3f078f) | remove insecure fallback random number generator (3a5842b), closes #173 | remove support for pre Node.js v4 Buffer API (#356) (b59b5c5) | rename repository to github:uuidjs/uuid (#351) (c37a518), closes #338 | . Bug Fixes . add deep-require proxies for local testing and adjust tests (#365) (7fedc79) | add note about removal of default export (#372) (12749b7), closes #370 | deprecated deep requiring of the different algorithm versions (#361) (c0bdf15) | . 3.4.0 (2020-01-16) . Features . rename repository to github:uuidjs/uuid (#351) (e2d7314), closes #338 | . 3.3.3 (2019-08-19) . Bug Fixes . no longer run ci tests on node v4 | upgrade dependencies | . 3.3.2 (2018-06-28) . Bug Fixes . typo (305d877) | . 3.3.1 (2018-06-28) . Bug Fixes . fix #284 by setting function name in try-catch (f2a60f2) | . 3.3.0 (2018-06-22) . Bug Fixes . assignment to readonly property to allow running in strict mode (#270) (d062fdc) | fix #229 (c9684d4) | Get correct version of IE11 crypto (#274) (153d331) | mem issue when generating uuid (#267) (c47702c) | . Features . enforce Conventional Commit style commit messages (#282) (cc9a182) | . 3.2.1 (2018-01-16) . Bug Fixes . use msCrypto if available. Fixes #241 (#247) (1fef18b) | . 3.2.0 (2018-01-16) . Bug Fixes . remove mistakenly added typescript dependency, rollback version (standard-version will auto-increment) (09fa824) | use msCrypto if available. Fixes #241 (#247) (1fef18b) | . Features . Add v3 Support (#217) (d94f726) | . 3.1.0 (2017-06-17) . Bug Fixes . (fix) Add .npmignore file to exclude test/ and other non-essential files from packing. (#183) | Fix typo (#178) | Simple typo fix (#165) | . Features . v5 support in CLI (#197) | V5 support (#188) | . 3.0.1 (2016-11-28) . split uuid versions into separate files | . 3.0.0 (2016-11-17) . remove .parse and .unparse | . 2.0.0 . Removed uuid.BufferClass | . 1.4.0 . Improved module context detection | Removed public RNG functions | . 1.3.2 . Improve tests and handling of v1() options (Issue #24) | Expose RNG option to allow for perf testing with different generators | . 1.3.0 . Support for version 1 ids, thanks to @ctavan! | Support for node.js crypto API | De-emphasizing performance in favor of a) cryptographic quality PRNGs where available and b) more manageable code | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/uuid/CHANGELOG.html",
          "relUrl": "/node_backend_Trystan/node_modules/uuid/CHANGELOG.html",
          "date": ""
      }
      
  

  
      ,"page83": {
          "title": "1.1.2 / 2017-09-23",
          "content": "1.1.2 / 2017-09-23 . perf: improve header token parsing speed | . 1.1.1 / 2017-03-20 . perf: hoist regular expression | . 1.1.0 / 2015-09-29 . Only accept valid field names in the field argument Ensures the resulting string is a valid HTTP header value | . | . 1.0.1 / 2015-07-08 . Fix setting empty header from empty field | perf: enable strict mode | perf: remove argument reassignments | . 1.0.0 / 2014-08-10 . Accept valid Vary header string as field | Add vary.append for low-level string manipulation | Move to jshttp orgainzation | . 0.1.0 / 2014-06-05 . Support array of fields to set | . 0.0.0 / 2014-06-04 . Initial release | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/vary/HISTORY.html",
          "relUrl": "/node_backend_Trystan/node_modules/vary/HISTORY.html",
          "date": ""
      }
      
  

  
      ,"page84": {
          "title": "Emitter",
          "content": "Emitter . Event emitter component. . Installation . $ component install component/emitter . API . Emitter(obj) . The Emitter may also be used as a mixin. For example a “plain” object may become an emitter, or you may extend an existing prototype. . As an Emitter instance: . var Emitter = require(&#39;emitter&#39;); var emitter = new Emitter; emitter.emit(&#39;something&#39;); . As a mixin: . var Emitter = require(&#39;emitter&#39;); var user = { name: &#39;tobi&#39; }; Emitter(user); user.emit(&#39;im a user&#39;); . As a prototype mixin: . var Emitter = require(&#39;emitter&#39;); Emitter(User.prototype); . Emitter#on(event, fn) . Register an event handler fn. . Emitter#once(event, fn) . Register a single-shot event handler fn, removed immediately after it is invoked the first time. . Emitter#off(event, fn) . Pass event and fn to remove a listener. | Pass event to remove all listeners on that event. | Pass nothing to remove all listeners on all events. | . Emitter#emit(event, …) . Emit an event with variable option args. . Emitter#listeners(event) . Return an array of callbacks, or an empty array. . Emitter#hasListeners(event) . Check if this emitter has event handlers. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/@socket.io/component-emitter/",
          "relUrl": "/node_backend/node_modules/@socket.io/component-emitter/",
          "date": ""
      }
      
  

  
      ,"page85": {
          "title": "Installation",
          "content": "Installation . npm install --save @types/cookie . Summary . This package contains type definitions for cookie (https://github.com/jshttp/cookie). . Details . Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/cookie. . Additional Details . Last updated: Tue, 06 Jul 2021 20:32:30 GMT | Dependencies: none | Global values: none | . Credits . These definitions were written by Pine Mizune, and Piotr Błażejewicz. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/@types/cookie/",
          "relUrl": "/node_backend/node_modules/@types/cookie/",
          "date": ""
      }
      
  

  
      ,"page86": {
          "title": "Installation",
          "content": "Installation . npm install --save @types/cors . Summary . This package contains type definitions for cors (https://github.com/expressjs/cors/). . Details . Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/cors. . index.d.ts . /// &lt;reference types=&quot;node&quot; /&gt; import { IncomingHttpHeaders } from &quot;http&quot;; type StaticOrigin = boolean | string | RegExp | Array&lt;boolean | string | RegExp&gt;; type CustomOrigin = ( requestOrigin: string | undefined, callback: (err: Error | null, origin?: StaticOrigin) =&gt; void, ) =&gt; void; declare namespace e { interface CorsRequest { method?: string | undefined; headers: IncomingHttpHeaders; } interface CorsOptions { /** * @default &#39;*&#39;&#39; */ origin?: StaticOrigin | CustomOrigin | undefined; /** * @default &#39;GET,HEAD,PUT,PATCH,POST,DELETE&#39; */ methods?: string | string[] | undefined; allowedHeaders?: string | string[] | undefined; exposedHeaders?: string | string[] | undefined; credentials?: boolean | undefined; maxAge?: number | undefined; /** * @default false */ preflightContinue?: boolean | undefined; /** * @default 204 */ optionsSuccessStatus?: number | undefined; } type CorsOptionsDelegate&lt;T extends CorsRequest = CorsRequest&gt; = ( req: T, callback: (err: Error | null, options?: CorsOptions) =&gt; void, ) =&gt; void; } declare function e&lt;T extends e.CorsRequest = e.CorsRequest&gt;( options?: e.CorsOptions | e.CorsOptionsDelegate&lt;T&gt;, ): ( req: T, res: { statusCode?: number | undefined; setHeader(key: string, value: string): any; end(): any; }, next: (err?: any) =&gt; any, ) =&gt; void; export = e; . Additional Details . Last updated: Mon, 20 Nov 2023 23:36:24 GMT | Dependencies: @types/node | . Credits . These definitions were written by Alan Plum, and Gaurav Sharma. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/@types/cors/",
          "relUrl": "/node_backend/node_modules/@types/cors/",
          "date": ""
      }
      
  

  
      ,"page87": {
          "title": "Installation",
          "content": "Installation . npm install --save @types/node . Summary . This package contains type definitions for node (https://nodejs.org/). . Details . Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/node. . Additional Details . Last updated: Tue, 16 Jan 2024 09:07:05 GMT | Dependencies: undici-types | . Credits . These definitions were written by Microsoft TypeScript, Alberto Schiabel, Alvis HT Tang, Andrew Makarov, Benjamin Toueg, Chigozirim C., David Junger, Deividas Bakanas, Eugene Y. Q. Shen, Hannes Magnusson, Huw, Kelvin Jin, Klaus Meinhardt, Lishude, Mariusz Wiktorczyk, Mohsen Azimi, Nicolas Even, Nikita Galkin, Parambir Singh, Sebastian Silbermann, Thomas den Hollander, Wilco Bakker, wwwy3y3, Samuel Ainsworth, Kyle Uehlein, Thanik Bhongbhibhat, Marcin Kopacz, Trivikram Kamat, Junxiao Shi, Ilia Baryshnikov, ExE Boss, Piotr Błażejewicz, Anna Henningsen, Victor Perin, Yongsheng Zhang, NodeJS Contributors, Linus Unnebäck, wafuwafu13, Matteo Collina, and Dmitry Semigradsky. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/@types/node/",
          "relUrl": "/node_backend/node_modules/@types/node/",
          "date": ""
      }
      
  

  
      ,"page88": {
          "title": "accepts",
          "content": "accepts . . Higher level content negotiation based on negotiator. Extracted from koa for general use. . In addition to negotiator, it allows: . Allows types as an array or arguments list, ie ([&#39;text/html&#39;, &#39;application/json&#39;]) as well as (&#39;text/html&#39;, &#39;application/json&#39;). | Allows type shorthands such as json. | Returns false when no types match | Treats non-existent headers as * | . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install accepts . API . var accepts = require(&#39;accepts&#39;) . accepts(req) . Create a new Accepts object for the given req. . .charset(charsets) . Return the first accepted charset. If nothing in charsets is accepted, then false is returned. . .charsets() . Return the charsets that the request accepts, in the order of the client’s preference (most preferred first). . .encoding(encodings) . Return the first accepted encoding. If nothing in encodings is accepted, then false is returned. . .encodings() . Return the encodings that the request accepts, in the order of the client’s preference (most preferred first). . .language(languages) . Return the first accepted language. If nothing in languages is accepted, then false is returned. . .languages() . Return the languages that the request accepts, in the order of the client’s preference (most preferred first). . .type(types) . Return the first accepted type (and it is returned as the same text as what appears in the types array). If nothing in types is accepted, then false is returned. . The types array can contain full MIME types or file extensions. Any value that is not a full MIME types is passed to require(&#39;mime-types&#39;).lookup. . .types() . Return the types that the request accepts, in the order of the client’s preference (most preferred first). . Examples . Simple type negotiation . This simple example shows how to use accepts to return a different typed respond body based on what the client wants to accept. The server lists it’s preferences in order and will get back the best match between the client and server. . var accepts = require(&#39;accepts&#39;) var http = require(&#39;http&#39;) function app (req, res) { var accept = accepts(req) // the order of this list is significant; should be server preferred order switch (accept.type([&#39;json&#39;, &#39;html&#39;])) { case &#39;json&#39;: res.setHeader(&#39;Content-Type&#39;, &#39;application/json&#39;) res.write(&#39;{&quot;hello&quot;:&quot;world!&quot;}&#39;) break case &#39;html&#39;: res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;) res.write(&#39;&lt;b&gt;hello, world!&lt;/b&gt;&#39;) break default: // the fallback is text/plain, so no need to specify it above res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;) res.write(&#39;hello, world!&#39;) break } res.end() } http.createServer(app).listen(3000) . You can test this out with the cURL program: . curl -I -H&#39;Accept: text/html&#39; http://localhost:3000/ . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/accepts/",
          "relUrl": "/node_backend/node_modules/accepts/",
          "date": ""
      }
      
  

  
      ,"page89": {
          "title": "base64id",
          "content": "base64id . Node.js module that generates a base64 id. . Uses crypto.randomBytes when available, falls back to unsafe methods for node.js &lt;= 0.4. . To increase performance, random bytes are buffered to minimize the number of synchronous calls to crypto.randomBytes. . Installation . $ npm install base64id . Usage . var base64id = require(‘base64id’); . var id = base64id.generateId(); .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/base64id/",
          "relUrl": "/node_backend/node_modules/base64id/",
          "date": ""
      }
      
  

  
      ,"page90": {
          "title": "cookie",
          "content": "cookie . . Basic HTTP cookie parser and serializer for HTTP servers. . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install cookie . API . var cookie = require(&#39;cookie&#39;); . cookie.parse(str, options) . Parse an HTTP Cookie header string and returning an object of all cookie name-value pairs. The str argument is the string representing a Cookie header value and options is an optional object containing additional parsing options. . var cookies = cookie.parse(&#39;foo=bar; equation=E%3Dmc%5E2&#39;); // { foo: &#39;bar&#39;, equation: &#39;E=mc^2&#39; } . Options . cookie.parse accepts these properties in the options object. . decode . Specifies a function that will be used to decode a cookie’s value. Since the value of a cookie has a limited character set (and must be a simple string), this function can be used to decode a previously-encoded cookie value into a JavaScript string or other object. . The default function is the global decodeURIComponent, which will decode any URL-encoded sequences into their byte representations. . note if an error is thrown from this function, the original, non-decoded cookie value will be returned as the cookie’s value. . cookie.serialize(name, value, options) . Serialize a cookie name-value pair into a Set-Cookie header string. The name argument is the name for the cookie, the value argument is the value to set the cookie to, and the options argument is an optional object containing additional serialization options. . var setCookie = cookie.serialize(&#39;foo&#39;, &#39;bar&#39;); // foo=bar . Options . cookie.serialize accepts these properties in the options object. . domain . Specifies the value for the Domain Set-Cookie attribute. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain. . encode . Specifies a function that will be used to encode a cookie’s value. Since value of a cookie has a limited character set (and must be a simple string), this function can be used to encode a value into a string suited for a cookie’s value. . The default function is the global encodeURIComponent, which will encode a JavaScript string into UTF-8 byte sequences and then URL-encode any that fall outside of the cookie range. . expires . Specifies the Date object to be the value for the Expires Set-Cookie attribute. By default, no expiration is set, and most clients will consider this a “non-persistent cookie” and will delete it on a condition like exiting a web browser application. . note the cookie storage model specification states that if both expires and maxAge are set, then maxAge takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time. . httpOnly . Specifies the boolean value for the HttpOnly Set-Cookie attribute. When truthy, the HttpOnly attribute is set, otherwise it is not. By default, the HttpOnly attribute is not set. . note be careful when setting this to true, as compliant clients will not allow client-side JavaScript to see the cookie in document.cookie. . maxAge . Specifies the number (in seconds) to be the value for the Max-Age Set-Cookie attribute. The given number will be converted to an integer by rounding down. By default, no maximum age is set. . note the cookie storage model specification states that if both expires and maxAge are set, then maxAge takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time. . path . Specifies the value for the Path Set-Cookie attribute. By default, the path is considered the “default path”. . sameSite . Specifies the boolean or string to be the value for the SameSite Set-Cookie attribute. . true will set the SameSite attribute to Strict for strict same site enforcement. | false will not set the SameSite attribute. | &#39;lax&#39; will set the SameSite attribute to Lax for lax same site enforcement. | &#39;none&#39; will set the SameSite attribute to None for an explicit cross-site cookie. | &#39;strict&#39; will set the SameSite attribute to Strict for strict same site enforcement. | . More information about the different enforcement levels can be found in the specification. . note This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it. . secure . Specifies the boolean value for the Secure Set-Cookie attribute. When truthy, the Secure attribute is set, otherwise it is not. By default, the Secure attribute is not set. . note be careful when setting this to true, as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection. . Example . The following example uses this module in conjunction with the Node.js core HTTP server to prompt a user for their name and display it back on future visits. . var cookie = require(&#39;cookie&#39;); var escapeHtml = require(&#39;escape-html&#39;); var http = require(&#39;http&#39;); var url = require(&#39;url&#39;); function onRequest(req, res) { // Parse the query string var query = url.parse(req.url, true, true).query; if (query &amp;&amp; query.name) { // Set a new cookie with the name res.setHeader(&#39;Set-Cookie&#39;, cookie.serialize(&#39;name&#39;, String(query.name), { httpOnly: true, maxAge: 60 * 60 * 24 * 7 // 1 week })); // Redirect back after setting cookie res.statusCode = 302; res.setHeader(&#39;Location&#39;, req.headers.referer || &#39;/&#39;); res.end(); return; } // Parse the cookies on the request var cookies = cookie.parse(req.headers.cookie || &#39;&#39;); // Get the visitor name set in the cookie var name = cookies.name; res.setHeader(&#39;Content-Type&#39;, &#39;text/html; charset=UTF-8&#39;); if (name) { res.write(&#39;&lt;p&gt;Welcome back, &lt;b&gt;&#39; + escapeHtml(name) + &#39;&lt;/b&gt;!&lt;/p&gt;&#39;); } else { res.write(&#39;&lt;p&gt;Hello, new visitor!&lt;/p&gt;&#39;); } res.write(&#39;&lt;form method=&quot;GET&quot;&gt;&#39;); res.write(&#39;&lt;input placeholder=&quot;enter your name&quot; name=&quot;name&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;Set Name&quot;&gt;&#39;); res.end(&#39;&lt;/form&gt;&#39;); } http.createServer(onRequest).listen(3000); . Testing . $ npm test . Benchmark . $ npm run bench &gt; cookie@0.4.1 bench &gt; node benchmark/index.js node@16.13.1 v8@9.4.146.24-node.14 uv@1.42.0 zlib@1.2.11 brotli@1.0.9 ares@1.18.1 modules@93 nghttp2@1.45.1 napi@8 llhttp@6.0.4 openssl@1.1.1l+quic cldr@39.0 icu@69.1 tz@2021a unicode@13.0 ngtcp2@0.1.0-DEV nghttp3@0.1.0-DEV &gt; node benchmark/parse-top.js cookie.parse - top sites 15 tests completed. parse accounts.google.com x 504,358 ops/sec ±6.55% (171 runs sampled) parse apple.com x 1,369,991 ops/sec ±0.84% (189 runs sampled) parse cloudflare.com x 360,669 ops/sec ±3.75% (182 runs sampled) parse docs.google.com x 521,496 ops/sec ±4.90% (180 runs sampled) parse drive.google.com x 553,514 ops/sec ±0.59% (189 runs sampled) parse en.wikipedia.org x 286,052 ops/sec ±0.62% (188 runs sampled) parse linkedin.com x 178,817 ops/sec ±0.61% (192 runs sampled) parse maps.google.com x 284,585 ops/sec ±0.68% (188 runs sampled) parse microsoft.com x 161,230 ops/sec ±0.56% (192 runs sampled) parse play.google.com x 352,144 ops/sec ±1.01% (181 runs sampled) parse plus.google.com x 275,204 ops/sec ±7.78% (156 runs sampled) parse support.google.com x 339,493 ops/sec ±1.02% (191 runs sampled) parse www.google.com x 286,110 ops/sec ±0.90% (191 runs sampled) parse youtu.be x 548,557 ops/sec ±0.60% (184 runs sampled) parse youtube.com x 545,293 ops/sec ±0.65% (191 runs sampled) &gt; node benchmark/parse.js cookie.parse - generic 6 tests completed. simple x 1,266,646 ops/sec ±0.65% (191 runs sampled) decode x 838,413 ops/sec ±0.60% (191 runs sampled) unquote x 877,820 ops/sec ±0.72% (189 runs sampled) duplicates x 516,680 ops/sec ±0.61% (191 runs sampled) 10 cookies x 156,874 ops/sec ±0.52% (189 runs sampled) 100 cookies x 14,663 ops/sec ±0.53% (191 runs sampled) . References . RFC 6265: HTTP State Management Mechanism | Same-site Cookies | . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/cookie/",
          "relUrl": "/node_backend/node_modules/cookie/",
          "date": ""
      }
      
  

  
      ,"page91": {
          "title": "cors",
          "content": "cors . . CORS is a node.js package for providing a Connect/Express middleware that can be used to enable CORS with various options. . Follow me (@troygoode) on Twitter! . Installation | Usage Simple Usage | Enable CORS for a Single Route | Configuring CORS | Configuring CORS Asynchronously | Enabling CORS Pre-Flight | . | Configuration Options | Demo | License | Author | . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install cors . Usage . Simple Usage (Enable All CORS Requests) . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() app.use(cors()) app.get(&#39;/products/:id&#39;, function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for all origins!&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Enable CORS for a Single Route . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() app.get(&#39;/products/:id&#39;, cors(), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for a Single Route&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Configuring CORS . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() var corsOptions = { origin: &#39;http://example.com&#39;, optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204 } app.get(&#39;/products/:id&#39;, cors(corsOptions), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for only example.com.&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Configuring CORS w/ Dynamic Origin . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() var whitelist = [&#39;http://example1.com&#39;, &#39;http://example2.com&#39;] var corsOptions = { origin: function (origin, callback) { if (whitelist.indexOf(origin) !== -1) { callback(null, true) } else { callback(new Error(&#39;Not allowed by CORS&#39;)) } } } app.get(&#39;/products/:id&#39;, cors(corsOptions), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for a whitelisted domain.&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . If you do not want to block REST tools or server-to-server requests, add a !origin check in the origin function like so: . var corsOptions = { origin: function (origin, callback) { if (whitelist.indexOf(origin) !== -1 || !origin) { callback(null, true) } else { callback(new Error(&#39;Not allowed by CORS&#39;)) } } } . Enabling CORS Pre-Flight . Certain CORS requests are considered ‘complex’ and require an initial OPTIONS request (called the “pre-flight request”). An example of a ‘complex’ CORS request is one that uses an HTTP verb other than GET/HEAD/POST (such as DELETE) or that uses custom headers. To enable pre-flighting, you must add a new OPTIONS handler for the route you want to support: . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() app.options(&#39;/products/:id&#39;, cors()) // enable pre-flight request for DELETE request app.del(&#39;/products/:id&#39;, cors(), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for all origins!&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . You can also enable pre-flight across-the-board like so: . app.options(&#39;*&#39;, cors()) // include before other routes . Configuring CORS Asynchronously . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() var whitelist = [&#39;http://example1.com&#39;, &#39;http://example2.com&#39;] var corsOptionsDelegate = function (req, callback) { var corsOptions; if (whitelist.indexOf(req.header(&#39;Origin&#39;)) !== -1) { corsOptions = { origin: true } // reflect (enable) the requested origin in the CORS response } else { corsOptions = { origin: false } // disable CORS for this request } callback(null, corsOptions) // callback expects two parameters: error and options } app.get(&#39;/products/:id&#39;, cors(corsOptionsDelegate), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for a whitelisted domain.&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Configuration Options . origin: Configures the Access-Control-Allow-Origin CORS header. Possible values: Boolean - set origin to true to reflect the request origin, as defined by req.header(&#39;Origin&#39;), or set it to false to disable CORS. | String - set origin to a specific origin. For example if you set it to &quot;http://example.com&quot; only requests from “http://example.com” will be allowed. | RegExp - set origin to a regular expression pattern which will be used to test the request origin. If it’s a match, the request origin will be reflected. For example the pattern /example .com$/ will reflect any request that is coming from an origin ending with “example.com”. | Array - set origin to an array of valid origins. Each origin can be a String or a RegExp. For example [&quot;http://example1.com&quot;, / .example2 .com$/] will accept any request from “http://example1.com” or from a subdomain of “example2.com”. | Function - set origin to a function implementing some custom logic. The function takes the request origin as the first parameter and a callback (which expects the signature err [object], allow [bool]) as the second. | . | methods: Configures the Access-Control-Allow-Methods CORS header. Expects a comma-delimited string (ex: ‘GET,PUT,POST’) or an array (ex: [&#39;GET&#39;, &#39;PUT&#39;, &#39;POST&#39;]). | allowedHeaders: Configures the Access-Control-Allow-Headers CORS header. Expects a comma-delimited string (ex: ‘Content-Type,Authorization’) or an array (ex: [&#39;Content-Type&#39;, &#39;Authorization&#39;]). If not specified, defaults to reflecting the headers specified in the request’s Access-Control-Request-Headers header. | exposedHeaders: Configures the Access-Control-Expose-Headers CORS header. Expects a comma-delimited string (ex: ‘Content-Range,X-Content-Range’) or an array (ex: [&#39;Content-Range&#39;, &#39;X-Content-Range&#39;]). If not specified, no custom headers are exposed. | credentials: Configures the Access-Control-Allow-Credentials CORS header. Set to true to pass the header, otherwise it is omitted. | maxAge: Configures the Access-Control-Max-Age CORS header. Set to an integer to pass the header, otherwise it is omitted. | preflightContinue: Pass the CORS preflight response to the next handler. | optionsSuccessStatus: Provides a status code to use for successful OPTIONS requests, since some legacy browsers (IE11, various SmartTVs) choke on 204. | . The default configuration is the equivalent of: . { &quot;origin&quot;: &quot;*&quot;, &quot;methods&quot;: &quot;GET,HEAD,PUT,PATCH,POST,DELETE&quot;, &quot;preflightContinue&quot;: false, &quot;optionsSuccessStatus&quot;: 204 } . For details on the effect of each CORS header, read this article on HTML5 Rocks. . Demo . A demo that illustrates CORS working (and not working) using jQuery is available here: http://node-cors-client.herokuapp.com/ . Code for that demo can be found here: . Client: https://github.com/TroyGoode/node-cors-client | Server: https://github.com/TroyGoode/node-cors-server | . License . MIT License . Author . Troy Goode (troygoode@gmail.com) .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/cors/",
          "relUrl": "/node_backend/node_modules/cors/",
          "date": ""
      }
      
  

  
      ,"page92": {
          "title": "debug",
          "content": "debug . . . A tiny JavaScript debugging utility modelled after Node.js core’s debugging technique. Works in Node.js and web browsers. . Installation . $ npm install debug . Usage . debug exposes a function; simply pass this function the name of your module, and it will return a decorated version of console.error for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole. . Example app.js: . var debug = require(&#39;debug&#39;)(&#39;http&#39;) , http = require(&#39;http&#39;) , name = &#39;My App&#39;; // fake app debug(&#39;booting %o&#39;, name); http.createServer(function(req, res){ debug(req.method + &#39; &#39; + req.url); res.end(&#39;hello n&#39;); }).listen(3000, function(){ debug(&#39;listening&#39;); }); // fake worker of some kind require(&#39;./worker&#39;); . Example worker.js: . var a = require(&#39;debug&#39;)(&#39;worker:a&#39;) , b = require(&#39;debug&#39;)(&#39;worker:b&#39;); function work() { a(&#39;doing lots of uninteresting work&#39;); setTimeout(work, Math.random() * 1000); } work(); function workb() { b(&#39;doing some work&#39;); setTimeout(workb, Math.random() * 2000); } workb(); . The DEBUG environment variable is then used to enable these based on space or comma-delimited names. . Here are some examples: . . Windows command prompt notes . CMD . On Windows the environment variable is set using the set command. . set DEBUG=*,-not_this . Example: . set DEBUG=* &amp; node app.js . PowerShell (VS Code default) . PowerShell uses different syntax to set environment variables. . $env:DEBUG = &quot;*,-not_this&quot; . Example: . $env:DEBUG=&#39;app&#39;;node app.js . Then, run the program to be debugged as usual. . npm script example: . &quot;windowsDebug&quot;: &quot;@powershell -Command $env:DEBUG=&#39;*&#39;;node app.js&quot;, . Namespace Colors . Every debug instance has a color generated for it based on its namespace name. This helps when visually parsing the debug output to identify which debug instance a debug line belongs to. . Node.js . In Node.js, colors are enabled when stderr is a TTY. You also should install the supports-color module alongside debug, otherwise debug will only use a small handful of basic colors. . . Web Browser . Colors are also enabled on “Web Inspectors” that understand the %c formatting option. These are WebKit web inspectors, Firefox (since version 31) and the Firebug plugin for Firefox (any version). . . Millisecond diff . When actively developing an application it can be useful to see when the time spent between one debug() call and the next. Suppose for example you invoke debug() before requesting a resource, and after as well, the “+NNNms” will show you how much time was spent between calls. . . When stdout is not a TTY, Date#toISOString() is used, making it more useful for logging the debug information as shown below: . . Conventions . If you’re using this in one or more of your libraries, you should use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you should prefix them with your library name and use “:” to separate features. For example “bodyParser” from Connect would then be “connect:bodyParser”. If you append a “*” to the end of your name, it will always be enabled regardless of the setting of the DEBUG environment variable. You can then use it for normal output as well as debug output. . Wildcards . The * character may be used as a wildcard. Suppose for example your library has debuggers named “connect:bodyParser”, “connect:compress”, “connect:session”, instead of listing all three with DEBUG=connect:bodyParser,connect:compress,connect:session, you may simply do DEBUG=connect:*, or to run everything using this module simply use DEBUG=*. . You can also exclude specific debuggers by prefixing them with a “-“ character. For example, DEBUG=*,-connect:* would include all debuggers except those starting with “connect:”. . Environment Variables . When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging: . Name Purpose . DEBUG | Enables/disables specific debugging namespaces. | . DEBUG_HIDE_DATE | Hide date from debug output (non-TTY). | . DEBUG_COLORS | Whether or not to use colors in the debug output. | . DEBUG_DEPTH | Object inspection depth. | . DEBUG_SHOW_HIDDEN | Shows hidden properties on inspected objects. | . Note: The environment variables beginning with DEBUG_ end up being converted into an Options object that gets used with %o/%O formatters. See the Node.js documentation for util.inspect() for the complete list. . Formatters . Debug uses printf-style formatting. Below are the officially supported formatters: . Formatter Representation . %O | Pretty-print an Object on multiple lines. | . %o | Pretty-print an Object all on a single line. | . %s | String. | . %d | Number (both integer and float). | . %j | JSON. Replaced with the string ‘[Circular]’ if the argument contains circular references. | . %% | Single percent sign (‘%’). This does not consume an argument. | . Custom formatters . You can add custom formatters by extending the debug.formatters object. For example, if you wanted to add support for rendering a Buffer as hex with %h, you could do something like: . const createDebug = require(&#39;debug&#39;) createDebug.formatters.h = (v) =&gt; { return v.toString(&#39;hex&#39;) } // …elsewhere const debug = createDebug(&#39;foo&#39;) debug(&#39;this is hex: %h&#39;, new Buffer(&#39;hello world&#39;)) // foo this is hex: 68656c6c6f20776f726c6421 +0ms . Browser Support . You can build a browser-ready script using browserify, or just use the browserify-as-a-service build, if you don’t want to build it yourself. . Debug’s enable state is currently persisted by localStorage. Consider the situation shown below where you have worker:a and worker:b, and wish to debug both. You can enable this using localStorage.debug: . localStorage.debug = &#39;worker:*&#39; . And then refresh the page. . a = debug(&#39;worker:a&#39;); b = debug(&#39;worker:b&#39;); setInterval(function(){ a(&#39;doing some work&#39;); }, 1000); setInterval(function(){ b(&#39;doing some work&#39;); }, 1200); . In Chromium-based web browsers (e.g. Brave, Chrome, and Electron), the JavaScript console will—by default—only show messages logged by debug if the “Verbose” log level is enabled. . . Output streams . By default debug will log to stderr, however this can be configured per-namespace by overriding the log method: . Example stdout.js: . var debug = require(&#39;debug&#39;); var error = debug(&#39;app:error&#39;); // by default stderr is used error(&#39;goes to stderr!&#39;); var log = debug(&#39;app:log&#39;); // set this namespace to log via console.log log.log = console.log.bind(console); // don&#39;t forget to bind to console! log(&#39;goes to stdout&#39;); error(&#39;still goes to stderr!&#39;); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error(&#39;now goes to stdout via console.info&#39;); log(&#39;still goes to stdout, but via console.info now&#39;); . Extend . You can simply extend debugger . const log = require(&#39;debug&#39;)(&#39;auth&#39;); //creates new debug instance with extended namespace const logSign = log.extend(&#39;sign&#39;); const logLogin = log.extend(&#39;login&#39;); log(&#39;hello&#39;); // auth hello logSign(&#39;hello&#39;); //auth:sign hello logLogin(&#39;hello&#39;); //auth:login hello . Set dynamically . You can also enable debug dynamically by calling the enable() method : . let debug = require(&#39;debug&#39;); console.log(1, debug.enabled(&#39;test&#39;)); debug.enable(&#39;test&#39;); console.log(2, debug.enabled(&#39;test&#39;)); debug.disable(); console.log(3, debug.enabled(&#39;test&#39;)); . print : . 1 false 2 true 3 false . Usage : enable(namespaces) namespaces can include modes separated by a colon and wildcards. . Note that calling enable() completely overrides previously set DEBUG variable : . $ DEBUG=foo node -e &#39;var dbg = require(&quot;debug&quot;); dbg.enable(&quot;bar&quot;); console.log(dbg.enabled(&quot;foo&quot;))&#39; =&gt; false . disable() . Will disable all namespaces. The functions returns the namespaces currently enabled (and skipped). This can be useful if you want to disable debugging temporarily without knowing what was enabled to begin with. . For example: . let debug = require(&#39;debug&#39;); debug.enable(&#39;foo:*,-foo:bar&#39;); let namespaces = debug.disable(); debug.enable(namespaces); . Note: There is no guarantee that the string will be identical to the initial enable string, but semantically they will be identical. . Checking whether a debug target is enabled . After you’ve created a debug instance, you can determine whether or not it is enabled by checking the enabled property: . const debug = require(&#39;debug&#39;)(&#39;http&#39;); if (debug.enabled) { // do stuff... } . You can also manually toggle this property to force the debug instance to be enabled or disabled. . Usage in child processes . Due to the way debug detects if the output is a TTY or not, colors are not shown in child processes when stderr is piped. A solution is to pass the DEBUG_COLORS=1 environment variable to the child process. For example: . worker = fork(WORKER_WRAP_PATH, [workerPath], { stdio: [ /* stdin: */ 0, /* stdout: */ &#39;pipe&#39;, /* stderr: */ &#39;pipe&#39;, &#39;ipc&#39;, ], env: Object.assign({}, process.env, { DEBUG_COLORS: 1 // without this settings, colors won&#39;t be shown }), }); worker.stderr.pipe(process.stderr, { end: false }); . Authors . TJ Holowaychuk | Nathan Rajlich | Andrew Rhyne | Josh Junon | . Backers . Support us with a monthly donation and help us continue our activities. [Become a backer] . . Sponsors . Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] . . License . (The MIT License) . Copyright (c) 2014-2017 TJ Holowaychuk &lt;tj@vision-media.ca&gt; Copyright (c) 2018-2021 Josh Junon . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. . THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/debug/",
          "relUrl": "/node_backend/node_modules/debug/",
          "date": ""
      }
      
  

  
      ,"page93": {
          "title": "engine.io-parser",
          "content": "engine.io-parser . . This is the JavaScript parser for the engine.io protocol encoding, shared by both engine.io-client and engine.io. . How to use . Standalone . The parser can encode/decode packets, payloads, and payloads as binary with the following methods: encodePacket, decodePacket, encodePayload, decodePayload. . Example: . const parser = require(&quot;engine.io-parser&quot;); const data = Buffer.from([ 1, 2, 3, 4 ]); parser.encodePacket({ type: &quot;message&quot;, data }, encoded =&gt; { const decodedData = parser.decodePacket(encoded); // decodedData === data }); . With browserify . Engine.IO Parser is a commonjs module, which means you can include it by using require on the browser and package using browserify: . install the parser package . npm install engine.io-parser . | write your app code . const parser = require(&quot;engine.io-parser&quot;); const testBuffer = new Int8Array(10); for (let i = 0; i &lt; testBuffer.length; i++) testBuffer[i] = i; const packets = [{ type: &quot;message&quot;, data: testBuffer.buffer }, { type: &quot;message&quot;, data: &quot;hello&quot; }]; parser.encodePayload(packets, encoded =&gt; { parser.decodePayload(encoded, (packet, index, total) =&gt; { const isLast = index + 1 == total; if (!isLast) { const buffer = new Int8Array(packet.data); // testBuffer } else { const message = packet.data; // &quot;hello&quot; } }); }); . | build your app bundle . $ browserify app.js &gt; bundle.js . | include on your page . &lt;script src=&quot;/path/to/bundle.js&quot;&gt;&lt;/script&gt; . | Features . Runs on browser and node.js seamlessly | Runs inside HTML5 WebWorker | Can encode and decode packets Encodes from/to ArrayBuffer or Blob when in browser, and Buffer or ArrayBuffer in Node | . | . API . Note: cb(type) means the type is a callback function that contains a parameter of type type when called. . Node . encodePacket Encodes a packet. | Parameters Object: the packet to encode, has type and data. data: can be a String, Number, Buffer, ArrayBuffer | . | Boolean: binary support | Function: callback, returns the encoded packet (cb(String)) | . | . | decodePacket Decodes a packet. Data also available as an ArrayBuffer if requested. | Returns data as String or (Blob on browser, ArrayBuffer on Node) | Parameters String | ArrayBuffer: the packet to decode, has type and data | . | String: optional, the binary type | . | . | encodePayload Encodes multiple messages (payload). | If any contents are binary, they will be encoded as base64 strings. Base64 encoded strings are marked with a b before the length specifier | Parameters Array: an array of packets | Function: callback, returns the encoded payload (cb(String)) | . | . | decodePayload Decodes data when a payload is maybe expected. Possible binary contents are decoded from their base64 representation. | Parameters String: the payload | Function: callback, returns (cb(Object: packet, Number:packet index, Number:packet total)) | . | . | . Tests . Standalone tests can be run with npm test which will run the node.js tests. . Browser tests are run using zuul. (You must have zuul setup with a saucelabs account.) . You can run the tests locally using the following command: . npm run test:browser . Support . The support channels for engine.io-parser are the same as socket.io: . irc.freenode.net #socket.io | Github Discussions | Website | . Development . To contribute patches, run tests or benchmarks, make sure to clone the repository: . git clone git://github.com/socketio/engine.io-parser.git . Then: . cd engine.io-parser npm ci . See the Tests section above for how to run tests before submitting any patches. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/engine.io-parser/",
          "relUrl": "/node_backend/node_modules/engine.io-parser/",
          "date": ""
      }
      
  

  
      ,"page94": {
          "title": "Engine.IO: the realtime engine",
          "content": "Engine.IO: the realtime engine . . Engine.IO is the implementation of transport-based cross-browser/cross-device bi-directional communication layer for Socket.IO. . How to use . Server . (A) Listening on a port . const engine = require(&#39;engine.io&#39;); const server = engine.listen(80); server.on(&#39;connection&#39;, socket =&gt; { socket.send(&#39;utf 8 string&#39;); socket.send(Buffer.from([0, 1, 2, 3, 4, 5])); // binary data }); . (B) Intercepting requests for a http.Server . const engine = require(&#39;engine.io&#39;); const http = require(&#39;http&#39;).createServer().listen(3000); const server = engine.attach(http); server.on(&#39;connection&#39;, socket =&gt; { socket.on(&#39;message&#39;, data =&gt; { }); socket.on(&#39;close&#39;, () =&gt; { }); }); . (C) Passing in requests . const engine = require(&#39;engine.io&#39;); const server = new engine.Server(); server.on(&#39;connection&#39;, socket =&gt; { socket.send(&#39;hi&#39;); }); // … httpServer.on(&#39;upgrade&#39;, (req, socket, head) =&gt; { server.handleUpgrade(req, socket, head); }); httpServer.on(&#39;request&#39;, (req, res) =&gt; { server.handleRequest(req, res); }); . Client . &lt;script src=&quot;/path/to/engine.io.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const socket = new eio.Socket(&#39;ws://localhost/&#39;); socket.on(&#39;open&#39;, () =&gt; { socket.on(&#39;message&#39;, data =&gt; {}); socket.on(&#39;close&#39;, () =&gt; {}); }); &lt;/script&gt; . For more information on the client refer to the engine-client repository. . What features does it have? . Maximum reliability. Connections are established even in the presence of: proxies and load balancers. | personal firewall and antivirus software. | for more information refer to Goals and Architecture sections | . | Minimal client size aided by: lazy loading of flash transports. | lack of redundant transports. | . | Scalable load balancer friendly | . | Future proof | 100% Node.JS core style No API sugar (left for higher level projects) | . | . API . Server . . . Top-level . These are exposed by require(&#39;engine.io&#39;): . Events . flush Called when a socket buffer is being flushed. | Arguments Socket: socket being flushed | Array: write buffer | . | . | drain Called when a socket buffer is drained | Arguments Socket: socket being flushed | . | . | . Properties . protocol (Number): protocol revision number | Server: Server class constructor | Socket: Socket class constructor | Transport (Function): transport constructor | transports (Object): map of available transports | . Methods . () Returns a new Server instance. If the first argument is an http.Server then the new Server instance will be attached to it. Otherwise, the arguments are passed directly to the Server constructor. | Parameters http.Server: optional, server to attach to. | Object: optional, options object (see Server#constructor api docs below) | . | . The following are identical ways to instantiate a server and then attach it. . | . const httpServer; // previously created with `http.createServer();` from node.js api. // create a server first, and then attach const eioServer = require(&#39;engine.io&#39;).Server(); eioServer.attach(httpServer); // or call the module as a function to get `Server` const eioServer = require(&#39;engine.io&#39;)(); eioServer.attach(httpServer); // immediately attach const eioServer = require(&#39;engine.io&#39;)(httpServer); // with custom options const eioServer = require(&#39;engine.io&#39;)(httpServer, { maxHttpBufferSize: 1e3 }); . listen Creates an http.Server which listens on the given port and attaches WS to it. It returns 501 Not Implemented for regular http requests. | Parameters Number: port to listen on. | Object: optional, options object | Function: callback for listen. | . | Options All options from Server.attach method, documented below. | Additionally See Server constructor below for options you can pass for creating the new Server | . | Returns Server | . | . const engine = require(&#39;engine.io&#39;); const server = engine.listen(3000, { pingTimeout: 2000, pingInterval: 10000 }); server.on(&#39;connection&#39;, /* ... */); . attach Captures upgrade requests for a http.Server. In other words, makes a regular http.Server WebSocket-compatible. | Parameters http.Server: server to attach to. | Object: optional, options object | . | Options All options from Server.attach method, documented below. | Additionally See Server constructor below for options you can pass for creating the new Server | . | Returns Server a new Server instance. | . | . const engine = require(&#39;engine.io&#39;); const httpServer = require(&#39;http&#39;).createServer().listen(3000); const server = engine.attach(httpServer, { wsEngine: require(&#39;eiows&#39;).Server // requires having eiows as dependency }); server.on(&#39;connection&#39;, /* ... */); . Server . The main server/manager. Inherits from EventEmitter. . Events . connection Fired when a new connection is established. | Arguments Socket: a Socket object | . | . | initial_headers Fired on the first request of the connection, before writing the response headers | Arguments headers (Object): a hash of headers | req (http.IncomingMessage): the request | . | . | headers Fired on the all requests of the connection, before writing the response headers | Arguments headers (Object): a hash of headers | req (http.IncomingMessage): the request | . | . | connection_error Fired when an error occurs when establishing the connection. | Arguments error: an object with following properties: req (http.IncomingMessage): the request that was dropped | code (Number): one of Server.errors | message (string): one of Server.errorMessages | context (Object): extra info about the error | . | . | . | . Code Message . 0 | “Transport unknown” | . 1 | “Session ID unknown” | . 2 | “Bad handshake method” | . 3 | “Bad request” | . 4 | “Forbidden” | . 5 | “Unsupported protocol version” | . Properties . Important: if you plan to use Engine.IO in a scalable way, please keep in mind the properties below will only reflect the clients connected to a single process. . clients (Object): hash of connected clients by id. | clientsCount (Number): number of connected clients. | . Methods . constructor Initializes the server | Parameters Object: optional, options object | . | Options pingTimeout (Number): how many ms without a pong packet to consider the connection closed (20000) | pingInterval (Number): how many ms before sending a new ping packet (25000) | upgradeTimeout (Number): how many ms before an uncompleted transport upgrade is cancelled (10000) | maxHttpBufferSize (Number): how many bytes or characters a message can be, before closing the session (to avoid DoS). Default value is 1E6. | allowRequest (Function): A function that receives a given handshake or upgrade request as its first parameter, and can decide whether to continue or not. The second argument is a function that needs to be called with the decided information: fn(err, success), where success is a boolean value where false means that the request is rejected, and err is an error code. | transports (&lt;Array&gt; String): transports to allow connections to ([&#39;polling&#39;, &#39;websocket&#39;]) | allowUpgrades (Boolean): whether to allow transport upgrades (true) | perMessageDeflate (Object|Boolean): parameters of the WebSocket permessage-deflate extension (see ws module api docs). Set to true to enable. (defaults to false) threshold (Number): data is compressed only if the byte size is above this value (1024) | . | httpCompression (Object|Boolean): parameters of the http compression for the polling transports (see zlib api docs). Set to false to disable. (true) threshold (Number): data is compressed only if the byte size is above this value (1024) | . | cookie (Object|Boolean): configuration of the cookie that contains the client sid to send as part of handshake response headers. This cookie might be used for sticky-session. Defaults to not sending any cookie (false). See here for all supported options. | wsEngine (Function): what WebSocket server implementation to use. Specified module must conform to the ws interface (see ws module api docs). Default value is ws. An alternative c++ addon is also available by installing eiows module. | cors (Object): the options that will be forwarded to the cors module. See there for all available options. Defaults to no CORS allowed. | initialPacket (Object): an optional packet which will be concatenated to the handshake packet emitted by Engine.IO. | allowEIO3 (Boolean): whether to support v3 Engine.IO clients (defaults to false) | . | . | close Closes all clients | Returns Server for chaining | . | handleRequest Called internally when a Engine request is intercepted. | Parameters http.IncomingMessage: a node request object | http.ServerResponse: a node response object | . | Returns Server for chaining | . | handleUpgrade Called internally when a Engine ws upgrade is intercepted. | Parameters (same as upgrade event) http.IncomingMessage: a node request object | net.Stream: TCP socket for the request | Buffer: legacy tail bytes | . | Returns Server for chaining | . | attach Attach this Server instance to an http.Server | Captures upgrade requests for a http.Server. In other words, makes a regular http.Server WebSocket-compatible. | Parameters http.Server: server to attach to. | Object: optional, options object | . | Options path (String): name of the path to capture (/engine.io). | destroyUpgrade (Boolean): destroy unhandled upgrade requests (true) | destroyUpgradeTimeout (Number): milliseconds after which unhandled requests are ended (1000) | . | . | generateId Generate a socket id. | Overwrite this method to generate your custom socket id. | Parameters http.IncomingMessage: a node request object | . | Returns A socket id for connected client. | . | . . . Socket . A representation of a client. Inherits from EventEmitter. . Events . close Fired when the client is disconnected. | Arguments String: reason for closing | Object: description object (optional) | . | . | message Fired when the client sends a message. | Arguments String or Buffer: Unicode string or Buffer with binary contents | . | . | error Fired when an error occurs. | Arguments Error: error object | . | . | upgrading Fired when the client starts the upgrade to a better transport like WebSocket. | Arguments Object: the transport | . | . | upgrade Fired when the client completes the upgrade to a better transport like WebSocket. | Arguments Object: the transport | . | . | flush Called when the write buffer is being flushed. | Arguments Array: write buffer | . | . | drain Called when the write buffer is drained | . | packet Called when a socket received a packet (message, ping) | Arguments type: packet type | data: packet data (if type is message) | . | . | packetCreate Called before a socket sends a packet (message, ping) | Arguments type: packet type | data: packet data (if type is message) | . | . | heartbeat Called when ping or pong packed is received (depends of client version) | . | . Properties . id (String): unique identifier | server (Server): engine parent reference | request (http.IncomingMessage): request that originated the Socket | upgraded (Boolean): whether the transport has been upgraded | readyState (String): opening | open | closing | closed | . | transport (Transport): transport reference | . Methods . send: Sends a message, performing message = toString(arguments[0]) unless sending binary data, which is sent as is. | Parameters String |  Buffer | ArrayBuffer | ArrayBufferView: a string or any object implementing toString(), with outgoing data, or a Buffer or ArrayBuffer with binary data. Also any ArrayBufferView can be sent as is. | . | Object: optional, options object | Function: optional, a callback executed when the message gets flushed out by the transport | . | Options compress (Boolean): whether to compress sending data. This option might be ignored and forced to be true when using polling. (true) | . | Returns Socket for chaining | . | close Disconnects the client | Returns Socket for chaining | . | . Client . . . Exposed in the eio global namespace (in the browser), or by require(&#39;engine.io-client&#39;) (in Node.JS). . For the client API refer to the engine-client repository. . Debug / logging . Engine.IO is powered by debug. In order to see all the debug output, run your app with the environment variable DEBUG including the desired scope. . To see the output from all of Engine.IO’s debugging scopes you can use: . DEBUG=engine* node myapp . Transports . polling: XHR / JSONP polling transport. | websocket: WebSocket transport. | . Plugins . engine.io-conflation: Makes conflation and aggregation of messages straightforward. | . Support . The support channels for engine.io are the same as socket.io: . irc.freenode.net #socket.io | Google Groups | Website | . Development . To contribute patches, run tests or benchmarks, make sure to clone the repository: . git clone git://github.com/LearnBoost/engine.io.git . Then: . cd engine.io npm install . Tests . Tests run with npm test. It runs the server tests that are aided by the usage of engine.io-client. . Make sure npm install is run first. . Goals . The main goal of Engine is ensuring the most reliable realtime communication. Unlike the previous Socket.IO core, it always establishes a long-polling connection first, then tries to upgrade to better transports that are “tested” on the side. . During the lifetime of the Socket.IO projects, we’ve found countless drawbacks to relying on HTML5 WebSocket or Flash Socket as the first connection mechanisms. . Both are clearly the right way of establishing a bidirectional communication, with HTML5 WebSocket being the way of the future. However, to answer most business needs, alternative traditional HTTP 1.1 mechanisms are just as good as delivering the same solution. . WebSocket based connections have two fundamental benefits: . Better server performance A: Load balancers Load balancing a long polling connection poses a serious architectural nightmare since requests can come from any number of open sockets by the user agent, but they all need to be routed to the process and computer that owns the Engine connection. This negatively impacts RAM and CPU usage. | B: Network traffic WebSocket is designed around the premise that each message frame has to be surrounded by the least amount of data. In HTTP 1.1 transports, each message frame is surrounded by HTTP headers and chunked encoding frames. If you try to send the message “Hello world” with xhr-polling, the message ultimately becomes larger than if you were to send it with WebSocket. | C: Lightweight parser As an effect of B, the server has to do a lot more work to parse the network data and figure out the message when traditional HTTP requests are used (as in long polling). This means that another advantage of WebSocket is less server CPU usage. | . | Better user experience . Due to the reasons stated in point 1, the most important effect of being able to establish a WebSocket connection is raw data transfer speed, which translates in some cases in better user experience. . Applications with heavy realtime interaction (such as games) will benefit greatly, whereas applications like realtime chat (Gmail/Facebook), newsfeeds (Facebook) or timelines (Twitter) will have negligible user experience improvements. . | Having said this, attempting to establish a WebSocket connection directly so far has proven problematic: . Proxies Many corporate proxies block WebSocket traffic. . | Personal firewall and antivirus software As a result of our research, we’ve found that at least 3 personal security applications block WebSocket traffic. . | Cloud application platforms Platforms like Heroku or No.de have had trouble keeping up with the fast-paced nature of the evolution of the WebSocket protocol. Applications therefore end up inevitably using long polling, but the seamless installation experience of Socket.IO we strive for (“require() it and it just works”) disappears. . | Some of these problems have solutions. In the case of proxies and personal programs, however, the solutions many times involve upgrading software. Experience has shown that relying on client software upgrades to deliver a business solution is fruitless: the very existence of this project has to do with a fragmented panorama of user agent distribution, with clients connecting with latest versions of the most modern user agents (Chrome, Firefox and Safari), but others with versions as low as IE 5.5. . From the user perspective, an unsuccessful WebSocket connection can translate in up to at least 10 seconds of waiting for the realtime application to begin exchanging data. This perceptively hurts user experience. . To summarize, Engine focuses on reliability and user experience first, marginal potential UX improvements and increased server performance second. Engine is the result of all the lessons learned with WebSocket in the wild. . Architecture . The main premise of Engine, and the core of its existence, is the ability to swap transports on the fly. A connection starts as xhr-polling, but it can switch to WebSocket. . The central problem this poses is: how do we switch transports without losing messages? . Engine only switches from polling to another transport in between polling cycles. Since the server closes the connection after a certain timeout when there’s no activity, and the polling transport implementation buffers messages in between connections, this ensures no message loss and optimal performance. . Another benefit of this design is that we workaround almost all the limitations of Flash Socket, such as slow connection times, increased file size (we can safely lazy load it without hurting user experience), etc. . FAQ . Can I use engine without Socket.IO ? . Absolutely. Although the recommended framework for building realtime applications is Socket.IO, since it provides fundamental features for real-world applications such as multiplexing, reconnection support, etc. . Engine is to Socket.IO what Connect is to Express. An essential piece for building realtime frameworks, but something you probably won’t be using for building actual applications. . Does the server serve the client? . No. The main reason is that Engine is meant to be bundled with frameworks. Socket.IO includes Engine, therefore serving two clients is not necessary. If you use Socket.IO, including . &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt; . has you covered. . Can I implement Engine in other languages? . Absolutely. The engine.io-protocol repository contains the most up-to-date description of the specification at all times. . License . (The MIT License) . Copyright (c) 2014 Guillermo Rauch &lt;guillermo@learnboost.com&gt; . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. . THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/engine.io/",
          "relUrl": "/node_backend/node_modules/engine.io/",
          "date": ""
      }
      
  

  
      ,"page95": {
          "title": "mime-db",
          "content": "mime-db . . This is a large database of mime types and information about them. It consists of a single, public JSON file and does not include any logic, allowing it to remain as un-opinionated as possible with an API. It aggregates data from the following sources: . http://www.iana.org/assignments/media-types/media-types.xhtml | http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types | http://hg.nginx.org/nginx/raw-file/default/conf/mime.types | . Installation . npm install mime-db . Database Download . If you’re crazy enough to use this in the browser, you can just grab the JSON file using jsDelivr. It is recommended to replace master with a release tag as the JSON format may change in the future. . https://cdn.jsdelivr.net/gh/jshttp/mime-db@master/db.json . Usage . var db = require(&#39;mime-db&#39;) // grab data on .js files var data = db[&#39;application/javascript&#39;] . Data Structure . The JSON file is a map lookup for lowercased mime types. Each mime type has the following properties: . .source - where the mime type is defined. If not set, it’s probably a custom media type. apache - Apache common media types | iana - IANA-defined media types | nginx - nginx media types | . | .extensions[] - known extensions associated with this mime type. | .compressible - whether a file of this type can be gzipped. | .charset - the default charset associated with this type, if any. | . If unknown, every property could be undefined. . Contributing . To edit the database, only make PRs against src/custom-types.json or src/custom-suffix.json. . The src/custom-types.json file is a JSON object with the MIME type as the keys and the values being an object with the following keys: . compressible - leave out if you don’t know, otherwise true/false to indicate whether the data represented by the type is typically compressible. | extensions - include an array of file extensions that are associated with the type. | notes - human-readable notes about the type, typically what the type is. | sources - include an array of URLs of where the MIME type and the associated extensions are sourced from. This needs to be a primary source; links to type aggregating sites and Wikipedia are not acceptable. | . To update the build, run npm run build. . Adding Custom Media Types . The best way to get new media types included in this library is to register them with the IANA. The community registration procedure is outlined in RFC 6838 section 5. Types registered with the IANA are automatically pulled into this library. . If that is not possible / feasible, they can be added directly here as a “custom” type. To do this, it is required to have a primary source that definitively lists the media type. If an extension is going to be listed as associateed with this media type, the source must definitively link the media type and extension as well. .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/mime-db/",
          "relUrl": "/node_backend/node_modules/mime-db/",
          "date": ""
      }
      
  

  
      ,"page96": {
          "title": "mime-types",
          "content": "mime-types . . The ultimate javascript content-type utility. . Similar to the mime@1.x module, except: . No fallbacks. Instead of naively returning the first available type, mime-types simply returns false, so do var type = mime.lookup(&#39;unrecognized&#39;) || &#39;application/octet-stream&#39;. | No new Mime() business, so you could do var lookup = require(&#39;mime-types&#39;).lookup. | No .define() functionality | Bug fixes for .lookup(path) | . Otherwise, the API is compatible with mime 1.x. . Install . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install mime-types . Adding Types . All mime types are based on mime-db, so open a PR there if you’d like to add mime types. . API . var mime = require(&#39;mime-types&#39;) . All functions return false if input is invalid or not found. . mime.lookup(path) . Lookup the content-type associated with a file. . mime.lookup(&#39;json&#39;) // &#39;application/json&#39; mime.lookup(&#39;.md&#39;) // &#39;text/markdown&#39; mime.lookup(&#39;file.html&#39;) // &#39;text/html&#39; mime.lookup(&#39;folder/file.js&#39;) // &#39;application/javascript&#39; mime.lookup(&#39;folder/.htaccess&#39;) // false mime.lookup(&#39;cats&#39;) // false . mime.contentType(type) . Create a full content-type header given a content-type or extension. When given an extension, mime.lookup is used to get the matching content-type, otherwise the given content-type is used. Then if the content-type does not already have a charset parameter, mime.charset is used to get the default charset and add to the returned content-type. . mime.contentType(&#39;markdown&#39;) // &#39;text/x-markdown; charset=utf-8&#39; mime.contentType(&#39;file.json&#39;) // &#39;application/json; charset=utf-8&#39; mime.contentType(&#39;text/html&#39;) // &#39;text/html; charset=utf-8&#39; mime.contentType(&#39;text/html; charset=iso-8859-1&#39;) // &#39;text/html; charset=iso-8859-1&#39; // from a full path mime.contentType(path.extname(&#39;/path/to/file.json&#39;)) // &#39;application/json; charset=utf-8&#39; . mime.extension(type) . Get the default extension for a content-type. . mime.extension(&#39;application/octet-stream&#39;) // &#39;bin&#39; . mime.charset(type) . Lookup the implied default charset of a content-type. . mime.charset(&#39;text/markdown&#39;) // &#39;UTF-8&#39; . var type = mime.types[extension] . A map of content-types by extension. . [extensions…] = mime.extensions[type] . A map of extensions by content-type. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/mime-types/",
          "relUrl": "/node_backend/node_modules/mime-types/",
          "date": ""
      }
      
  

  
      ,"page97": {
          "title": "ms",
          "content": "ms . . Use this package to easily convert various time formats to milliseconds. . Examples . ms(&#39;2 days&#39;) // 172800000 ms(&#39;1d&#39;) // 86400000 ms(&#39;10h&#39;) // 36000000 ms(&#39;2.5 hrs&#39;) // 9000000 ms(&#39;2h&#39;) // 7200000 ms(&#39;1m&#39;) // 60000 ms(&#39;5s&#39;) // 5000 ms(&#39;1y&#39;) // 31557600000 ms(&#39;100&#39;) // 100 ms(&#39;-3 days&#39;) // -259200000 ms(&#39;-1h&#39;) // -3600000 ms(&#39;-200&#39;) // -200 . Convert from Milliseconds . ms(60000) // &quot;1m&quot; ms(2 * 60000) // &quot;2m&quot; ms(-3 * 60000) // &quot;-3m&quot; ms(ms(&#39;10 hours&#39;)) // &quot;10h&quot; . Time Format Written-Out . ms(60000, { long: true }) // &quot;1 minute&quot; ms(2 * 60000, { long: true }) // &quot;2 minutes&quot; ms(-3 * 60000, { long: true }) // &quot;-3 minutes&quot; ms(ms(&#39;10 hours&#39;), { long: true }) // &quot;10 hours&quot; . Features . Works both in Node.js and in the browser | If a number is supplied to ms, a string with a unit is returned | If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for &#39;100&#39;) | If you pass a string with a number and a valid unit, the number of equivalent milliseconds is returned | . Related Packages . ms.macro - Run ms as a macro at build-time. | . Caught a Bug? . Fork this repository to your own GitHub account and then clone it to your local device | Link the package to the global module directory: npm link | Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms. Instead of the default one from npm, Node.js will now use your clone of ms! | As always, you can run the tests using: npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/ms/",
          "relUrl": "/node_backend/node_modules/ms/",
          "date": ""
      }
      
  

  
      ,"page98": {
          "title": "negotiator",
          "content": "negotiator . . An HTTP content negotiator for Node.js . Installation . $ npm install negotiator . API . var Negotiator = require(&#39;negotiator&#39;) . Accept Negotiation . availableMediaTypes = [&#39;text/html&#39;, &#39;text/plain&#39;, &#39;application/json&#39;] // The negotiator constructor receives a request object negotiator = new Negotiator(request) // Let&#39;s say Accept header is &#39;text/html, application/*;q=0.2, image/jpeg;q=0.8&#39; negotiator.mediaTypes() // -&gt; [&#39;text/html&#39;, &#39;image/jpeg&#39;, &#39;application/*&#39;] negotiator.mediaTypes(availableMediaTypes) // -&gt; [&#39;text/html&#39;, &#39;application/json&#39;] negotiator.mediaType(availableMediaTypes) // -&gt; &#39;text/html&#39; . You can check a working example at examples/accept.js. . Methods . mediaType() . Returns the most preferred media type from the client. . mediaType(availableMediaType) . Returns the most preferred media type from a list of available media types. . mediaTypes() . Returns an array of preferred media types ordered by the client preference. . mediaTypes(availableMediaTypes) . Returns an array of preferred media types ordered by priority from a list of available media types. . Accept-Language Negotiation . negotiator = new Negotiator(request) availableLanguages = [&#39;en&#39;, &#39;es&#39;, &#39;fr&#39;] // Let&#39;s say Accept-Language header is &#39;en;q=0.8, es, pt&#39; negotiator.languages() // -&gt; [&#39;es&#39;, &#39;pt&#39;, &#39;en&#39;] negotiator.languages(availableLanguages) // -&gt; [&#39;es&#39;, &#39;en&#39;] language = negotiator.language(availableLanguages) // -&gt; &#39;es&#39; . You can check a working example at examples/language.js. . Methods . language() . Returns the most preferred language from the client. . language(availableLanguages) . Returns the most preferred language from a list of available languages. . languages() . Returns an array of preferred languages ordered by the client preference. . languages(availableLanguages) . Returns an array of preferred languages ordered by priority from a list of available languages. . Accept-Charset Negotiation . availableCharsets = [&#39;utf-8&#39;, &#39;iso-8859-1&#39;, &#39;iso-8859-5&#39;] negotiator = new Negotiator(request) // Let&#39;s say Accept-Charset header is &#39;utf-8, iso-8859-1;q=0.8, utf-7;q=0.2&#39; negotiator.charsets() // -&gt; [&#39;utf-8&#39;, &#39;iso-8859-1&#39;, &#39;utf-7&#39;] negotiator.charsets(availableCharsets) // -&gt; [&#39;utf-8&#39;, &#39;iso-8859-1&#39;] negotiator.charset(availableCharsets) // -&gt; &#39;utf-8&#39; . You can check a working example at examples/charset.js. . Methods . charset() . Returns the most preferred charset from the client. . charset(availableCharsets) . Returns the most preferred charset from a list of available charsets. . charsets() . Returns an array of preferred charsets ordered by the client preference. . charsets(availableCharsets) . Returns an array of preferred charsets ordered by priority from a list of available charsets. . Accept-Encoding Negotiation . availableEncodings = [&#39;identity&#39;, &#39;gzip&#39;] negotiator = new Negotiator(request) // Let&#39;s say Accept-Encoding header is &#39;gzip, compress;q=0.2, identity;q=0.5&#39; negotiator.encodings() // -&gt; [&#39;gzip&#39;, &#39;identity&#39;, &#39;compress&#39;] negotiator.encodings(availableEncodings) // -&gt; [&#39;gzip&#39;, &#39;identity&#39;] negotiator.encoding(availableEncodings) // -&gt; &#39;gzip&#39; . You can check a working example at examples/encoding.js. . Methods . encoding() . Returns the most preferred encoding from the client. . encoding(availableEncodings) . Returns the most preferred encoding from a list of available encodings. . encodings() . Returns an array of preferred encodings ordered by the client preference. . encodings(availableEncodings) . Returns an array of preferred encodings ordered by priority from a list of available encodings. . See Also . The accepts module builds on this module and provides an alternative interface, mime type validation, and more. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/negotiator/",
          "relUrl": "/node_backend/node_modules/negotiator/",
          "date": ""
      }
      
  

  
      ,"page99": {
          "title": "object-assign",
          "content": "object-assign . ES2015 Object.assign() ponyfill . Use the built-in . Node.js 4 and up, as well as every evergreen browser (Chrome, Edge, Firefox, Opera, Safari), support Object.assign() :tada:. If you target only those environments, then by all means, use Object.assign() instead of this package. . Install . $ npm install --save object-assign . Usage . const objectAssign = require(&#39;object-assign&#39;); objectAssign({foo: 0}, {bar: 1}); //=&gt; {foo: 0, bar: 1} // multiple sources objectAssign({foo: 0}, {bar: 1}, {baz: 2}); //=&gt; {foo: 0, bar: 1, baz: 2} // overwrites equal keys objectAssign({foo: 0}, {foo: 1}, {foo: 2}); //=&gt; {foo: 2} // ignores null and undefined sources objectAssign({foo: 0}, null, {bar: 1}, undefined); //=&gt; {foo: 0, bar: 1} . API . objectAssign(target, [source, …]) . Assigns enumerable own properties of source objects to the target object and returns the target object. Additional source objects will overwrite previous ones. . Resources . ES2015 spec - Object.assign | . Related . deep-assign - Recursive Object.assign() | . License . MIT © Sindre Sorhus .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/object-assign/",
          "relUrl": "/node_backend/node_modules/object-assign/",
          "date": ""
      }
      
  

  
      ,"page100": {
          "title": "socket.io-adapter",
          "content": "socket.io-adapter . Default socket.io in-memory adapter class. . Compatibility table: . Adapter version Socket.IO server version . 1.x.x | 1.x.x / 2.x.x | . 2.x.x | 3.x.x | . How to use . This module is not intended for end-user usage, but can be used as an interface to inherit from other adapters you might want to build. . As an example of an adapter that builds on top of this, please take a look at socket.io-redis. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/socket.io-adapter/",
          "relUrl": "/node_backend/node_modules/socket.io-adapter/",
          "date": ""
      }
      
  

  
      ,"page101": {
          "title": "socket.io-parser",
          "content": "socket.io-parser . . A socket.io encoder and decoder written in JavaScript complying with version 5 of socket.io-protocol. Used by socket.io and socket.io-client. . Compatibility table: . Parser version Socket.IO server version Protocol revision . 3.x | 1.x / 2.x | 4 | . 4.x | 3.x | 5 | . Parser API . socket.io-parser is the reference implementation of socket.io-protocol. Read the full API here: socket.io-protocol. . Example Usage . Encoding and decoding a packet . var parser = require(&#39;socket.io-parser&#39;); var encoder = new parser.Encoder(); var packet = { type: parser.EVENT, data: &#39;test-packet&#39;, id: 13 }; encoder.encode(packet, function(encodedPackets) { var decoder = new parser.Decoder(); decoder.on(&#39;decoded&#39;, function(decodedPacket) { // decodedPacket.type == parser.EVENT // decodedPacket.data == &#39;test-packet&#39; // decodedPacket.id == 13 }); for (var i = 0; i &lt; encodedPackets.length; i++) { decoder.add(encodedPackets[i]); } }); . Encoding and decoding a packet with binary data . var parser = require(&#39;socket.io-parser&#39;); var encoder = new parser.Encoder(); var packet = { type: parser.BINARY_EVENT, data: {i: new Buffer(1234), j: new Blob([new ArrayBuffer(2)])}, id: 15 }; encoder.encode(packet, function(encodedPackets) { var decoder = new parser.Decoder(); decoder.on(&#39;decoded&#39;, function(decodedPacket) { // decodedPacket.type == parser.BINARY_EVENT // Buffer.isBuffer(decodedPacket.data.i) == true // Buffer.isBuffer(decodedPacket.data.j) == true // decodedPacket.id == 15 }); for (var i = 0; i &lt; encodedPackets.length; i++) { decoder.add(encodedPackets[i]); } }); . See the test suite for more examples of how socket.io-parser is used. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/socket.io-parser/",
          "relUrl": "/node_backend/node_modules/socket.io-parser/",
          "date": ""
      }
      
  

  
      ,"page102": {
          "title": "socket.io",
          "content": "socket.io . . Features . Socket.IO enables real-time bidirectional event-based communication. It consists of: . a Node.js server (this repository) | a Javascript client library for the browser (or a Node.js client) | . Some implementations in other languages are also available: . Java | C++ | Swift | Dart | Python | .NET | Rust | PHP | . Its main features are: . Reliability . Connections are established even in the presence of: . proxies and load balancers. | personal firewall and antivirus software. | . For this purpose, it relies on Engine.IO, which first establishes a long-polling connection, then tries to upgrade to better transports that are “tested” on the side, like WebSocket. Please see the Goals section for more information. . Auto-reconnection support . Unless instructed otherwise a disconnected client will try to reconnect forever, until the server is available again. Please see the available reconnection options here. . Disconnection detection . A heartbeat mechanism is implemented at the Engine.IO level, allowing both the server and the client to know when the other one is not responding anymore. . That functionality is achieved with timers set on both the server and the client, with timeout values (the pingInterval and pingTimeout parameters) shared during the connection handshake. Those timers require any subsequent client calls to be directed to the same server, hence the sticky-session requirement when using multiples nodes. . Binary support . Any serializable data structures can be emitted, including: . ArrayBuffer and Blob in the browser | ArrayBuffer and Buffer in Node.js | . Simple and convenient API . Sample code: . io.on(&#39;connection&#39;, socket =&gt; { socket.emit(&#39;request&#39;, /* … */); // emit an event to the socket io.emit(&#39;broadcast&#39;, /* … */); // emit an event to all connected sockets socket.on(&#39;reply&#39;, () =&gt; { /* … */ }); // listen to the event }); . Cross-browser . Browser support is tested in Sauce Labs: . . Multiplexing support . In order to create separation of concerns within your application (for example per module, or based on permissions), Socket.IO allows you to create several Namespaces, which will act as separate communication channels but will share the same underlying connection. . Room support . Within each Namespace, you can define arbitrary channels, called Rooms, that sockets can join and leave. You can then broadcast to any given room, reaching every socket that has joined it. . This is a useful feature to send notifications to a group of users, or to a given user connected on several devices for example. . Note: Socket.IO is not a WebSocket implementation. Although Socket.IO indeed uses WebSocket as a transport when possible, it adds some metadata to each packet: the packet type, the namespace and the ack id when a message acknowledgement is needed. That is why a WebSocket client will not be able to successfully connect to a Socket.IO server, and a Socket.IO client will not be able to connect to a WebSocket server (like ws://echo.websocket.org) either. Please see the protocol specification here. . Installation . // with npm npm install socket.io // with yarn yarn add socket.io . How to use . The following example attaches socket.io to a plain Node.JS HTTP server listening on port 3000. . const server = require(&#39;http&#39;).createServer(); const io = require(&#39;socket.io&#39;)(server); io.on(&#39;connection&#39;, client =&gt; { client.on(&#39;event&#39;, data =&gt; { /* … */ }); client.on(&#39;disconnect&#39;, () =&gt; { /* … */ }); }); server.listen(3000); . Standalone . const io = require(&#39;socket.io&#39;)(); io.on(&#39;connection&#39;, client =&gt; { ... }); io.listen(3000); . Module syntax . import { Server } from &quot;socket.io&quot;; const io = new Server(server); io.listen(3000); . In conjunction with Express . Starting with 3.0, express applications have become request handler functions that you pass to http or http Server instances. You need to pass the Server to socket.io, not the express application function. Also make sure to call .listen on the server, not the app. . const app = require(&#39;express&#39;)(); const server = require(&#39;http&#39;).createServer(app); const io = require(&#39;socket.io&#39;)(server); io.on(&#39;connection&#39;, () =&gt; { /* … */ }); server.listen(3000); . In conjunction with Koa . Like Express.JS, Koa works by exposing an application as a request handler function, but only by calling the callback method. . const app = require(&#39;koa&#39;)(); const server = require(&#39;http&#39;).createServer(app.callback()); const io = require(&#39;socket.io&#39;)(server); io.on(&#39;connection&#39;, () =&gt; { /* … */ }); server.listen(3000); . In conjunction with Fastify . To integrate Socket.io in your Fastify application you just need to register fastify-socket.io plugin. It will create a decorator called io. . const app = require(&#39;fastify&#39;)(); app.register(require(&#39;fastify-socket.io&#39;)); app.io.on(&#39;connection&#39;, () =&gt; { /* … */ }); app.listen(3000); . Documentation . Please see the documentation here. . The source code of the website can be found here. Contributions are welcome! . Debug / logging . Socket.IO is powered by debug. In order to see all the debug output, run your app with the environment variable DEBUG including the desired scope. . To see the output from all of Socket.IO’s debugging scopes you can use: . DEBUG=socket.io* node myapp . Testing . npm test . This runs the gulp task test. By default the test will be run with the source code in lib directory. . Set the environmental variable TEST_VERSION to compat to test the transpiled es5-compat version of the code. . The gulp task test will always transpile the source code into es5 and export to dist first before running the test. . Backers . Support us with a monthly donation and help us continue our activities. [Become a backer] . . Sponsors . Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] . . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/socket.io/",
          "relUrl": "/node_backend/node_modules/socket.io/",
          "date": ""
      }
      
  

  
      ,"page103": {
          "title": "undici-types",
          "content": "undici-types . This package is a dual-publish of the undici library types. The undici package still contains types. This package is for users who only need undici types (such as for @types/node). It is published alongside every release of undici, so you can always use the same version. . GitHub nodejs/undici | Undici Documentation | .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/undici-types/",
          "relUrl": "/node_backend/node_modules/undici-types/",
          "date": ""
      }
      
  

  
      ,"page104": {
          "title": "",
          "content": "uuid . For the creation of RFC4122 UUIDs . Complete - Support for RFC4122 version 1, 3, 4, and 5 UUIDs | Cross-platform - Support for … CommonJS, ECMAScript Modules and CDN builds | NodeJS 12+ (LTS releases) | Chrome, Safari, Firefox, Edge browsers | Webpack and rollup.js module bundlers | React Native / Expo | . | Secure - Cryptographically-strong random values | Small - Zero-dependency, small footprint, plays nice with “tree shaking” packagers | CLI - Includes the uuid command line utility | . Note Upgrading from uuid@3? Your code is probably okay, but check out Upgrading From uuid@3 for details. . Note Only interested in creating a version 4 UUID? You might be able to use crypto.randomUUID(), eliminating the need to install this library. . Quickstart . To create a random UUID… . 1. Install . npm install uuid . 2. Create a UUID (ES6 module syntax) . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); // ⇨ &#39;9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d&#39; . … or using CommonJS syntax: . const { v4: uuidv4 } = require(&#39;uuid&#39;); uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; . For timestamp UUIDs, namespace UUIDs, and other options read on … . API Summary .       . uuid.NIL | The nil UUID string (all zeros) | New in uuid@8.3 | . uuid.parse() | Convert UUID string to array of bytes | New in uuid@8.3 | . uuid.stringify() | Convert array of bytes to UUID string | New in uuid@8.3 | . uuid.v1() | Create a version 1 (timestamp) UUID |   | . uuid.v3() | Create a version 3 (namespace w/ MD5) UUID |   | . uuid.v4() | Create a version 4 (random) UUID |   | . uuid.v5() | Create a version 5 (namespace w/ SHA-1) UUID |   | . uuid.validate() | Test a string to see if it is a valid UUID | New in uuid@8.3 | . uuid.version() | Detect RFC version of a UUID | New in uuid@8.3 | . API . uuid.NIL . The nil UUID string (all zeros). . Example: . import { NIL as NIL_UUID } from &#39;uuid&#39;; NIL_UUID; // ⇨ &#39;00000000-0000-0000-0000-000000000000&#39; . uuid.parse(str) . Convert UUID string to array of bytes .     . str | A valid UUID String | . returns | Uint8Array[16] | . throws | TypeError if str is not a valid UUID | . Note: Ordering of values in the byte arrays used by parse() and stringify() follows the left &amp;Rarr; right order of hex-pairs in UUID strings. As shown in the example below. . Example: . import { parse as uuidParse } from &#39;uuid&#39;; // Parse a UUID const bytes = uuidParse(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;); // Convert to hex strings to show byte order (for documentation purposes) [...bytes].map((v) =&gt; v.toString(16).padStart(2, &#39;0&#39;)); // ⇨ // [ // &#39;6e&#39;, &#39;c0&#39;, &#39;bd&#39;, &#39;7f&#39;, // &#39;11&#39;, &#39;c0&#39;, &#39;43&#39;, &#39;da&#39;, // &#39;97&#39;, &#39;5e&#39;, &#39;2a&#39;, &#39;8a&#39;, // &#39;d9&#39;, &#39;eb&#39;, &#39;ae&#39;, &#39;0b&#39; // ] . uuid.stringify(arr[, offset]) . Convert array of bytes to UUID string .     . arr | Array-like collection of 16 values (starting from offset) between 0-255. | . [offset = 0] | Number Starting index in the Array | . returns | String | . throws | TypeError if a valid UUID string cannot be generated | . Note: Ordering of values in the byte arrays used by parse() and stringify() follows the left &amp;Rarr; right order of hex-pairs in UUID strings. As shown in the example below. . Example: . import { stringify as uuidStringify } from &#39;uuid&#39;; const uuidBytes = [ 0x6e, 0xc0, 0xbd, 0x7f, 0x11, 0xc0, 0x43, 0xda, 0x97, 0x5e, 0x2a, 0x8a, 0xd9, 0xeb, 0xae, 0x0b, ]; uuidStringify(uuidBytes); // ⇨ &#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39; . uuid.v1([options[, buffer[, offset]]]) . Create an RFC version 1 (timestamp) UUID .     . [options] | Object with one or more of the following properties: | . [options.node ] | RFC “node” field as an Array[6] of byte values (per 4.1.6) | . [options.clockseq] | RFC “clock sequence” as a Number between 0 - 0x3fff | . [options.msecs] | RFC “timestamp” field (Number of milliseconds, unix epoch) | . [options.nsecs] | RFC “timestamp” field (Number of nanoseconds to add to msecs, should be 0-10,000) | . [options.random] | Array of 16 random bytes (0-255) | . [options.rng] | Alternative to options.random, a Function that returns an Array of 16 random bytes (0-255) | . [buffer] | Array | Buffer If specified, uuid will be written here in byte-form, starting at offset | . [offset = 0] | Number Index to start writing UUID bytes in buffer | . returns | UUID String if no buffer is specified, otherwise returns buffer | . throws | Error if more than 10M UUIDs/sec are requested | . Note: The default node id (the last 12 digits in the UUID) is generated once, randomly, on process startup, and then remains unchanged for the duration of the process. . Note: options.random and options.rng are only meaningful on the very first call to v1(), where they may be passed to initialize the internal node and clockseq fields. . Example: . import { v1 as uuidv1 } from &#39;uuid&#39;; uuidv1(); // ⇨ &#39;2c5ea4c0-4067-11e9-8bad-9b1deb4d3b7d&#39; . Example using options: . import { v1 as uuidv1 } from &#39;uuid&#39;; const v1options = { node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab], clockseq: 0x1234, msecs: new Date(&#39;2011-11-01&#39;).getTime(), nsecs: 5678, }; uuidv1(v1options); // ⇨ &#39;710b962e-041c-11e1-9234-0123456789ab&#39; . uuid.v3(name, namespace[, buffer[, offset]]) . Create an RFC version 3 (namespace w/ MD5) UUID . API is identical to v5(), but uses “v3” instead. . ⚠️ Note: Per the RFC, “If backward compatibility is not an issue, SHA-1 [Version 5] is preferred.” . uuid.v4([options[, buffer[, offset]]]) . Create an RFC version 4 (random) UUID .     . [options] | Object with one or more of the following properties: | . [options.random] | Array of 16 random bytes (0-255) | . [options.rng] | Alternative to options.random, a Function that returns an Array of 16 random bytes (0-255) | . [buffer] | Array | Buffer If specified, uuid will be written here in byte-form, starting at offset | . [offset = 0] | Number Index to start writing UUID bytes in buffer | . returns | UUID String if no buffer is specified, otherwise returns buffer | . Example: . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; . Example using predefined random values: . import { v4 as uuidv4 } from &#39;uuid&#39;; const v4options = { random: [ 0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea, 0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36, ], }; uuidv4(v4options); // ⇨ &#39;109156be-c4fb-41ea-b1b4-efe1671c5836&#39; . uuid.v5(name, namespace[, buffer[, offset]]) . Create an RFC version 5 (namespace w/ SHA-1) UUID .     . name | String | Array | . namespace | String | Array[16] Namespace UUID | . [buffer] | Array | Buffer If specified, uuid will be written here in byte-form, starting at offset | . [offset = 0] | Number Index to start writing UUID bytes in buffer | . returns | UUID String if no buffer is specified, otherwise returns buffer | . Note: The RFC DNS and URL namespaces are available as v5.DNS and v5.URL. . Example with custom namespace: . import { v5 as uuidv5 } from &#39;uuid&#39;; // Define a custom namespace. Readers, create your own using something like // https://www.uuidgenerator.net/ const MY_NAMESPACE = &#39;1b671a64-40d5-491e-99b0-da01ff1f3341&#39;; uuidv5(&#39;Hello, World!&#39;, MY_NAMESPACE); // ⇨ &#39;630eb68f-e0fa-5ecc-887a-7c7a62614681&#39; . Example with RFC URL namespace: . import { v5 as uuidv5 } from &#39;uuid&#39;; uuidv5(&#39;https://www.w3.org/&#39;, uuidv5.URL); // ⇨ &#39;c106a26a-21bb-5538-8bf2-57095d1976c1&#39; . uuid.validate(str) . Test a string to see if it is a valid UUID .     . str | String to validate | . returns | true if string is a valid UUID, false otherwise | . Example: . import { validate as uuidValidate } from &#39;uuid&#39;; uuidValidate(&#39;not a UUID&#39;); // ⇨ false uuidValidate(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;); // ⇨ true . Using validate and version together it is possible to do per-version validation, e.g. validate for only v4 UUIds. . import { version as uuidVersion } from &#39;uuid&#39;; import { validate as uuidValidate } from &#39;uuid&#39;; function uuidValidateV4(uuid) { return uuidValidate(uuid) &amp;&amp; uuidVersion(uuid) === 4; } const v1Uuid = &#39;d9428888-122b-11e1-b85c-61cd3cbb3210&#39;; const v4Uuid = &#39;109156be-c4fb-41ea-b1b4-efe1671c5836&#39;; uuidValidateV4(v4Uuid); // ⇨ true uuidValidateV4(v1Uuid); // ⇨ false . uuid.version(str) . Detect RFC version of a UUID .     . str | A valid UUID String | . returns | Number The RFC version of the UUID | . throws | TypeError if str is not a valid UUID | . Example: . import { version as uuidVersion } from &#39;uuid&#39;; uuidVersion(&#39;45637ec4-c85f-11ea-87d0-0242ac130003&#39;); // ⇨ 1 uuidVersion(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;); // ⇨ 4 . Command Line . UUIDs can be generated from the command line using uuid. . $ npx uuid ddeb27fb-d9a0-4624-be4d-4615062daed4 . The default is to generate version 4 UUIDS, however the other versions are supported. Type uuid --help for details: . $ npx uuid --help Usage: uuid uuid v1 uuid v3 &lt;name&gt; &lt;namespace uuid&gt; uuid v4 uuid v5 &lt;name&gt; &lt;namespace uuid&gt; uuid --help Note: &lt;namespace uuid&gt; may be &quot;URL&quot; or &quot;DNS&quot; to use the corresponding UUIDs defined by RFC4122 . ECMAScript Modules . This library comes with ECMAScript Modules (ESM) support for Node.js versions that support it (example) as well as bundlers like rollup.js (example) and webpack (example) (targeting both, Node.js and browser environments). . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; . To run the examples you must first create a dist build of this library in the module root: . npm run build . CDN Builds . ECMAScript Modules . To load this module directly into modern browsers that support loading ECMAScript Modules you can make use of jspm: . &lt;script type=&quot;module&quot;&gt; import { v4 as uuidv4 } from &#39;https://jspm.dev/uuid&#39;; console.log(uuidv4()); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; &lt;/script&gt; . UMD . As of uuid@9 UMD (Universal Module Definition) builds are no longer shipped with this library. . If you need a UMD build of this library, use a bundler like Webpack or Rollup. Alternatively, refer to the documentation of uuid@8.3.2 which was the last version that shipped UMD builds. . Known issues . Duplicate UUIDs (Googlebot) . This module may generate duplicate UUIDs when run in clients with deterministic random number generators, such as Googlebot crawlers. This can cause problems for apps that expect client-generated UUIDs to always be unique. Developers should be prepared for this and have a strategy for dealing with possible collisions, such as: . Check for duplicate UUIDs, fail gracefully | Disable write operations for Googlebot clients | . “getRandomValues() not supported” . This error occurs in environments where the standard crypto.getRandomValues() API is not supported. This issue can be resolved by adding an appropriate polyfill: . React Native / Expo . Install react-native-get-random-values | Import it before uuid. Since uuid might also appear as a transitive dependency of some other imports it’s safest to just import react-native-get-random-values as the very first thing in your entry point: | import &#39;react-native-get-random-values&#39;; import { v4 as uuidv4 } from &#39;uuid&#39;; . Note: If you are using Expo, you must be using at least react-native-get-random-values@1.5.0 and expo@39.0.0. . Web Workers / Service Workers (Edge &lt;= 18) . In Edge &lt;= 18, Web Crypto is not supported in Web Workers or Service Workers and we are not aware of a polyfill (let us know if you find one, please). . IE 11 (Internet Explorer) . Support for IE11 and other legacy browsers has been dropped as of uuid@9. If you need to support legacy browsers, you can always transpile the uuid module source yourself (e.g. using Babel). . Upgrading From uuid@7 . Only Named Exports Supported When Using with Node.js ESM . uuid@7 did not come with native ECMAScript Module (ESM) support for Node.js. Importing it in Node.js ESM consequently imported the CommonJS source with a default export. This library now comes with true Node.js ESM support and only provides named exports. . Instead of doing: . import uuid from &#39;uuid&#39;; uuid.v4(); . you will now have to use the named exports: . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); . Deep Requires No Longer Supported . Deep requires like require(&#39;uuid/v4&#39;) which have been deprecated in uuid@7 are no longer supported. . Upgrading From uuid@3 . “Wait… what happened to uuid@4 thru uuid@6?!?” . In order to avoid confusion with RFC version 4 and version 5 UUIDs, and a possible version 6, releases 4 thru 6 of this module have been skipped. . Deep Requires Now Deprecated . uuid@3 encouraged the use of deep requires to minimize the bundle size of browser builds: . const uuidv4 = require(&#39;uuid/v4&#39;); // &lt;== NOW DEPRECATED! uuidv4(); . As of uuid@7 this library now provides ECMAScript modules builds, which allow packagers like Webpack and Rollup to do “tree-shaking” to remove dead code. Instead, use the import syntax: . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); . … or for CommonJS: . const { v4: uuidv4 } = require(&#39;uuid&#39;); uuidv4(); . Default Export Removed . uuid@3 was exporting the Version 4 UUID method as a default export: . const uuid = require(&#39;uuid&#39;); // &lt;== REMOVED! . This usage pattern was already discouraged in uuid@3 and has been removed in uuid@7. . . Markdown generated from README_js.md by .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/uuid/",
          "relUrl": "/node_backend/node_modules/uuid/",
          "date": ""
      }
      
  

  
      ,"page105": {
          "title": "vary",
          "content": "vary . . Manipulate the HTTP Vary header . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install vary . API . var vary = require(&#39;vary&#39;) . vary(res, field) . Adds the given header field to the Vary response header of res. This can be a string of a single field, a string of a valid Vary header, or an array of multiple fields. . This will append the header if not already listed, otherwise leaves it listed in the current location. . // Append &quot;Origin&quot; to the Vary header of the response vary(res, &#39;Origin&#39;) . vary.append(header, field) . Adds the given header field to the Vary response header string header. This can be a string of a single field, a string of a valid Vary header, or an array of multiple fields. . This will append the header if not already listed, otherwise leaves it listed in the current location. The new header string is returned. . // Get header string appending &quot;Origin&quot; to &quot;Accept, User-Agent&quot; vary.append(&#39;Accept, User-Agent&#39;, &#39;Origin&#39;) . Examples . Updating the Vary header when content is based on it . var http = require(&#39;http&#39;) var vary = require(&#39;vary&#39;) http.createServer(function onRequest (req, res) { // about to user-agent sniff vary(res, &#39;User-Agent&#39;) var ua = req.headers[&#39;user-agent&#39;] || &#39;&#39; var isMobile = /mobi|android|touch|mini/i.test(ua) // serve site, depending on isMobile res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;) res.end(&#39;You are (probably) &#39; + (isMobile ? &#39;&#39; : &#39;not &#39;) + &#39;a mobile user&#39;) }) . Testing . $ npm test . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/vary/",
          "relUrl": "/node_backend/node_modules/vary/",
          "date": ""
      }
      
  

  
      ,"page106": {
          "title": "ws: a Node.js WebSocket library",
          "content": "ws: a Node.js WebSocket library . . ws is a simple to use, blazing fast, and thoroughly tested WebSocket client and server implementation. . Passes the quite extensive Autobahn test suite: [server][server-report], client. . Note: This module does not work in the browser. The client in the docs is a reference to a back end with the role of a client in the WebSocket communication. Browser clients must use the native WebSocket object. To make the same code work seamlessly on Node.js and the browser, you can use one of the many wrappers available on npm, like isomorphic-ws. . Table of Contents . Protocol support | Installing Opt-in for performance | . | API docs | WebSocket compression | Usage examples Sending and receiving text data | Sending binary data | Simple server | External HTTP/S server | Multiple servers sharing a single HTTP/S server | Client authentication | Server broadcast | Round-trip time | Use the Node.js streams API | Other examples | . | FAQ How to get the IP address of the client? | How to detect and close broken connections? | How to connect via a proxy? | . | Changelog | License | . Protocol support . HyBi drafts 07-12 (Use the option protocolVersion: 8) | HyBi drafts 13-17 (Current default, alternatively option protocolVersion: 13) | . Installing . npm install ws . Opt-in for performance . There are 2 optional modules that can be installed along side with the ws module. These modules are binary addons which improve certain operations. Prebuilt binaries are available for the most popular platforms so you don’t necessarily need to have a C++ compiler installed on your machine. . npm install --save-optional bufferutil: Allows to efficiently perform operations such as masking and unmasking the data payload of the WebSocket frames. | npm install --save-optional utf-8-validate: Allows to efficiently check if a message contains valid UTF-8. | . To not even try to require and use these modules, use the WS_NO_BUFFER_UTIL and WS_NO_UTF_8_VALIDATE environment variables. These might be useful to enhance security in systems where a user can put a package in the package search path of an application of another user, due to how the Node.js resolver algorithm works. . API docs . See /doc/ws.md for Node.js-like documentation of ws classes and utility functions. . WebSocket compression . ws supports the [permessage-deflate extension][permessage-deflate] which enables the client and server to negotiate a compression algorithm and its parameters, and then selectively apply it to the data payloads of each WebSocket message. . The extension is disabled by default on the server and enabled by default on the client. It adds a significant overhead in terms of performance and memory consumption so we suggest to enable it only if it is really needed. . Note that Node.js has a variety of issues with high-performance compression, where increased concurrency, especially on Linux, can lead to catastrophic memory fragmentation and slow performance. If you intend to use permessage-deflate in production, it is worthwhile to set up a test representative of your workload and ensure Node.js/zlib will handle it with acceptable performance and memory usage. . Tuning of permessage-deflate can be done via the options defined below. You can also use zlibDeflateOptions and zlibInflateOptions, which is passed directly into the creation of [raw deflate/inflate streams][node-zlib-deflaterawdocs]. . See [the docs][ws-server-options] for more options. . import WebSocket, { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080, perMessageDeflate: { zlibDeflateOptions: { // See zlib defaults. chunkSize: 1024, memLevel: 7, level: 3 }, zlibInflateOptions: { chunkSize: 10 * 1024 }, // Other options settable: clientNoContextTakeover: true, // Defaults to negotiated value. serverNoContextTakeover: true, // Defaults to negotiated value. serverMaxWindowBits: 10, // Defaults to negotiated value. // Below options specified as default values. concurrencyLimit: 10, // Limits zlib concurrency for perf. threshold: 1024 // Size (in bytes) below which messages // should not be compressed if context takeover is disabled. } }); . The client will only use the extension if it is supported and enabled on the server. To always disable the extension on the client set the perMessageDeflate option to false. . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;ws://www.host.com/path&#39;, { perMessageDeflate: false }); . Usage examples . Sending and receiving text data . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;ws://www.host.com/path&#39;); ws.on(&#39;open&#39;, function open() { ws.send(&#39;something&#39;); }); ws.on(&#39;message&#39;, function message(data) { console.log(&#39;received: %s&#39;, data); }); . Sending binary data . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;ws://www.host.com/path&#39;); ws.on(&#39;open&#39;, function open() { const array = new Float32Array(5); for (var i = 0; i &lt; array.length; ++i) { array[i] = i / 2; } ws.send(array); }); . Simple server . import { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data) { console.log(&#39;received: %s&#39;, data); }); ws.send(&#39;something&#39;); }); . External HTTP/S server . import { createServer } from &#39;https&#39;; import { readFileSync } from &#39;fs&#39;; import { WebSocketServer } from &#39;ws&#39;; const server = createServer({ cert: readFileSync(&#39;/path/to/cert.pem&#39;), key: readFileSync(&#39;/path/to/key.pem&#39;) }); const wss = new WebSocketServer({ server }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data) { console.log(&#39;received: %s&#39;, data); }); ws.send(&#39;something&#39;); }); server.listen(8080); . Multiple servers sharing a single HTTP/S server . import { createServer } from &#39;http&#39;; import { parse } from &#39;url&#39;; import { WebSocketServer } from &#39;ws&#39;; const server = createServer(); const wss1 = new WebSocketServer({ noServer: true }); const wss2 = new WebSocketServer({ noServer: true }); wss1.on(&#39;connection&#39;, function connection(ws) { // ... }); wss2.on(&#39;connection&#39;, function connection(ws) { // ... }); server.on(&#39;upgrade&#39;, function upgrade(request, socket, head) { const { pathname } = parse(request.url); if (pathname === &#39;/foo&#39;) { wss1.handleUpgrade(request, socket, head, function done(ws) { wss1.emit(&#39;connection&#39;, ws, request); }); } else if (pathname === &#39;/bar&#39;) { wss2.handleUpgrade(request, socket, head, function done(ws) { wss2.emit(&#39;connection&#39;, ws, request); }); } else { socket.destroy(); } }); server.listen(8080); . Client authentication . import { createServer } from &#39;http&#39;; import { WebSocketServer } from &#39;ws&#39;; const server = createServer(); const wss = new WebSocketServer({ noServer: true }); wss.on(&#39;connection&#39;, function connection(ws, request, client) { ws.on(&#39;message&#39;, function message(data) { console.log(`Received message ${data} from user ${client}`); }); }); server.on(&#39;upgrade&#39;, function upgrade(request, socket, head) { // This function is not defined on purpose. Implement it with your own logic. authenticate(request, function next(err, client) { if (err || !client) { socket.write(&#39;HTTP/1.1 401 Unauthorized r n r n&#39;); socket.destroy(); return; } wss.handleUpgrade(request, socket, head, function done(ws) { wss.emit(&#39;connection&#39;, ws, request, client); }); }); }); server.listen(8080); . Also see the provided [example][session-parse-example] using express-session. . Server broadcast . A client WebSocket broadcasting to all connected WebSocket clients, including itself. . import WebSocket, { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data, isBinary) { wss.clients.forEach(function each(client) { if (client.readyState === WebSocket.OPEN) { client.send(data, { binary: isBinary }); } }); }); }); . A client WebSocket broadcasting to every other connected WebSocket clients, excluding itself. . import WebSocket, { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data, isBinary) { wss.clients.forEach(function each(client) { if (client !== ws &amp;&amp; client.readyState === WebSocket.OPEN) { client.send(data, { binary: isBinary }); } }); }); }); . Round-trip time . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;wss://websocket-echo.com/&#39;); ws.on(&#39;open&#39;, function open() { console.log(&#39;connected&#39;); ws.send(Date.now()); }); ws.on(&#39;close&#39;, function close() { console.log(&#39;disconnected&#39;); }); ws.on(&#39;message&#39;, function message(data) { console.log(`Round-trip time: ${Date.now() - data} ms`); setTimeout(function timeout() { ws.send(Date.now()); }, 500); }); . Use the Node.js streams API . import WebSocket, { createWebSocketStream } from &#39;ws&#39;; const ws = new WebSocket(&#39;wss://websocket-echo.com/&#39;); const duplex = createWebSocketStream(ws, { encoding: &#39;utf8&#39; }); duplex.pipe(process.stdout); process.stdin.pipe(duplex); . Other examples . For a full example with a browser client communicating with a ws server, see the examples folder. . Otherwise, see the test cases. . FAQ . How to get the IP address of the client? . The remote IP address can be obtained from the raw socket. . import { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws, req) { const ip = req.socket.remoteAddress; }); . When the server runs behind a proxy like NGINX, the de-facto standard is to use the X-Forwarded-For header. . wss.on(&#39;connection&#39;, function connection(ws, req) { const ip = req.headers[&#39;x-forwarded-for&#39;].split(&#39;,&#39;)[0].trim(); }); . How to detect and close broken connections? . Sometimes the link between the server and the client can be interrupted in a way that keeps both the server and the client unaware of the broken state of the connection (e.g. when pulling the cord). . In these cases ping messages can be used as a means to verify that the remote endpoint is still responsive. . import { WebSocketServer } from &#39;ws&#39;; function heartbeat() { this.isAlive = true; } const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.isAlive = true; ws.on(&#39;pong&#39;, heartbeat); }); const interval = setInterval(function ping() { wss.clients.forEach(function each(ws) { if (ws.isAlive === false) return ws.terminate(); ws.isAlive = false; ws.ping(); }); }, 30000); wss.on(&#39;close&#39;, function close() { clearInterval(interval); }); . Pong messages are automatically sent in response to ping messages as required by the spec. . Just like the server example above your clients might as well lose connection without knowing it. You might want to add a ping listener on your clients to prevent that. A simple implementation would be: . import WebSocket from &#39;ws&#39;; function heartbeat() { clearTimeout(this.pingTimeout); // Use `WebSocket#terminate()`, which immediately destroys the connection, // instead of `WebSocket#close()`, which waits for the close timer. // Delay should be equal to the interval at which your server // sends out pings plus a conservative assumption of the latency. this.pingTimeout = setTimeout(() =&gt; { this.terminate(); }, 30000 + 1000); } const client = new WebSocket(&#39;wss://websocket-echo.com/&#39;); client.on(&#39;open&#39;, heartbeat); client.on(&#39;ping&#39;, heartbeat); client.on(&#39;close&#39;, function clear() { clearTimeout(this.pingTimeout); }); . How to connect via a proxy? . Use a custom http.Agent implementation like https-proxy-agent or [socks-proxy-agent][]. . Changelog . We’re using the GitHub releases for changelog entries. . License . MIT . [node-zlib-deflaterawdocs]: https://nodejs.org/api/zlib.html#zlib_zlib_createdeflateraw_options [permessage-deflate]: https://tools.ietf.org/html/rfc7692 [server-report]: http://websockets.github.io/ws/autobahn/servers/ [session-parse-example]: ./examples/express-session-parse [socks-proxy-agent]: https://github.com/TooTallNate/node-socks-proxy-agent [ws-server-options]: ./doc/ws.md#new-websocketserveroptions-callback .",
          "url": "http://localhost:4100/Multiplayer/node_backend/node_modules/ws/",
          "relUrl": "/node_backend/node_modules/ws/",
          "date": ""
      }
      
  

  
      ,"page107": {
          "title": "Emitter",
          "content": "Emitter . Event emitter component. . Installation . $ component install component/emitter . API . Emitter(obj) . The Emitter may also be used as a mixin. For example a “plain” object may become an emitter, or you may extend an existing prototype. . As an Emitter instance: . var Emitter = require(&#39;emitter&#39;); var emitter = new Emitter; emitter.emit(&#39;something&#39;); . As a mixin: . var Emitter = require(&#39;emitter&#39;); var user = { name: &#39;tobi&#39; }; Emitter(user); user.emit(&#39;im a user&#39;); . As a prototype mixin: . var Emitter = require(&#39;emitter&#39;); Emitter(User.prototype); . Emitter#on(event, fn) . Register an event handler fn. . Emitter#once(event, fn) . Register a single-shot event handler fn, removed immediately after it is invoked the first time. . Emitter#off(event, fn) . Pass event and fn to remove a listener. | Pass event to remove all listeners on that event. | Pass nothing to remove all listeners on all events. | . Emitter#emit(event, …) . Emit an event with variable option args. . Emitter#listeners(event) . Return an array of callbacks, or an empty array. . Emitter#hasListeners(event) . Check if this emitter has event handlers. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/@socket.io/component-emitter/",
          "relUrl": "/node_backend_Trystan/node_modules/@socket.io/component-emitter/",
          "date": ""
      }
      
  

  
      ,"page108": {
          "title": "Installation",
          "content": "Installation . npm install --save @types/cookie . Summary . This package contains type definitions for cookie (https://github.com/jshttp/cookie). . Details . Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/cookie. . Additional Details . Last updated: Tue, 06 Jul 2021 20:32:30 GMT | Dependencies: none | Global values: none | . Credits . These definitions were written by Pine Mizune, and Piotr Błażejewicz. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/@types/cookie/",
          "relUrl": "/node_backend_Trystan/node_modules/@types/cookie/",
          "date": ""
      }
      
  

  
      ,"page109": {
          "title": "Installation",
          "content": "Installation . npm install --save @types/cors . Summary . This package contains type definitions for cors (https://github.com/expressjs/cors/). . Details . Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/cors. . index.d.ts . /// &lt;reference types=&quot;node&quot; /&gt; import { IncomingHttpHeaders } from &quot;http&quot;; type StaticOrigin = boolean | string | RegExp | Array&lt;boolean | string | RegExp&gt;; type CustomOrigin = ( requestOrigin: string | undefined, callback: (err: Error | null, origin?: StaticOrigin) =&gt; void, ) =&gt; void; declare namespace e { interface CorsRequest { method?: string | undefined; headers: IncomingHttpHeaders; } interface CorsOptions { /** * @default &#39;*&#39;&#39; */ origin?: StaticOrigin | CustomOrigin | undefined; /** * @default &#39;GET,HEAD,PUT,PATCH,POST,DELETE&#39; */ methods?: string | string[] | undefined; allowedHeaders?: string | string[] | undefined; exposedHeaders?: string | string[] | undefined; credentials?: boolean | undefined; maxAge?: number | undefined; /** * @default false */ preflightContinue?: boolean | undefined; /** * @default 204 */ optionsSuccessStatus?: number | undefined; } type CorsOptionsDelegate&lt;T extends CorsRequest = CorsRequest&gt; = ( req: T, callback: (err: Error | null, options?: CorsOptions) =&gt; void, ) =&gt; void; } declare function e&lt;T extends e.CorsRequest = e.CorsRequest&gt;( options?: e.CorsOptions | e.CorsOptionsDelegate&lt;T&gt;, ): ( req: T, res: { statusCode?: number | undefined; setHeader(key: string, value: string): any; end(): any; }, next: (err?: any) =&gt; any, ) =&gt; void; export = e; . Additional Details . Last updated: Mon, 20 Nov 2023 23:36:24 GMT | Dependencies: @types/node | . Credits . These definitions were written by Alan Plum, and Gaurav Sharma. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/@types/cors/",
          "relUrl": "/node_backend_Trystan/node_modules/@types/cors/",
          "date": ""
      }
      
  

  
      ,"page110": {
          "title": "Installation",
          "content": "Installation . npm install --save @types/node . Summary . This package contains type definitions for node (https://nodejs.org/). . Details . Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/node. . Additional Details . Last updated: Thu, 07 Dec 2023 07:07:09 GMT | Dependencies: undici-types | . Credits . These definitions were written by Microsoft TypeScript, Alberto Schiabel, Alvis HT Tang, Andrew Makarov, Benjamin Toueg, Chigozirim C., David Junger, Deividas Bakanas, Eugene Y. Q. Shen, Hannes Magnusson, Huw, Kelvin Jin, Klaus Meinhardt, Lishude, Mariusz Wiktorczyk, Mohsen Azimi, Nicolas Even, Nikita Galkin, Parambir Singh, Sebastian Silbermann, Thomas den Hollander, Wilco Bakker, wwwy3y3, Samuel Ainsworth, Kyle Uehlein, Thanik Bhongbhibhat, Marcin Kopacz, Trivikram Kamat, Junxiao Shi, Ilia Baryshnikov, ExE Boss, Piotr Błażejewicz, Anna Henningsen, Victor Perin, Yongsheng Zhang, NodeJS Contributors, Linus Unnebäck, wafuwafu13, Matteo Collina, and Dmitry Semigradsky. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/@types/node/",
          "relUrl": "/node_backend_Trystan/node_modules/@types/node/",
          "date": ""
      }
      
  

  
      ,"page111": {
          "title": "accepts",
          "content": "accepts . . Higher level content negotiation based on negotiator. Extracted from koa for general use. . In addition to negotiator, it allows: . Allows types as an array or arguments list, ie ([&#39;text/html&#39;, &#39;application/json&#39;]) as well as (&#39;text/html&#39;, &#39;application/json&#39;). | Allows type shorthands such as json. | Returns false when no types match | Treats non-existent headers as * | . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install accepts . API . var accepts = require(&#39;accepts&#39;) . accepts(req) . Create a new Accepts object for the given req. . .charset(charsets) . Return the first accepted charset. If nothing in charsets is accepted, then false is returned. . .charsets() . Return the charsets that the request accepts, in the order of the client’s preference (most preferred first). . .encoding(encodings) . Return the first accepted encoding. If nothing in encodings is accepted, then false is returned. . .encodings() . Return the encodings that the request accepts, in the order of the client’s preference (most preferred first). . .language(languages) . Return the first accepted language. If nothing in languages is accepted, then false is returned. . .languages() . Return the languages that the request accepts, in the order of the client’s preference (most preferred first). . .type(types) . Return the first accepted type (and it is returned as the same text as what appears in the types array). If nothing in types is accepted, then false is returned. . The types array can contain full MIME types or file extensions. Any value that is not a full MIME types is passed to require(&#39;mime-types&#39;).lookup. . .types() . Return the types that the request accepts, in the order of the client’s preference (most preferred first). . Examples . Simple type negotiation . This simple example shows how to use accepts to return a different typed respond body based on what the client wants to accept. The server lists it’s preferences in order and will get back the best match between the client and server. . var accepts = require(&#39;accepts&#39;) var http = require(&#39;http&#39;) function app (req, res) { var accept = accepts(req) // the order of this list is significant; should be server preferred order switch (accept.type([&#39;json&#39;, &#39;html&#39;])) { case &#39;json&#39;: res.setHeader(&#39;Content-Type&#39;, &#39;application/json&#39;) res.write(&#39;{&quot;hello&quot;:&quot;world!&quot;}&#39;) break case &#39;html&#39;: res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;) res.write(&#39;&lt;b&gt;hello, world!&lt;/b&gt;&#39;) break default: // the fallback is text/plain, so no need to specify it above res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;) res.write(&#39;hello, world!&#39;) break } res.end() } http.createServer(app).listen(3000) . You can test this out with the cURL program: . curl -I -H&#39;Accept: text/html&#39; http://localhost:3000/ . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/accepts/",
          "relUrl": "/node_backend_Trystan/node_modules/accepts/",
          "date": ""
      }
      
  

  
      ,"page112": {
          "title": "Array Flatten",
          "content": "Array Flatten . . Flatten an array of nested arrays into a single flat array. Accepts an optional depth. . Installation . npm install array-flatten --save . Usage . var flatten = require(&#39;array-flatten&#39;) flatten([1, [2, [3, [4, [5], 6], 7], 8], 9]) //=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9] flatten([1, [2, [3, [4, [5], 6], 7], 8], 9], 2) //=&gt; [1, 2, 3, [4, [5], 6], 7, 8, 9] (function () { flatten(arguments) //=&gt; [1, 2, 3] })(1, [2, 3]) . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/array-flatten/",
          "relUrl": "/node_backend_Trystan/node_modules/array-flatten/",
          "date": ""
      }
      
  

  
      ,"page113": {
          "title": "base64id",
          "content": "base64id . Node.js module that generates a base64 id. . Uses crypto.randomBytes when available, falls back to unsafe methods for node.js &lt;= 0.4. . To increase performance, random bytes are buffered to minimize the number of synchronous calls to crypto.randomBytes. . Installation . $ npm install base64id . Usage . var base64id = require(‘base64id’); . var id = base64id.generateId(); .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/base64id/",
          "relUrl": "/node_backend_Trystan/node_modules/base64id/",
          "date": ""
      }
      
  

  
      ,"page114": {
          "title": "body-parser",
          "content": "body-parser . . Node.js body parsing middleware. . Parse incoming request bodies in a middleware before your handlers, available under the req.body property. . Note As req.body’s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, req.body.foo.toString() may fail in multiple ways, for example the foo property may not be there or may not be a string, and toString may not be a function and instead a string or other user input. . Learn about the anatomy of an HTTP transaction in Node.js. . This does not handle multipart bodies, due to their complex and typically large nature. For multipart bodies, you may be interested in the following modules: . busboy and connect-busboy | multiparty and connect-multiparty | formidable | multer | . This module provides the following parsers: . JSON body parser | Raw body parser | Text body parser | URL-encoded form body parser | . Other body parsers you might be interested in: . body | co-body | . Installation . $ npm install body-parser . API . var bodyParser = require(&#39;body-parser&#39;) . The bodyParser object exposes various factories to create middlewares. All middlewares will populate the req.body property with the parsed body when the Content-Type request header matches the type option, or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred. . The various errors returned by this module are described in the errors section. . bodyParser.json([options]) . Returns middleware that only parses json and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings. . A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body). . Options . The json function takes an optional options object that may contain any of the following keys: . inflate . When set to true, then deflated (compressed) bodies will be inflated; when false, deflated bodies are rejected. Defaults to true. . limit . Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the bytes library for parsing. Defaults to &#39;100kb&#39;. . reviver . The reviver option is passed directly to JSON.parse as the second argument. You can find more information on this argument in the MDN documentation about JSON.parse. . strict . When set to true, will only accept arrays and objects; when false will accept anything JSON.parse accepts. Defaults to true. . type . The type option is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, type option is passed directly to the type-is library and this can be an extension name (like json), a mime type (like application/json), or a mime type with a wildcard (like */* or */json). If a function, the type option is called as fn(req) and the request is parsed if it returns a truthy value. Defaults to application/json. . verify . The verify option, if supplied, is called as verify(req, res, buf, encoding), where buf is a Buffer of the raw request body and encoding is the encoding of the request. The parsing can be aborted by throwing an error. . bodyParser.raw([options]) . Returns middleware that parses all bodies as a Buffer and only looks at requests where the Content-Type header matches the type option. This parser supports automatic inflation of gzip and deflate encodings. . A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body). This will be a Buffer object of the body. . Options . The raw function takes an optional options object that may contain any of the following keys: . inflate . When set to true, then deflated (compressed) bodies will be inflated; when false, deflated bodies are rejected. Defaults to true. . limit . Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the bytes library for parsing. Defaults to &#39;100kb&#39;. . type . The type option is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, type option is passed directly to the type-is library and this can be an extension name (like bin), a mime type (like application/octet-stream), or a mime type with a wildcard (like */* or application/*). If a function, the type option is called as fn(req) and the request is parsed if it returns a truthy value. Defaults to application/octet-stream. . verify . The verify option, if supplied, is called as verify(req, res, buf, encoding), where buf is a Buffer of the raw request body and encoding is the encoding of the request. The parsing can be aborted by throwing an error. . bodyParser.text([options]) . Returns middleware that parses all bodies as a string and only looks at requests where the Content-Type header matches the type option. This parser supports automatic inflation of gzip and deflate encodings. . A new body string containing the parsed data is populated on the request object after the middleware (i.e. req.body). This will be a string of the body. . Options . The text function takes an optional options object that may contain any of the following keys: . defaultCharset . Specify the default character set for the text content if the charset is not specified in the Content-Type header of the request. Defaults to utf-8. . inflate . When set to true, then deflated (compressed) bodies will be inflated; when false, deflated bodies are rejected. Defaults to true. . limit . Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the bytes library for parsing. Defaults to &#39;100kb&#39;. . type . The type option is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, type option is passed directly to the type-is library and this can be an extension name (like txt), a mime type (like text/plain), or a mime type with a wildcard (like */* or text/*). If a function, the type option is called as fn(req) and the request is parsed if it returns a truthy value. Defaults to text/plain. . verify . The verify option, if supplied, is called as verify(req, res, buf, encoding), where buf is a Buffer of the raw request body and encoding is the encoding of the request. The parsing can be aborted by throwing an error. . bodyParser.urlencoded([options]) . Returns middleware that only parses urlencoded bodies and only looks at requests where the Content-Type header matches the type option. This parser accepts only UTF-8 encoding of the body and supports automatic inflation of gzip and deflate encodings. . A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body). This object will contain key-value pairs, where the value can be a string or array (when extended is false), or any type (when extended is true). . Options . The urlencoded function takes an optional options object that may contain any of the following keys: . extended . The extended option allows to choose between parsing the URL-encoded data with the querystring library (when false) or the qs library (when true). The “extended” syntax allows for rich objects and arrays to be encoded into the URL-encoded format, allowing for a JSON-like experience with URL-encoded. For more information, please see the qs library. . Defaults to true, but using the default has been deprecated. Please research into the difference between qs and querystring and choose the appropriate setting. . inflate . When set to true, then deflated (compressed) bodies will be inflated; when false, deflated bodies are rejected. Defaults to true. . limit . Controls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the bytes library for parsing. Defaults to &#39;100kb&#39;. . parameterLimit . The parameterLimit option controls the maximum number of parameters that are allowed in the URL-encoded data. If a request contains more parameters than this value, a 413 will be returned to the client. Defaults to 1000. . type . The type option is used to determine what media type the middleware will parse. This option can be a string, array of strings, or a function. If not a function, type option is passed directly to the type-is library and this can be an extension name (like urlencoded), a mime type (like application/x-www-form-urlencoded), or a mime type with a wildcard (like */x-www-form-urlencoded). If a function, the type option is called as fn(req) and the request is parsed if it returns a truthy value. Defaults to application/x-www-form-urlencoded. . verify . The verify option, if supplied, is called as verify(req, res, buf, encoding), where buf is a Buffer of the raw request body and encoding is the encoding of the request. The parsing can be aborted by throwing an error. . Errors . The middlewares provided by this module create errors using the http-errors module. The errors will typically have a status/statusCode property that contains the suggested HTTP response code, an expose property to determine if the message property should be displayed to the client, a type property to determine the type of error without matching against the message, and a body property containing the read body, if available. . The following are the common errors created, though any error can come through for various reasons. . content encoding unsupported . This error will occur when the request had a Content-Encoding header that contained an encoding but the “inflation” option was set to false. The status property is set to 415, the type property is set to &#39;encoding.unsupported&#39;, and the charset property will be set to the encoding that is unsupported. . entity parse failed . This error will occur when the request contained an entity that could not be parsed by the middleware. The status property is set to 400, the type property is set to &#39;entity.parse.failed&#39;, and the body property is set to the entity value that failed parsing. . entity verify failed . This error will occur when the request contained an entity that could not be failed verification by the defined verify option. The status property is set to 403, the type property is set to &#39;entity.verify.failed&#39;, and the body property is set to the entity value that failed verification. . request aborted . This error will occur when the request is aborted by the client before reading the body has finished. The received property will be set to the number of bytes received before the request was aborted and the expected property is set to the number of expected bytes. The status property is set to 400 and type property is set to &#39;request.aborted&#39;. . request entity too large . This error will occur when the request body’s size is larger than the “limit” option. The limit property will be set to the byte limit and the length property will be set to the request body’s length. The status property is set to 413 and the type property is set to &#39;entity.too.large&#39;. . request size did not match content length . This error will occur when the request’s length did not match the length from the Content-Length header. This typically occurs when the request is malformed, typically when the Content-Length header was calculated based on characters instead of bytes. The status property is set to 400 and the type property is set to &#39;request.size.invalid&#39;. . stream encoding should not be set . This error will occur when something called the req.setEncoding method prior to this middleware. This module operates directly on bytes only and you cannot call req.setEncoding when using this module. The status property is set to 500 and the type property is set to &#39;stream.encoding.set&#39;. . stream is not readable . This error will occur when the request is no longer readable when this middleware attempts to read it. This typically means something other than a middleware from this module read the request body already and the middleware was also configured to read the same request. The status property is set to 500 and the type property is set to &#39;stream.not.readable&#39;. . too many parameters . This error will occur when the content of the request exceeds the configured parameterLimit for the urlencoded parser. The status property is set to 413 and the type property is set to &#39;parameters.too.many&#39;. . unsupported charset “BOGUS” . This error will occur when the request had a charset parameter in the Content-Type header, but the iconv-lite module does not support it OR the parser does not support it. The charset is contained in the message as well as in the charset property. The status property is set to 415, the type property is set to &#39;charset.unsupported&#39;, and the charset property is set to the charset that is unsupported. . unsupported content encoding “bogus” . This error will occur when the request had a Content-Encoding header that contained an unsupported encoding. The encoding is contained in the message as well as in the encoding property. The status property is set to 415, the type property is set to &#39;encoding.unsupported&#39;, and the encoding property is set to the encoding that is unsupported. . Examples . Express/Connect top-level generic . This example demonstrates adding a generic JSON and URL-encoded parser as a top-level middleware, which will parse the bodies of all incoming requests. This is the simplest setup. . var express = require(&#39;express&#39;) var bodyParser = require(&#39;body-parser&#39;) var app = express() // parse application/x-www-form-urlencoded app.use(bodyParser.urlencoded({ extended: false })) // parse application/json app.use(bodyParser.json()) app.use(function (req, res) { res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;) res.write(&#39;you posted: n&#39;) res.end(JSON.stringify(req.body, null, 2)) }) . Express route-specific . This example demonstrates adding body parsers specifically to the routes that need them. In general, this is the most recommended way to use body-parser with Express. . var express = require(&#39;express&#39;) var bodyParser = require(&#39;body-parser&#39;) var app = express() // create application/json parser var jsonParser = bodyParser.json() // create application/x-www-form-urlencoded parser var urlencodedParser = bodyParser.urlencoded({ extended: false }) // POST /login gets urlencoded bodies app.post(&#39;/login&#39;, urlencodedParser, function (req, res) { res.send(&#39;welcome, &#39; + req.body.username) }) // POST /api/users gets JSON bodies app.post(&#39;/api/users&#39;, jsonParser, function (req, res) { // create user in req.body }) . Change accepted type for parsers . All the parsers accept a type option which allows you to change the Content-Type that the middleware will parse. . var express = require(&#39;express&#39;) var bodyParser = require(&#39;body-parser&#39;) var app = express() // parse various different custom JSON types as JSON app.use(bodyParser.json({ type: &#39;application/*+json&#39; })) // parse some custom thing into a Buffer app.use(bodyParser.raw({ type: &#39;application/vnd.custom-type&#39; })) // parse an HTML body into a string app.use(bodyParser.text({ type: &#39;text/html&#39; })) . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/body-parser/",
          "relUrl": "/node_backend_Trystan/node_modules/body-parser/",
          "date": ""
      }
      
  

  
      ,"page115": {
          "title": "debug",
          "content": "debug . . A tiny node.js debugging utility modelled after node core’s debugging technique. . Discussion around the V3 API is under way here . Installation . $ npm install debug . Usage . debug exposes a function; simply pass this function the name of your module, and it will return a decorated version of console.error for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole. . Example app.js: . var debug = require(&#39;debug&#39;)(&#39;http&#39;) , http = require(&#39;http&#39;) , name = &#39;My App&#39;; // fake app debug(&#39;booting %s&#39;, name); http.createServer(function(req, res){ debug(req.method + &#39; &#39; + req.url); res.end(&#39;hello n&#39;); }).listen(3000, function(){ debug(&#39;listening&#39;); }); // fake worker of some kind require(&#39;./worker&#39;); . Example worker.js: . var debug = require(&#39;debug&#39;)(&#39;worker&#39;); setInterval(function(){ debug(&#39;doing some work&#39;); }, 1000); . The DEBUG environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: . . . Windows note . On Windows the environment variable is set using the set command. . set DEBUG=*,-not_this . Note that PowerShell uses different syntax to set environment variables. . $env:DEBUG = &quot;*,-not_this&quot; . Then, run the program to be debugged as usual. . Millisecond diff . When actively developing an application it can be useful to see when the time spent between one debug() call and the next. Suppose for example you invoke debug() before requesting a resource, and after as well, the “+NNNms” will show you how much time was spent between calls. . . When stdout is not a TTY, Date#toUTCString() is used, making it more useful for logging the debug information as shown below: . . Conventions . If you’re using this in one or more of your libraries, you should use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you should prefix them with your library name and use “:” to separate features. For example “bodyParser” from Connect would then be “connect:bodyParser”. . Wildcards . The * character may be used as a wildcard. Suppose for example your library has debuggers named “connect:bodyParser”, “connect:compress”, “connect:session”, instead of listing all three with DEBUG=connect:bodyParser,connect:compress,connect:session, you may simply do DEBUG=connect:*, or to run everything using this module simply use DEBUG=*. . You can also exclude specific debuggers by prefixing them with a “-“ character. For example, DEBUG=*,-connect:* would include all debuggers except those starting with “connect:”. . Environment Variables . When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging: . Name Purpose . DEBUG | Enables/disables specific debugging namespaces. | . DEBUG_COLORS | Whether or not to use colors in the debug output. | . DEBUG_DEPTH | Object inspection depth. | . DEBUG_SHOW_HIDDEN | Shows hidden properties on inspected objects. | . Note: The environment variables beginning with DEBUG_ end up being converted into an Options object that gets used with %o/%O formatters. See the Node.js documentation for util.inspect() for the complete list. . Formatters . Debug uses printf-style formatting. Below are the officially supported formatters: . Formatter Representation . %O | Pretty-print an Object on multiple lines. | . %o | Pretty-print an Object all on a single line. | . %s | String. | . %d | Number (both integer and float). | . %j | JSON. Replaced with the string ‘[Circular]’ if the argument contains circular references. | . %% | Single percent sign (‘%’). This does not consume an argument. | . Custom formatters . You can add custom formatters by extending the debug.formatters object. For example, if you wanted to add support for rendering a Buffer as hex with %h, you could do something like: . const createDebug = require(&#39;debug&#39;) createDebug.formatters.h = (v) =&gt; { return v.toString(&#39;hex&#39;) } // …elsewhere const debug = createDebug(&#39;foo&#39;) debug(&#39;this is hex: %h&#39;, new Buffer(&#39;hello world&#39;)) // foo this is hex: 68656c6c6f20776f726c6421 +0ms . Browser support . You can build a browser-ready script using browserify, or just use the browserify-as-a-service build, if you don’t want to build it yourself. . Debug’s enable state is currently persisted by localStorage. Consider the situation shown below where you have worker:a and worker:b, and wish to debug both. You can enable this using localStorage.debug: . localStorage.debug = &#39;worker:*&#39; . And then refresh the page. . a = debug(&#39;worker:a&#39;); b = debug(&#39;worker:b&#39;); setInterval(function(){ a(&#39;doing some work&#39;); }, 1000); setInterval(function(){ b(&#39;doing some work&#39;); }, 1200); . Web Inspector Colors . Colors are also enabled on “Web Inspectors” that understand the %c formatting option. These are WebKit web inspectors, Firefox (since version 31) and the Firebug plugin for Firefox (any version). . Colored output looks something like: . . Output streams . By default debug will log to stderr, however this can be configured per-namespace by overriding the log method: . Example stdout.js: . var debug = require(&#39;debug&#39;); var error = debug(&#39;app:error&#39;); // by default stderr is used error(&#39;goes to stderr!&#39;); var log = debug(&#39;app:log&#39;); // set this namespace to log via console.log log.log = console.log.bind(console); // don&#39;t forget to bind to console! log(&#39;goes to stdout&#39;); error(&#39;still goes to stderr!&#39;); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error(&#39;now goes to stdout via console.info&#39;); log(&#39;still goes to stdout, but via console.info now&#39;); . Authors . TJ Holowaychuk | Nathan Rajlich | Andrew Rhyne | . Backers . Support us with a monthly donation and help us continue our activities. [Become a backer] . . Sponsors . Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] . . License . (The MIT License) . Copyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt; . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. . THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/body-parser/node_modules/debug/",
          "relUrl": "/node_backend_Trystan/node_modules/body-parser/node_modules/debug/",
          "date": ""
      }
      
  

  
      ,"page116": {
          "title": "ms",
          "content": "ms . . Use this package to easily convert various time formats to milliseconds. . Examples . ms(&#39;2 days&#39;) // 172800000 ms(&#39;1d&#39;) // 86400000 ms(&#39;10h&#39;) // 36000000 ms(&#39;2.5 hrs&#39;) // 9000000 ms(&#39;2h&#39;) // 7200000 ms(&#39;1m&#39;) // 60000 ms(&#39;5s&#39;) // 5000 ms(&#39;1y&#39;) // 31557600000 ms(&#39;100&#39;) // 100 . Convert from milliseconds . ms(60000) // &quot;1m&quot; ms(2 * 60000) // &quot;2m&quot; ms(ms(&#39;10 hours&#39;)) // &quot;10h&quot; . Time format written-out . ms(60000, { long: true }) // &quot;1 minute&quot; ms(2 * 60000, { long: true }) // &quot;2 minutes&quot; ms(ms(&#39;10 hours&#39;), { long: true }) // &quot;10 hours&quot; . Features . Works both in node and in the browser. | If a number is supplied to ms, a string with a unit is returned. | If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for &#39;100&#39;). | If you pass a string with a number and a valid unit, the number of equivalent ms is returned. | . Caught a bug? . Fork this repository to your own GitHub account and then clone it to your local device | Link the package to the global module directory: npm link | Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms. Instead of the default one from npm, node will now use your clone of ms! | As always, you can run the tests using: npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/body-parser/node_modules/ms/",
          "relUrl": "/node_backend_Trystan/node_modules/body-parser/node_modules/ms/",
          "date": ""
      }
      
  

  
      ,"page117": {
          "title": "Bytes utility",
          "content": "Bytes utility . . Utility to parse a string bytes (ex: 1TB) to bytes (1099511627776) and vice-versa. . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install bytes . Usage . var bytes = require(&#39;bytes&#39;); . bytes(number｜string value, [options]): number｜string｜null . Default export function. Delegates to either bytes.format or bytes.parse based on the type of value. . Arguments . Name Type Description . value | number｜string | Number value to format or string value to parse | . options | Object | Conversion options for format | . Returns . Name Type Description . results | string｜number｜null | Return null upon error. Numeric value in bytes, or string value otherwise. | . Example . bytes(1024); // output: &#39;1KB&#39; bytes(&#39;1KB&#39;); // output: 1024 . bytes.format(number value, [options]): string｜null . Format the given value in bytes into a string. If the value is negative, it is kept as such. If it is a float, it is rounded. . Arguments . Name Type Description . value | number | Value in bytes | . options | Object | Conversion options | . Options . Property Type Description . decimalPlaces | number｜null | Maximum number of decimal places to include in output. Default value to 2. | . fixedDecimals | boolean｜null | Whether to always display the maximum number of decimal places. Default value to false | . thousandsSeparator | string｜null | Example of values: &#39; &#39;, &#39;,&#39; and &#39;.&#39;… Default value to &#39;&#39;. | . unit | string｜null | The unit in which the result will be returned (B/KB/MB/GB/TB). Default value to &#39;&#39; (which means auto detect). | . unitSeparator | string｜null | Separator to use between number and unit. Default value to &#39;&#39;. | . Returns . Name Type Description . results | string｜null | Return null upon error. String value otherwise. | . Example . bytes.format(1024); // output: &#39;1KB&#39; bytes.format(1000); // output: &#39;1000B&#39; bytes.format(1000, {thousandsSeparator: &#39; &#39;}); // output: &#39;1 000B&#39; bytes.format(1024 * 1.7, {decimalPlaces: 0}); // output: &#39;2KB&#39; bytes.format(1024, {unitSeparator: &#39; &#39;}); // output: &#39;1 KB&#39; . bytes.parse(string｜number value): number｜null . Parse the string value into an integer in bytes. If no unit is given, or value is a number, it is assumed the value is in bytes. . Supported units and abbreviations are as follows and are case-insensitive: . b for bytes | kb for kilobytes | mb for megabytes | gb for gigabytes | tb for terabytes | pb for petabytes | . The units are in powers of two, not ten. This means 1kb = 1024b according to this parser. . Arguments . Name Type Description . value | string｜number | String to parse, or number in bytes. | . Returns . Name Type Description . results | number｜null | Return null upon error. Value in bytes otherwise. | . Example . bytes.parse(&#39;1KB&#39;); // output: 1024 bytes.parse(&#39;1024&#39;); // output: 1024 bytes.parse(1024); // output: 1024 . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/bytes/",
          "relUrl": "/node_backend_Trystan/node_modules/bytes/",
          "date": ""
      }
      
  

  
      ,"page118": {
          "title": "call-bind [![Version Badge][npm-version-svg]][package-url]",
          "content": "call-bind . . . Robustly .call.bind() a function. . Getting started . npm install --save call-bind . Usage/Examples . const assert = require(&#39;assert&#39;); const callBind = require(&#39;call-bind&#39;); const callBound = require(&#39;call-bind/callBound&#39;); function f(a, b) { assert.equal(this, 1); assert.equal(a, 2); assert.equal(b, 3); assert.equal(arguments.length, 2); } const fBound = callBind(f); const slice = callBound(&#39;Array.prototype.slice&#39;); delete Function.prototype.call; delete Function.prototype.bind; fBound(1, 2, 3); assert.deepEqual(slice([1, 2, 3, 4], 1, -1), [2, 3]); . Tests . Clone the repo, npm install, and run npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/call-bind/",
          "relUrl": "/node_backend_Trystan/node_modules/call-bind/",
          "date": ""
      }
      
  

  
      ,"page119": {
          "title": "content-disposition",
          "content": "content-disposition . . Create and parse HTTP Content-Disposition header . Installation . $ npm install content-disposition . API . var contentDisposition = require(&#39;content-disposition&#39;) . contentDisposition(filename, options) . Create an attachment Content-Disposition header value using the given file name, if supplied. The filename is optional and if no file name is desired, but you want to specify options, set filename to undefined. . res.setHeader(&#39;Content-Disposition&#39;, contentDisposition(&#39;∫ maths.pdf&#39;)) . note HTTP headers are of the ISO-8859-1 character set. If you are writing this header through a means different from setHeader in Node.js, you’ll want to specify the &#39;binary&#39; encoding in Node.js. . Options . contentDisposition accepts these properties in the options object. . fallback . If the filename option is outside ISO-8859-1, then the file name is actually stored in a supplemental field for clients that support Unicode file names and a ISO-8859-1 version of the file name is automatically generated. . This specifies the ISO-8859-1 file name to override the automatic generation or disables the generation all together, defaults to true. . A string will specify the ISO-8859-1 file name to use in place of automatic generation. | false will disable including a ISO-8859-1 file name and only include the Unicode version (unless the file name is already ISO-8859-1). | true will enable automatic generation if the file name is outside ISO-8859-1. | . If the filename option is ISO-8859-1 and this option is specified and has a different value, then the filename option is encoded in the extended field and this set as the fallback field, even though they are both ISO-8859-1. . type . Specifies the disposition type, defaults to &quot;attachment&quot;. This can also be &quot;inline&quot;, or any other value (all values except inline are treated like attachment, but can convey additional information if both parties agree to it). The type is normalized to lower-case. . contentDisposition.parse(string) . var disposition = contentDisposition.parse(&#39;attachment; filename=&quot;EURO rates.txt&quot;; filename*=UTF-8 &#39; &#39;%e2%82%ac%20rates.txt&#39;) . Parse a Content-Disposition header string. This automatically handles extended (“Unicode”) parameters by decoding them and providing them under the standard parameter name. This will return an object with the following properties (examples are shown for the string &#39;attachment; filename=&quot;EURO rates.txt&quot;; filename*=UTF-8 &#39; &#39;%e2%82%ac%20rates.txt&#39;): . type: The disposition type (always lower case). Example: &#39;attachment&#39; . | parameters: An object of the parameters in the disposition (name of parameter always lower case and extended versions replace non-extended versions). Example: {filename: &quot;€ rates.txt&quot;} . | . Examples . Send a file for download . var contentDisposition = require(&#39;content-disposition&#39;) var destroy = require(&#39;destroy&#39;) var fs = require(&#39;fs&#39;) var http = require(&#39;http&#39;) var onFinished = require(&#39;on-finished&#39;) var filePath = &#39;/path/to/public/plans.pdf&#39; http.createServer(function onRequest (req, res) { // set headers res.setHeader(&#39;Content-Type&#39;, &#39;application/pdf&#39;) res.setHeader(&#39;Content-Disposition&#39;, contentDisposition(filePath)) // send file var stream = fs.createReadStream(filePath) stream.pipe(res) onFinished(res, function () { destroy(stream) }) }) . Testing . $ npm test . References . RFC 2616: Hypertext Transfer Protocol – HTTP/1.1 | RFC 5987: Character Set and Language Encoding for Hypertext Transfer Protocol (HTTP) Header Field Parameters | RFC 6266: Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP) | Test Cases for HTTP Content-Disposition header field (RFC 6266) and the Encodings defined in RFCs 2047, 2231 and 5987 | . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/content-disposition/",
          "relUrl": "/node_backend_Trystan/node_modules/content-disposition/",
          "date": ""
      }
      
  

  
      ,"page120": {
          "title": "content-type",
          "content": "content-type . . Create and parse HTTP Content-Type header according to RFC 7231 . Installation . $ npm install content-type . API . var contentType = require(&#39;content-type&#39;) . contentType.parse(string) . var obj = contentType.parse(&#39;image/svg+xml; charset=utf-8&#39;) . Parse a Content-Type header. This will return an object with the following properties (examples are shown for the string &#39;image/svg+xml; charset=utf-8&#39;): . type: The media type (the type and subtype, always lower case). Example: &#39;image/svg+xml&#39; . | parameters: An object of the parameters in the media type (name of parameter always lower case). Example: {charset: &#39;utf-8&#39;} . | . Throws a TypeError if the string is missing or invalid. . contentType.parse(req) . var obj = contentType.parse(req) . Parse the Content-Type header from the given req. Short-cut for contentType.parse(req.headers[&#39;content-type&#39;]). . Throws a TypeError if the Content-Type header is missing or invalid. . contentType.parse(res) . var obj = contentType.parse(res) . Parse the Content-Type header set on the given res. Short-cut for contentType.parse(res.getHeader(&#39;content-type&#39;)). . Throws a TypeError if the Content-Type header is missing or invalid. . contentType.format(obj) . var str = contentType.format({ type: &#39;image/svg+xml&#39;, parameters: { charset: &#39;utf-8&#39; } }) . Format an object into a Content-Type header. This will return a string of the content type for the given object with the following properties (examples are shown that produce the string &#39;image/svg+xml; charset=utf-8&#39;): . type: The media type (will be lower-cased). Example: &#39;image/svg+xml&#39; . | parameters: An object of the parameters in the media type (name of the parameter will be lower-cased). Example: {charset: &#39;utf-8&#39;} . | . Throws a TypeError if the object contains an invalid type or parameter names. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/content-type/",
          "relUrl": "/node_backend_Trystan/node_modules/content-type/",
          "date": ""
      }
      
  

  
      ,"page121": {
          "title": "cookie-signature",
          "content": "cookie-signature . Sign and unsign cookies. . Example . var cookie = require(&#39;cookie-signature&#39;); var val = cookie.sign(&#39;hello&#39;, &#39;tobiiscool&#39;); val.should.equal(&#39;hello.DGDUkGlIkCzPz+C0B064FNgHdEjox7ch8tOBGslZ5QI&#39;); var val = cookie.sign(&#39;hello&#39;, &#39;tobiiscool&#39;); cookie.unsign(val, &#39;tobiiscool&#39;).should.equal(&#39;hello&#39;); cookie.unsign(val, &#39;luna&#39;).should.be.false; . License . (The MIT License) . Copyright (c) 2012 LearnBoost &lt;tj@learnboost.com&gt; . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. . THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/cookie-signature/",
          "relUrl": "/node_backend_Trystan/node_modules/cookie-signature/",
          "date": ""
      }
      
  

  
      ,"page122": {
          "title": "cookie",
          "content": "cookie . . Basic HTTP cookie parser and serializer for HTTP servers. . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install cookie . API . var cookie = require(&#39;cookie&#39;); . cookie.parse(str, options) . Parse an HTTP Cookie header string and returning an object of all cookie name-value pairs. The str argument is the string representing a Cookie header value and options is an optional object containing additional parsing options. . var cookies = cookie.parse(&#39;foo=bar; equation=E%3Dmc%5E2&#39;); // { foo: &#39;bar&#39;, equation: &#39;E=mc^2&#39; } . Options . cookie.parse accepts these properties in the options object. . decode . Specifies a function that will be used to decode a cookie’s value. Since the value of a cookie has a limited character set (and must be a simple string), this function can be used to decode a previously-encoded cookie value into a JavaScript string or other object. . The default function is the global decodeURIComponent, which will decode any URL-encoded sequences into their byte representations. . note if an error is thrown from this function, the original, non-decoded cookie value will be returned as the cookie’s value. . cookie.serialize(name, value, options) . Serialize a cookie name-value pair into a Set-Cookie header string. The name argument is the name for the cookie, the value argument is the value to set the cookie to, and the options argument is an optional object containing additional serialization options. . var setCookie = cookie.serialize(&#39;foo&#39;, &#39;bar&#39;); // foo=bar . Options . cookie.serialize accepts these properties in the options object. . domain . Specifies the value for the Domain Set-Cookie attribute. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain. . encode . Specifies a function that will be used to encode a cookie’s value. Since value of a cookie has a limited character set (and must be a simple string), this function can be used to encode a value into a string suited for a cookie’s value. . The default function is the global encodeURIComponent, which will encode a JavaScript string into UTF-8 byte sequences and then URL-encode any that fall outside of the cookie range. . expires . Specifies the Date object to be the value for the Expires Set-Cookie attribute. By default, no expiration is set, and most clients will consider this a “non-persistent cookie” and will delete it on a condition like exiting a web browser application. . note the cookie storage model specification states that if both expires and maxAge are set, then maxAge takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time. . httpOnly . Specifies the boolean value for the HttpOnly Set-Cookie attribute. When truthy, the HttpOnly attribute is set, otherwise it is not. By default, the HttpOnly attribute is not set. . note be careful when setting this to true, as compliant clients will not allow client-side JavaScript to see the cookie in document.cookie. . maxAge . Specifies the number (in seconds) to be the value for the Max-Age Set-Cookie attribute. The given number will be converted to an integer by rounding down. By default, no maximum age is set. . note the cookie storage model specification states that if both expires and maxAge are set, then maxAge takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time. . path . Specifies the value for the Path Set-Cookie attribute. By default, the path is considered the “default path”. . sameSite . Specifies the boolean or string to be the value for the SameSite Set-Cookie attribute. . true will set the SameSite attribute to Strict for strict same site enforcement. | false will not set the SameSite attribute. | &#39;lax&#39; will set the SameSite attribute to Lax for lax same site enforcement. | &#39;none&#39; will set the SameSite attribute to None for an explicit cross-site cookie. | &#39;strict&#39; will set the SameSite attribute to Strict for strict same site enforcement. | . More information about the different enforcement levels can be found in the specification. . note This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it. . secure . Specifies the boolean value for the Secure Set-Cookie attribute. When truthy, the Secure attribute is set, otherwise it is not. By default, the Secure attribute is not set. . note be careful when setting this to true, as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection. . Example . The following example uses this module in conjunction with the Node.js core HTTP server to prompt a user for their name and display it back on future visits. . var cookie = require(&#39;cookie&#39;); var escapeHtml = require(&#39;escape-html&#39;); var http = require(&#39;http&#39;); var url = require(&#39;url&#39;); function onRequest(req, res) { // Parse the query string var query = url.parse(req.url, true, true).query; if (query &amp;&amp; query.name) { // Set a new cookie with the name res.setHeader(&#39;Set-Cookie&#39;, cookie.serialize(&#39;name&#39;, String(query.name), { httpOnly: true, maxAge: 60 * 60 * 24 * 7 // 1 week })); // Redirect back after setting cookie res.statusCode = 302; res.setHeader(&#39;Location&#39;, req.headers.referer || &#39;/&#39;); res.end(); return; } // Parse the cookies on the request var cookies = cookie.parse(req.headers.cookie || &#39;&#39;); // Get the visitor name set in the cookie var name = cookies.name; res.setHeader(&#39;Content-Type&#39;, &#39;text/html; charset=UTF-8&#39;); if (name) { res.write(&#39;&lt;p&gt;Welcome back, &lt;b&gt;&#39; + escapeHtml(name) + &#39;&lt;/b&gt;!&lt;/p&gt;&#39;); } else { res.write(&#39;&lt;p&gt;Hello, new visitor!&lt;/p&gt;&#39;); } res.write(&#39;&lt;form method=&quot;GET&quot;&gt;&#39;); res.write(&#39;&lt;input placeholder=&quot;enter your name&quot; name=&quot;name&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;Set Name&quot;&gt;&#39;); res.end(&#39;&lt;/form&gt;&#39;); } http.createServer(onRequest).listen(3000); . Testing . $ npm test . Benchmark . $ npm run bench &gt; cookie@0.4.1 bench &gt; node benchmark/index.js node@16.13.1 v8@9.4.146.24-node.14 uv@1.42.0 zlib@1.2.11 brotli@1.0.9 ares@1.18.1 modules@93 nghttp2@1.45.1 napi@8 llhttp@6.0.4 openssl@1.1.1l+quic cldr@39.0 icu@69.1 tz@2021a unicode@13.0 ngtcp2@0.1.0-DEV nghttp3@0.1.0-DEV &gt; node benchmark/parse-top.js cookie.parse - top sites 15 tests completed. parse accounts.google.com x 504,358 ops/sec ±6.55% (171 runs sampled) parse apple.com x 1,369,991 ops/sec ±0.84% (189 runs sampled) parse cloudflare.com x 360,669 ops/sec ±3.75% (182 runs sampled) parse docs.google.com x 521,496 ops/sec ±4.90% (180 runs sampled) parse drive.google.com x 553,514 ops/sec ±0.59% (189 runs sampled) parse en.wikipedia.org x 286,052 ops/sec ±0.62% (188 runs sampled) parse linkedin.com x 178,817 ops/sec ±0.61% (192 runs sampled) parse maps.google.com x 284,585 ops/sec ±0.68% (188 runs sampled) parse microsoft.com x 161,230 ops/sec ±0.56% (192 runs sampled) parse play.google.com x 352,144 ops/sec ±1.01% (181 runs sampled) parse plus.google.com x 275,204 ops/sec ±7.78% (156 runs sampled) parse support.google.com x 339,493 ops/sec ±1.02% (191 runs sampled) parse www.google.com x 286,110 ops/sec ±0.90% (191 runs sampled) parse youtu.be x 548,557 ops/sec ±0.60% (184 runs sampled) parse youtube.com x 545,293 ops/sec ±0.65% (191 runs sampled) &gt; node benchmark/parse.js cookie.parse - generic 6 tests completed. simple x 1,266,646 ops/sec ±0.65% (191 runs sampled) decode x 838,413 ops/sec ±0.60% (191 runs sampled) unquote x 877,820 ops/sec ±0.72% (189 runs sampled) duplicates x 516,680 ops/sec ±0.61% (191 runs sampled) 10 cookies x 156,874 ops/sec ±0.52% (189 runs sampled) 100 cookies x 14,663 ops/sec ±0.53% (191 runs sampled) . References . RFC 6265: HTTP State Management Mechanism | Same-site Cookies | . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/cookie/",
          "relUrl": "/node_backend_Trystan/node_modules/cookie/",
          "date": ""
      }
      
  

  
      ,"page123": {
          "title": "cors",
          "content": "cors . . CORS is a node.js package for providing a Connect/Express middleware that can be used to enable CORS with various options. . Follow me (@troygoode) on Twitter! . Installation | Usage Simple Usage | Enable CORS for a Single Route | Configuring CORS | Configuring CORS Asynchronously | Enabling CORS Pre-Flight | . | Configuration Options | Demo | License | Author | . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install cors . Usage . Simple Usage (Enable All CORS Requests) . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() app.use(cors()) app.get(&#39;/products/:id&#39;, function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for all origins!&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Enable CORS for a Single Route . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() app.get(&#39;/products/:id&#39;, cors(), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for a Single Route&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Configuring CORS . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() var corsOptions = { origin: &#39;http://example.com&#39;, optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204 } app.get(&#39;/products/:id&#39;, cors(corsOptions), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for only example.com.&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Configuring CORS w/ Dynamic Origin . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() var whitelist = [&#39;http://example1.com&#39;, &#39;http://example2.com&#39;] var corsOptions = { origin: function (origin, callback) { if (whitelist.indexOf(origin) !== -1) { callback(null, true) } else { callback(new Error(&#39;Not allowed by CORS&#39;)) } } } app.get(&#39;/products/:id&#39;, cors(corsOptions), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for a whitelisted domain.&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . If you do not want to block REST tools or server-to-server requests, add a !origin check in the origin function like so: . var corsOptions = { origin: function (origin, callback) { if (whitelist.indexOf(origin) !== -1 || !origin) { callback(null, true) } else { callback(new Error(&#39;Not allowed by CORS&#39;)) } } } . Enabling CORS Pre-Flight . Certain CORS requests are considered ‘complex’ and require an initial OPTIONS request (called the “pre-flight request”). An example of a ‘complex’ CORS request is one that uses an HTTP verb other than GET/HEAD/POST (such as DELETE) or that uses custom headers. To enable pre-flighting, you must add a new OPTIONS handler for the route you want to support: . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() app.options(&#39;/products/:id&#39;, cors()) // enable pre-flight request for DELETE request app.del(&#39;/products/:id&#39;, cors(), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for all origins!&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . You can also enable pre-flight across-the-board like so: . app.options(&#39;*&#39;, cors()) // include before other routes . Configuring CORS Asynchronously . var express = require(&#39;express&#39;) var cors = require(&#39;cors&#39;) var app = express() var whitelist = [&#39;http://example1.com&#39;, &#39;http://example2.com&#39;] var corsOptionsDelegate = function (req, callback) { var corsOptions; if (whitelist.indexOf(req.header(&#39;Origin&#39;)) !== -1) { corsOptions = { origin: true } // reflect (enable) the requested origin in the CORS response } else { corsOptions = { origin: false } // disable CORS for this request } callback(null, corsOptions) // callback expects two parameters: error and options } app.get(&#39;/products/:id&#39;, cors(corsOptionsDelegate), function (req, res, next) { res.json({msg: &#39;This is CORS-enabled for a whitelisted domain.&#39;}) }) app.listen(80, function () { console.log(&#39;CORS-enabled web server listening on port 80&#39;) }) . Configuration Options . origin: Configures the Access-Control-Allow-Origin CORS header. Possible values: Boolean - set origin to true to reflect the request origin, as defined by req.header(&#39;Origin&#39;), or set it to false to disable CORS. | String - set origin to a specific origin. For example if you set it to &quot;http://example.com&quot; only requests from “http://example.com” will be allowed. | RegExp - set origin to a regular expression pattern which will be used to test the request origin. If it’s a match, the request origin will be reflected. For example the pattern /example .com$/ will reflect any request that is coming from an origin ending with “example.com”. | Array - set origin to an array of valid origins. Each origin can be a String or a RegExp. For example [&quot;http://example1.com&quot;, / .example2 .com$/] will accept any request from “http://example1.com” or from a subdomain of “example2.com”. | Function - set origin to a function implementing some custom logic. The function takes the request origin as the first parameter and a callback (which expects the signature err [object], allow [bool]) as the second. | . | methods: Configures the Access-Control-Allow-Methods CORS header. Expects a comma-delimited string (ex: ‘GET,PUT,POST’) or an array (ex: [&#39;GET&#39;, &#39;PUT&#39;, &#39;POST&#39;]). | allowedHeaders: Configures the Access-Control-Allow-Headers CORS header. Expects a comma-delimited string (ex: ‘Content-Type,Authorization’) or an array (ex: [&#39;Content-Type&#39;, &#39;Authorization&#39;]). If not specified, defaults to reflecting the headers specified in the request’s Access-Control-Request-Headers header. | exposedHeaders: Configures the Access-Control-Expose-Headers CORS header. Expects a comma-delimited string (ex: ‘Content-Range,X-Content-Range’) or an array (ex: [&#39;Content-Range&#39;, &#39;X-Content-Range&#39;]). If not specified, no custom headers are exposed. | credentials: Configures the Access-Control-Allow-Credentials CORS header. Set to true to pass the header, otherwise it is omitted. | maxAge: Configures the Access-Control-Max-Age CORS header. Set to an integer to pass the header, otherwise it is omitted. | preflightContinue: Pass the CORS preflight response to the next handler. | optionsSuccessStatus: Provides a status code to use for successful OPTIONS requests, since some legacy browsers (IE11, various SmartTVs) choke on 204. | . The default configuration is the equivalent of: . { &quot;origin&quot;: &quot;*&quot;, &quot;methods&quot;: &quot;GET,HEAD,PUT,PATCH,POST,DELETE&quot;, &quot;preflightContinue&quot;: false, &quot;optionsSuccessStatus&quot;: 204 } . For details on the effect of each CORS header, read this article on HTML5 Rocks. . Demo . A demo that illustrates CORS working (and not working) using jQuery is available here: http://node-cors-client.herokuapp.com/ . Code for that demo can be found here: . Client: https://github.com/TroyGoode/node-cors-client | Server: https://github.com/TroyGoode/node-cors-server | . License . MIT License . Author . Troy Goode (troygoode@gmail.com) .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/cors/",
          "relUrl": "/node_backend_Trystan/node_modules/cors/",
          "date": ""
      }
      
  

  
      ,"page124": {
          "title": "debug",
          "content": "debug . . . A tiny JavaScript debugging utility modelled after Node.js core’s debugging technique. Works in Node.js and web browsers. . Installation . $ npm install debug . Usage . debug exposes a function; simply pass this function the name of your module, and it will return a decorated version of console.error for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole. . Example app.js: . var debug = require(&#39;debug&#39;)(&#39;http&#39;) , http = require(&#39;http&#39;) , name = &#39;My App&#39;; // fake app debug(&#39;booting %o&#39;, name); http.createServer(function(req, res){ debug(req.method + &#39; &#39; + req.url); res.end(&#39;hello n&#39;); }).listen(3000, function(){ debug(&#39;listening&#39;); }); // fake worker of some kind require(&#39;./worker&#39;); . Example worker.js: . var a = require(&#39;debug&#39;)(&#39;worker:a&#39;) , b = require(&#39;debug&#39;)(&#39;worker:b&#39;); function work() { a(&#39;doing lots of uninteresting work&#39;); setTimeout(work, Math.random() * 1000); } work(); function workb() { b(&#39;doing some work&#39;); setTimeout(workb, Math.random() * 2000); } workb(); . The DEBUG environment variable is then used to enable these based on space or comma-delimited names. . Here are some examples: . . Windows command prompt notes . CMD . On Windows the environment variable is set using the set command. . set DEBUG=*,-not_this . Example: . set DEBUG=* &amp; node app.js . PowerShell (VS Code default) . PowerShell uses different syntax to set environment variables. . $env:DEBUG = &quot;*,-not_this&quot; . Example: . $env:DEBUG=&#39;app&#39;;node app.js . Then, run the program to be debugged as usual. . npm script example: . &quot;windowsDebug&quot;: &quot;@powershell -Command $env:DEBUG=&#39;*&#39;;node app.js&quot;, . Namespace Colors . Every debug instance has a color generated for it based on its namespace name. This helps when visually parsing the debug output to identify which debug instance a debug line belongs to. . Node.js . In Node.js, colors are enabled when stderr is a TTY. You also should install the supports-color module alongside debug, otherwise debug will only use a small handful of basic colors. . . Web Browser . Colors are also enabled on “Web Inspectors” that understand the %c formatting option. These are WebKit web inspectors, Firefox (since version 31) and the Firebug plugin for Firefox (any version). . . Millisecond diff . When actively developing an application it can be useful to see when the time spent between one debug() call and the next. Suppose for example you invoke debug() before requesting a resource, and after as well, the “+NNNms” will show you how much time was spent between calls. . . When stdout is not a TTY, Date#toISOString() is used, making it more useful for logging the debug information as shown below: . . Conventions . If you’re using this in one or more of your libraries, you should use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you should prefix them with your library name and use “:” to separate features. For example “bodyParser” from Connect would then be “connect:bodyParser”. If you append a “*” to the end of your name, it will always be enabled regardless of the setting of the DEBUG environment variable. You can then use it for normal output as well as debug output. . Wildcards . The * character may be used as a wildcard. Suppose for example your library has debuggers named “connect:bodyParser”, “connect:compress”, “connect:session”, instead of listing all three with DEBUG=connect:bodyParser,connect:compress,connect:session, you may simply do DEBUG=connect:*, or to run everything using this module simply use DEBUG=*. . You can also exclude specific debuggers by prefixing them with a “-“ character. For example, DEBUG=*,-connect:* would include all debuggers except those starting with “connect:”. . Environment Variables . When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging: . Name Purpose . DEBUG | Enables/disables specific debugging namespaces. | . DEBUG_HIDE_DATE | Hide date from debug output (non-TTY). | . DEBUG_COLORS | Whether or not to use colors in the debug output. | . DEBUG_DEPTH | Object inspection depth. | . DEBUG_SHOW_HIDDEN | Shows hidden properties on inspected objects. | . Note: The environment variables beginning with DEBUG_ end up being converted into an Options object that gets used with %o/%O formatters. See the Node.js documentation for util.inspect() for the complete list. . Formatters . Debug uses printf-style formatting. Below are the officially supported formatters: . Formatter Representation . %O | Pretty-print an Object on multiple lines. | . %o | Pretty-print an Object all on a single line. | . %s | String. | . %d | Number (both integer and float). | . %j | JSON. Replaced with the string ‘[Circular]’ if the argument contains circular references. | . %% | Single percent sign (‘%’). This does not consume an argument. | . Custom formatters . You can add custom formatters by extending the debug.formatters object. For example, if you wanted to add support for rendering a Buffer as hex with %h, you could do something like: . const createDebug = require(&#39;debug&#39;) createDebug.formatters.h = (v) =&gt; { return v.toString(&#39;hex&#39;) } // …elsewhere const debug = createDebug(&#39;foo&#39;) debug(&#39;this is hex: %h&#39;, new Buffer(&#39;hello world&#39;)) // foo this is hex: 68656c6c6f20776f726c6421 +0ms . Browser Support . You can build a browser-ready script using browserify, or just use the browserify-as-a-service build, if you don’t want to build it yourself. . Debug’s enable state is currently persisted by localStorage. Consider the situation shown below where you have worker:a and worker:b, and wish to debug both. You can enable this using localStorage.debug: . localStorage.debug = &#39;worker:*&#39; . And then refresh the page. . a = debug(&#39;worker:a&#39;); b = debug(&#39;worker:b&#39;); setInterval(function(){ a(&#39;doing some work&#39;); }, 1000); setInterval(function(){ b(&#39;doing some work&#39;); }, 1200); . In Chromium-based web browsers (e.g. Brave, Chrome, and Electron), the JavaScript console will—by default—only show messages logged by debug if the “Verbose” log level is enabled. . . Output streams . By default debug will log to stderr, however this can be configured per-namespace by overriding the log method: . Example stdout.js: . var debug = require(&#39;debug&#39;); var error = debug(&#39;app:error&#39;); // by default stderr is used error(&#39;goes to stderr!&#39;); var log = debug(&#39;app:log&#39;); // set this namespace to log via console.log log.log = console.log.bind(console); // don&#39;t forget to bind to console! log(&#39;goes to stdout&#39;); error(&#39;still goes to stderr!&#39;); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error(&#39;now goes to stdout via console.info&#39;); log(&#39;still goes to stdout, but via console.info now&#39;); . Extend . You can simply extend debugger . const log = require(&#39;debug&#39;)(&#39;auth&#39;); //creates new debug instance with extended namespace const logSign = log.extend(&#39;sign&#39;); const logLogin = log.extend(&#39;login&#39;); log(&#39;hello&#39;); // auth hello logSign(&#39;hello&#39;); //auth:sign hello logLogin(&#39;hello&#39;); //auth:login hello . Set dynamically . You can also enable debug dynamically by calling the enable() method : . let debug = require(&#39;debug&#39;); console.log(1, debug.enabled(&#39;test&#39;)); debug.enable(&#39;test&#39;); console.log(2, debug.enabled(&#39;test&#39;)); debug.disable(); console.log(3, debug.enabled(&#39;test&#39;)); . print : . 1 false 2 true 3 false . Usage : enable(namespaces) namespaces can include modes separated by a colon and wildcards. . Note that calling enable() completely overrides previously set DEBUG variable : . $ DEBUG=foo node -e &#39;var dbg = require(&quot;debug&quot;); dbg.enable(&quot;bar&quot;); console.log(dbg.enabled(&quot;foo&quot;))&#39; =&gt; false . disable() . Will disable all namespaces. The functions returns the namespaces currently enabled (and skipped). This can be useful if you want to disable debugging temporarily without knowing what was enabled to begin with. . For example: . let debug = require(&#39;debug&#39;); debug.enable(&#39;foo:*,-foo:bar&#39;); let namespaces = debug.disable(); debug.enable(namespaces); . Note: There is no guarantee that the string will be identical to the initial enable string, but semantically they will be identical. . Checking whether a debug target is enabled . After you’ve created a debug instance, you can determine whether or not it is enabled by checking the enabled property: . const debug = require(&#39;debug&#39;)(&#39;http&#39;); if (debug.enabled) { // do stuff... } . You can also manually toggle this property to force the debug instance to be enabled or disabled. . Usage in child processes . Due to the way debug detects if the output is a TTY or not, colors are not shown in child processes when stderr is piped. A solution is to pass the DEBUG_COLORS=1 environment variable to the child process. For example: . worker = fork(WORKER_WRAP_PATH, [workerPath], { stdio: [ /* stdin: */ 0, /* stdout: */ &#39;pipe&#39;, /* stderr: */ &#39;pipe&#39;, &#39;ipc&#39;, ], env: Object.assign({}, process.env, { DEBUG_COLORS: 1 // without this settings, colors won&#39;t be shown }), }); worker.stderr.pipe(process.stderr, { end: false }); . Authors . TJ Holowaychuk | Nathan Rajlich | Andrew Rhyne | Josh Junon | . Backers . Support us with a monthly donation and help us continue our activities. [Become a backer] . . Sponsors . Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] . . License . (The MIT License) . Copyright (c) 2014-2017 TJ Holowaychuk &lt;tj@vision-media.ca&gt; Copyright (c) 2018-2021 Josh Junon . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. . THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/debug/",
          "relUrl": "/node_backend_Trystan/node_modules/debug/",
          "date": ""
      }
      
  

  
      ,"page125": {
          "title": "define-data-property [![Version Badge][npm-version-svg]][package-url]",
          "content": "define-data-property . . . Define a data property on an object. Will fall back to assignment in an engine without descriptors. . The three non* argument can also be passed null, which will use the existing state if available. . The loose argument will mean that if you attempt to set a non-normal data property, in an environment without descriptor support, it will fall back to normal assignment. . Usage . var defineDataProperty = require(&#39;define-data-property&#39;); var assert = require(&#39;assert&#39;); var obj = {}; defineDataProperty(obj, &#39;key&#39;, &#39;value&#39;); defineDataProperty( obj, &#39;key2&#39;, &#39;value&#39;, true, // nonEnumerable, optional false, // nonWritable, optional true, // nonConfigurable, optional false // loose, optional ); assert.deepEqual( Object.getOwnPropertyDescriptors(obj), { key: { configurable: true, enumerable: true, value: &#39;value&#39;, writable: true, }, key2: { configurable: false, enumerable: false, value: &#39;value&#39;, writable: true, }, } ); .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/define-data-property/",
          "relUrl": "/node_backend_Trystan/node_modules/define-data-property/",
          "date": ""
      }
      
  

  
      ,"page126": {
          "title": "depd",
          "content": "depd . . Deprecate all the things . With great modules comes great responsibility; mark things deprecated! . Install . This module is installed directly using npm: . $ npm install depd . This module can also be bundled with systems like Browserify or webpack, though by default this module will alter it’s API to no longer display or track deprecations. . API . var deprecate = require(&#39;depd&#39;)(&#39;my-module&#39;) . This library allows you to display deprecation messages to your users. This library goes above and beyond with deprecation warnings by introspection of the call stack (but only the bits that it is interested in). . Instead of just warning on the first invocation of a deprecated function and never again, this module will warn on the first invocation of a deprecated function per unique call site, making it ideal to alert users of all deprecated uses across the code base, rather than just whatever happens to execute first. . The deprecation warnings from this module also include the file and line information for the call into the module that the deprecated function was in. . NOTE this library has a similar interface to the debug module, and this module uses the calling file to get the boundary for the call stacks, so you should always create a new deprecate object in each file and not within some central file. . depd(namespace) . Create a new deprecate function that uses the given namespace name in the messages and will display the call site prior to the stack entering the file this function was called from. It is highly suggested you use the name of your module as the namespace. . deprecate(message) . Call this function from deprecated code to display a deprecation message. This message will appear once per unique caller site. Caller site is the first call site in the stack in a different file from the caller of this function. . If the message is omitted, a message is generated for you based on the site of the deprecate() call and will display the name of the function called, similar to the name displayed in a stack trace. . deprecate.function(fn, message) . Call this function to wrap a given function in a deprecation message on any call to the function. An optional message can be supplied to provide a custom message. . deprecate.property(obj, prop, message) . Call this function to wrap a given property on object in a deprecation message on any accessing or setting of the property. An optional message can be supplied to provide a custom message. . The method must be called on the object where the property belongs (not inherited from the prototype). . If the property is a data descriptor, it will be converted to an accessor descriptor in order to display the deprecation message. . process.on(‘deprecation’, fn) . This module will allow easy capturing of deprecation errors by emitting the errors as the type “deprecation” on the global process. If there are no listeners for this type, the errors are written to STDERR as normal, but if there are any listeners, nothing will be written to STDERR and instead only emitted. From there, you can write the errors in a different format or to a logging source. . The error represents the deprecation and is emitted only once with the same rules as writing to STDERR. The error has the following properties: . message - This is the message given by the library | name - This is always &#39;DeprecationError&#39; | namespace - This is the namespace the deprecation came from | stack - This is the stack of the call to the deprecated thing | . Example error.stack output: . DeprecationError: my-cool-module deprecated oldfunction at Object.&lt;anonymous&gt; ([eval]-wrapper:6:22) at Module._compile (module.js:456:26) at evalScript (node.js:532:25) at startup (node.js:80:7) at node.js:902:3 . process.env.NO_DEPRECATION . As a user of modules that are deprecated, the environment variable NO_DEPRECATION is provided as a quick solution to silencing deprecation warnings from being output. The format of this is similar to that of DEBUG: . $ NO_DEPRECATION=my-module,othermod node app.js . This will suppress deprecations from being output for “my-module” and “othermod”. The value is a list of comma-separated namespaces. To suppress every warning across all namespaces, use the value * for a namespace. . Providing the argument --no-deprecation to the node executable will suppress all deprecations (only available in Node.js 0.8 or higher). . NOTE This will not suppress the deperecations given to any “deprecation” event listeners, just the output to STDERR. . process.env.TRACE_DEPRECATION . As a user of modules that are deprecated, the environment variable TRACE_DEPRECATION is provided as a solution to getting more detailed location information in deprecation warnings by including the entire stack trace. The format of this is the same as NO_DEPRECATION: . $ TRACE_DEPRECATION=my-module,othermod node app.js . This will include stack traces for deprecations being output for “my-module” and “othermod”. The value is a list of comma-separated namespaces. To trace every warning across all namespaces, use the value * for a namespace. . Providing the argument --trace-deprecation to the node executable will trace all deprecations (only available in Node.js 0.8 or higher). . NOTE This will not trace the deperecations silenced by NO_DEPRECATION. . Display . . When a user calls a function in your library that you mark deprecated, they will see the following written to STDERR (in the given colors, similar colors and layout to the debug module): . bright cyan bright yellow | | reset cyan | | | | ▼ ▼ ▼ ▼ my-cool-module deprecated oldfunction [eval]-wrapper:6:22 ▲ ▲ ▲ ▲ | | | | namespace | | location of mycoolmod.oldfunction() call | deprecation message the word &quot;deprecated&quot; . If the user redirects their STDERR to a file or somewhere that does not support colors, they see (similar layout to the debug module): . Sun, 15 Jun 2014 05:21:37 GMT my-cool-module deprecated oldfunction at [eval]-wrapper:6:22 ▲ ▲ ▲ ▲ ▲ | | | | | timestamp of message namespace | | location of mycoolmod.oldfunction() call | deprecation message the word &quot;deprecated&quot; . Examples . Deprecating all calls to a function . This will display a deprecated message about “oldfunction” being deprecated from “my-module” on STDERR. . var deprecate = require(&#39;depd&#39;)(&#39;my-cool-module&#39;) // message automatically derived from function name // Object.oldfunction exports.oldfunction = deprecate.function(function oldfunction () { // all calls to function are deprecated }) // specific message exports.oldfunction = deprecate.function(function () { // all calls to function are deprecated }, &#39;oldfunction&#39;) . Conditionally deprecating a function call . This will display a deprecated message about “weirdfunction” being deprecated from “my-module” on STDERR when called with less than 2 arguments. . var deprecate = require(&#39;depd&#39;)(&#39;my-cool-module&#39;) exports.weirdfunction = function () { if (arguments.length &lt; 2) { // calls with 0 or 1 args are deprecated deprecate(&#39;weirdfunction args &lt; 2&#39;) } } . When calling deprecate as a function, the warning is counted per call site within your own module, so you can display different deprecations depending on different situations and the users will still get all the warnings: . var deprecate = require(&#39;depd&#39;)(&#39;my-cool-module&#39;) exports.weirdfunction = function () { if (arguments.length &lt; 2) { // calls with 0 or 1 args are deprecated deprecate(&#39;weirdfunction args &lt; 2&#39;) } else if (typeof arguments[0] !== &#39;string&#39;) { // calls with non-string first argument are deprecated deprecate(&#39;weirdfunction non-string first arg&#39;) } } . Deprecating property access . This will display a deprecated message about “oldprop” being deprecated from “my-module” on STDERR when accessed. A deprecation will be displayed when setting the value and when getting the value. . var deprecate = require(&#39;depd&#39;)(&#39;my-cool-module&#39;) exports.oldprop = &#39;something&#39; // message automatically derives from property name deprecate.property(exports, &#39;oldprop&#39;) // explicit message deprecate.property(exports, &#39;oldprop&#39;, &#39;oldprop &gt;= 0.10&#39;) . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/depd/",
          "relUrl": "/node_backend_Trystan/node_modules/depd/",
          "date": ""
      }
      
  

  
      ,"page127": {
          "title": "destroy",
          "content": "destroy . . Destroy a stream. . This module is meant to ensure a stream gets destroyed, handling different APIs and Node.js bugs. . API . var destroy = require(&#39;destroy&#39;) . destroy(stream [, suppress]) . Destroy the given stream, and optionally suppress any future error events. . In most cases, this is identical to a simple stream.destroy() call. The rules are as follows for a given stream: . If the stream is an instance of ReadStream, then call stream.destroy() and add a listener to the open event to call stream.close() if it is fired. This is for a Node.js bug that will leak a file descriptor if .destroy() is called before open. | If the stream is an instance of a zlib stream, then call stream.destroy() and close the underlying zlib handle if open, otherwise call stream.close(). This is for consistency across Node.js versions and a Node.js bug that will leak a native zlib handle. | If the stream is not an instance of Stream, then nothing happens. | If the stream has a .destroy() method, then call it. | The function returns the stream passed in as the argument. . Example . var destroy = require(&#39;destroy&#39;) var fs = require(&#39;fs&#39;) var stream = fs.createReadStream(&#39;package.json&#39;) // ... and later destroy(stream) .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/destroy/",
          "relUrl": "/node_backend_Trystan/node_modules/destroy/",
          "date": ""
      }
      
  

  
      ,"page128": {
          "title": "EE First",
          "content": "EE First . . Get the first event in a set of event emitters and event pairs, then clean up after itself. . Install . $ npm install ee-first . API . var first = require(&#39;ee-first&#39;) . first(arr, listener) . Invoke listener on the first event from the list specified in arr. arr is an array of arrays, with each array in the format [ee, ...event]. listener will be called only once, the first time any of the given events are emitted. If error is one of the listened events, then if that fires first, the listener will be given the err argument. . The listener is invoked as listener(err, ee, event, args), where err is the first argument emitted from an error event, if applicable; ee is the event emitter that fired; event is the string event name that fired; and args is an array of the arguments that were emitted on the event. . var ee1 = new EventEmitter() var ee2 = new EventEmitter() first([ [ee1, &#39;close&#39;, &#39;end&#39;, &#39;error&#39;], [ee2, &#39;error&#39;] ], function (err, ee, event, args) { // listener invoked }) . .cancel() . The group of listeners can be cancelled before being invoked and have all the event listeners removed from the underlying event emitters. . var thunk = first([ [ee1, &#39;close&#39;, &#39;end&#39;, &#39;error&#39;], [ee2, &#39;error&#39;] ], function (err, ee, event, args) { // listener invoked }) // cancel and clean up thunk.cancel() .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/ee-first/",
          "relUrl": "/node_backend_Trystan/node_modules/ee-first/",
          "date": ""
      }
      
  

  
      ,"page129": {
          "title": "encodeurl",
          "content": "encodeurl . . Encode a URL to a percent-encoded form, excluding already-encoded sequences . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install encodeurl . API . var encodeUrl = require(&#39;encodeurl&#39;) . encodeUrl(url) . Encode a URL to a percent-encoded form, excluding already-encoded sequences. . This function will take an already-encoded URL and encode all the non-URL code points (as UTF-8 byte sequences). This function will not encode the “%” character unless it is not part of a valid sequence (%20 will be left as-is, but %foo will be encoded as %25foo). . This encode is meant to be “safe” and does not throw errors. It will try as hard as it can to properly encode the given URL, including replacing any raw, unpaired surrogate pairs with the Unicode replacement character prior to encoding. . This function is similar to the intrinsic function encodeURI, except it will not encode the % character if that is part of a valid sequence, will not encode [ and ] (for IPv6 hostnames) and will replace raw, unpaired surrogate pairs with the Unicode replacement character (instead of throwing). . Examples . Encode a URL containing user-controled data . var encodeUrl = require(&#39;encodeurl&#39;) var escapeHtml = require(&#39;escape-html&#39;) http.createServer(function onRequest (req, res) { // get encoded form of inbound url var url = encodeUrl(req.url) // create html message var body = &#39;&lt;p&gt;Location &#39; + escapeHtml(url) + &#39; not found&lt;/p&gt;&#39; // send a 404 res.statusCode = 404 res.setHeader(&#39;Content-Type&#39;, &#39;text/html; charset=UTF-8&#39;) res.setHeader(&#39;Content-Length&#39;, String(Buffer.byteLength(body, &#39;utf-8&#39;))) res.end(body, &#39;utf-8&#39;) }) . Encode a URL for use in a header field . var encodeUrl = require(&#39;encodeurl&#39;) var escapeHtml = require(&#39;escape-html&#39;) var url = require(&#39;url&#39;) http.createServer(function onRequest (req, res) { // parse inbound url var href = url.parse(req) // set new host for redirect href.host = &#39;localhost&#39; href.protocol = &#39;https:&#39; href.slashes = true // create location header var location = encodeUrl(url.format(href)) // create html message var body = &#39;&lt;p&gt;Redirecting to new site: &#39; + escapeHtml(location) + &#39;&lt;/p&gt;&#39; // send a 301 res.statusCode = 301 res.setHeader(&#39;Content-Type&#39;, &#39;text/html; charset=UTF-8&#39;) res.setHeader(&#39;Content-Length&#39;, String(Buffer.byteLength(body, &#39;utf-8&#39;))) res.setHeader(&#39;Location&#39;, location) res.end(body, &#39;utf-8&#39;) }) . Testing . $ npm test $ npm run lint . References . RFC 3986: Uniform Resource Identifier (URI): Generic Syntax | WHATWG URL Living Standard | . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/encodeurl/",
          "relUrl": "/node_backend_Trystan/node_modules/encodeurl/",
          "date": ""
      }
      
  

  
      ,"page130": {
          "title": "engine.io-parser",
          "content": "engine.io-parser . . This is the JavaScript parser for the engine.io protocol encoding, shared by both engine.io-client and engine.io. . How to use . Standalone . The parser can encode/decode packets, payloads, and payloads as binary with the following methods: encodePacket, decodePacket, encodePayload, decodePayload. . Example: . const parser = require(&quot;engine.io-parser&quot;); const data = Buffer.from([ 1, 2, 3, 4 ]); parser.encodePacket({ type: &quot;message&quot;, data }, encoded =&gt; { const decodedData = parser.decodePacket(encoded); // decodedData === data }); . With browserify . Engine.IO Parser is a commonjs module, which means you can include it by using require on the browser and package using browserify: . install the parser package . npm install engine.io-parser . | write your app code . const parser = require(&quot;engine.io-parser&quot;); const testBuffer = new Int8Array(10); for (let i = 0; i &lt; testBuffer.length; i++) testBuffer[i] = i; const packets = [{ type: &quot;message&quot;, data: testBuffer.buffer }, { type: &quot;message&quot;, data: &quot;hello&quot; }]; parser.encodePayload(packets, encoded =&gt; { parser.decodePayload(encoded, (packet, index, total) =&gt; { const isLast = index + 1 == total; if (!isLast) { const buffer = new Int8Array(packet.data); // testBuffer } else { const message = packet.data; // &quot;hello&quot; } }); }); . | build your app bundle . $ browserify app.js &gt; bundle.js . | include on your page . &lt;script src=&quot;/path/to/bundle.js&quot;&gt;&lt;/script&gt; . | Features . Runs on browser and node.js seamlessly | Runs inside HTML5 WebWorker | Can encode and decode packets Encodes from/to ArrayBuffer or Blob when in browser, and Buffer or ArrayBuffer in Node | . | . API . Note: cb(type) means the type is a callback function that contains a parameter of type type when called. . Node . encodePacket Encodes a packet. | Parameters Object: the packet to encode, has type and data. data: can be a String, Number, Buffer, ArrayBuffer | . | Boolean: binary support | Function: callback, returns the encoded packet (cb(String)) | . | . | decodePacket Decodes a packet. Data also available as an ArrayBuffer if requested. | Returns data as String or (Blob on browser, ArrayBuffer on Node) | Parameters String | ArrayBuffer: the packet to decode, has type and data | . | String: optional, the binary type | . | . | encodePayload Encodes multiple messages (payload). | If any contents are binary, they will be encoded as base64 strings. Base64 encoded strings are marked with a b before the length specifier | Parameters Array: an array of packets | Function: callback, returns the encoded payload (cb(String)) | . | . | decodePayload Decodes data when a payload is maybe expected. Possible binary contents are decoded from their base64 representation. | Parameters String: the payload | Function: callback, returns (cb(Object: packet, Number:packet index, Number:packet total)) | . | . | . Tests . Standalone tests can be run with npm test which will run the node.js tests. . Browser tests are run using zuul. (You must have zuul setup with a saucelabs account.) . You can run the tests locally using the following command: . npm run test:browser . Support . The support channels for engine.io-parser are the same as socket.io: . irc.freenode.net #socket.io | Github Discussions | Website | . Development . To contribute patches, run tests or benchmarks, make sure to clone the repository: . git clone git://github.com/socketio/engine.io-parser.git . Then: . cd engine.io-parser npm ci . See the Tests section above for how to run tests before submitting any patches. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/engine.io-parser/",
          "relUrl": "/node_backend_Trystan/node_modules/engine.io-parser/",
          "date": ""
      }
      
  

  
      ,"page131": {
          "title": "Engine.IO: the realtime engine",
          "content": "Engine.IO: the realtime engine . . Engine.IO is the implementation of transport-based cross-browser/cross-device bi-directional communication layer for Socket.IO. . How to use . Server . (A) Listening on a port . const engine = require(&#39;engine.io&#39;); const server = engine.listen(80); server.on(&#39;connection&#39;, socket =&gt; { socket.send(&#39;utf 8 string&#39;); socket.send(Buffer.from([0, 1, 2, 3, 4, 5])); // binary data }); . (B) Intercepting requests for a http.Server . const engine = require(&#39;engine.io&#39;); const http = require(&#39;http&#39;).createServer().listen(3000); const server = engine.attach(http); server.on(&#39;connection&#39;, socket =&gt; { socket.on(&#39;message&#39;, data =&gt; { }); socket.on(&#39;close&#39;, () =&gt; { }); }); . (C) Passing in requests . const engine = require(&#39;engine.io&#39;); const server = new engine.Server(); server.on(&#39;connection&#39;, socket =&gt; { socket.send(&#39;hi&#39;); }); // … httpServer.on(&#39;upgrade&#39;, (req, socket, head) =&gt; { server.handleUpgrade(req, socket, head); }); httpServer.on(&#39;request&#39;, (req, res) =&gt; { server.handleRequest(req, res); }); . Client . &lt;script src=&quot;/path/to/engine.io.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const socket = new eio.Socket(&#39;ws://localhost/&#39;); socket.on(&#39;open&#39;, () =&gt; { socket.on(&#39;message&#39;, data =&gt; {}); socket.on(&#39;close&#39;, () =&gt; {}); }); &lt;/script&gt; . For more information on the client refer to the engine-client repository. . What features does it have? . Maximum reliability. Connections are established even in the presence of: proxies and load balancers. | personal firewall and antivirus software. | for more information refer to Goals and Architecture sections | . | Minimal client size aided by: lazy loading of flash transports. | lack of redundant transports. | . | Scalable load balancer friendly | . | Future proof | 100% Node.JS core style No API sugar (left for higher level projects) | . | . API . Server . . . Top-level . These are exposed by require(&#39;engine.io&#39;): . Events . flush Called when a socket buffer is being flushed. | Arguments Socket: socket being flushed | Array: write buffer | . | . | drain Called when a socket buffer is drained | Arguments Socket: socket being flushed | . | . | . Properties . protocol (Number): protocol revision number | Server: Server class constructor | Socket: Socket class constructor | Transport (Function): transport constructor | transports (Object): map of available transports | . Methods . () Returns a new Server instance. If the first argument is an http.Server then the new Server instance will be attached to it. Otherwise, the arguments are passed directly to the Server constructor. | Parameters http.Server: optional, server to attach to. | Object: optional, options object (see Server#constructor api docs below) | . | . The following are identical ways to instantiate a server and then attach it. . | . const httpServer; // previously created with `http.createServer();` from node.js api. // create a server first, and then attach const eioServer = require(&#39;engine.io&#39;).Server(); eioServer.attach(httpServer); // or call the module as a function to get `Server` const eioServer = require(&#39;engine.io&#39;)(); eioServer.attach(httpServer); // immediately attach const eioServer = require(&#39;engine.io&#39;)(httpServer); // with custom options const eioServer = require(&#39;engine.io&#39;)(httpServer, { maxHttpBufferSize: 1e3 }); . listen Creates an http.Server which listens on the given port and attaches WS to it. It returns 501 Not Implemented for regular http requests. | Parameters Number: port to listen on. | Object: optional, options object | Function: callback for listen. | . | Options All options from Server.attach method, documented below. | Additionally See Server constructor below for options you can pass for creating the new Server | . | Returns Server | . | . const engine = require(&#39;engine.io&#39;); const server = engine.listen(3000, { pingTimeout: 2000, pingInterval: 10000 }); server.on(&#39;connection&#39;, /* ... */); . attach Captures upgrade requests for a http.Server. In other words, makes a regular http.Server WebSocket-compatible. | Parameters http.Server: server to attach to. | Object: optional, options object | . | Options All options from Server.attach method, documented below. | Additionally See Server constructor below for options you can pass for creating the new Server | . | Returns Server a new Server instance. | . | . const engine = require(&#39;engine.io&#39;); const httpServer = require(&#39;http&#39;).createServer().listen(3000); const server = engine.attach(httpServer, { wsEngine: require(&#39;eiows&#39;).Server // requires having eiows as dependency }); server.on(&#39;connection&#39;, /* ... */); . Server . The main server/manager. Inherits from EventEmitter. . Events . connection Fired when a new connection is established. | Arguments Socket: a Socket object | . | . | initial_headers Fired on the first request of the connection, before writing the response headers | Arguments headers (Object): a hash of headers | req (http.IncomingMessage): the request | . | . | headers Fired on the all requests of the connection, before writing the response headers | Arguments headers (Object): a hash of headers | req (http.IncomingMessage): the request | . | . | connection_error Fired when an error occurs when establishing the connection. | Arguments error: an object with following properties: req (http.IncomingMessage): the request that was dropped | code (Number): one of Server.errors | message (string): one of Server.errorMessages | context (Object): extra info about the error | . | . | . | . Code Message . 0 | “Transport unknown” | . 1 | “Session ID unknown” | . 2 | “Bad handshake method” | . 3 | “Bad request” | . 4 | “Forbidden” | . 5 | “Unsupported protocol version” | . Properties . Important: if you plan to use Engine.IO in a scalable way, please keep in mind the properties below will only reflect the clients connected to a single process. . clients (Object): hash of connected clients by id. | clientsCount (Number): number of connected clients. | . Methods . constructor Initializes the server | Parameters Object: optional, options object | . | Options pingTimeout (Number): how many ms without a pong packet to consider the connection closed (20000) | pingInterval (Number): how many ms before sending a new ping packet (25000) | upgradeTimeout (Number): how many ms before an uncompleted transport upgrade is cancelled (10000) | maxHttpBufferSize (Number): how many bytes or characters a message can be, before closing the session (to avoid DoS). Default value is 1E6. | allowRequest (Function): A function that receives a given handshake or upgrade request as its first parameter, and can decide whether to continue or not. The second argument is a function that needs to be called with the decided information: fn(err, success), where success is a boolean value where false means that the request is rejected, and err is an error code. | transports (&lt;Array&gt; String): transports to allow connections to ([&#39;polling&#39;, &#39;websocket&#39;]) | allowUpgrades (Boolean): whether to allow transport upgrades (true) | perMessageDeflate (Object|Boolean): parameters of the WebSocket permessage-deflate extension (see ws module api docs). Set to true to enable. (defaults to false) threshold (Number): data is compressed only if the byte size is above this value (1024) | . | httpCompression (Object|Boolean): parameters of the http compression for the polling transports (see zlib api docs). Set to false to disable. (true) threshold (Number): data is compressed only if the byte size is above this value (1024) | . | cookie (Object|Boolean): configuration of the cookie that contains the client sid to send as part of handshake response headers. This cookie might be used for sticky-session. Defaults to not sending any cookie (false). See here for all supported options. | wsEngine (Function): what WebSocket server implementation to use. Specified module must conform to the ws interface (see ws module api docs). Default value is ws. An alternative c++ addon is also available by installing eiows module. | cors (Object): the options that will be forwarded to the cors module. See there for all available options. Defaults to no CORS allowed. | initialPacket (Object): an optional packet which will be concatenated to the handshake packet emitted by Engine.IO. | allowEIO3 (Boolean): whether to support v3 Engine.IO clients (defaults to false) | . | . | close Closes all clients | Returns Server for chaining | . | handleRequest Called internally when a Engine request is intercepted. | Parameters http.IncomingMessage: a node request object | http.ServerResponse: a node response object | . | Returns Server for chaining | . | handleUpgrade Called internally when a Engine ws upgrade is intercepted. | Parameters (same as upgrade event) http.IncomingMessage: a node request object | net.Stream: TCP socket for the request | Buffer: legacy tail bytes | . | Returns Server for chaining | . | attach Attach this Server instance to an http.Server | Captures upgrade requests for a http.Server. In other words, makes a regular http.Server WebSocket-compatible. | Parameters http.Server: server to attach to. | Object: optional, options object | . | Options path (String): name of the path to capture (/engine.io). | destroyUpgrade (Boolean): destroy unhandled upgrade requests (true) | destroyUpgradeTimeout (Number): milliseconds after which unhandled requests are ended (1000) | . | . | generateId Generate a socket id. | Overwrite this method to generate your custom socket id. | Parameters http.IncomingMessage: a node request object | . | Returns A socket id for connected client. | . | . . . Socket . A representation of a client. Inherits from EventEmitter. . Events . close Fired when the client is disconnected. | Arguments String: reason for closing | Object: description object (optional) | . | . | message Fired when the client sends a message. | Arguments String or Buffer: Unicode string or Buffer with binary contents | . | . | error Fired when an error occurs. | Arguments Error: error object | . | . | upgrading Fired when the client starts the upgrade to a better transport like WebSocket. | Arguments Object: the transport | . | . | upgrade Fired when the client completes the upgrade to a better transport like WebSocket. | Arguments Object: the transport | . | . | flush Called when the write buffer is being flushed. | Arguments Array: write buffer | . | . | drain Called when the write buffer is drained | . | packet Called when a socket received a packet (message, ping) | Arguments type: packet type | data: packet data (if type is message) | . | . | packetCreate Called before a socket sends a packet (message, ping) | Arguments type: packet type | data: packet data (if type is message) | . | . | heartbeat Called when ping or pong packed is received (depends of client version) | . | . Properties . id (String): unique identifier | server (Server): engine parent reference | request (http.IncomingMessage): request that originated the Socket | upgraded (Boolean): whether the transport has been upgraded | readyState (String): opening | open | closing | closed | . | transport (Transport): transport reference | . Methods . send: Sends a message, performing message = toString(arguments[0]) unless sending binary data, which is sent as is. | Parameters String |  Buffer | ArrayBuffer | ArrayBufferView: a string or any object implementing toString(), with outgoing data, or a Buffer or ArrayBuffer with binary data. Also any ArrayBufferView can be sent as is. | . | Object: optional, options object | Function: optional, a callback executed when the message gets flushed out by the transport | . | Options compress (Boolean): whether to compress sending data. This option might be ignored and forced to be true when using polling. (true) | . | Returns Socket for chaining | . | close Disconnects the client | Returns Socket for chaining | . | . Client . . . Exposed in the eio global namespace (in the browser), or by require(&#39;engine.io-client&#39;) (in Node.JS). . For the client API refer to the engine-client repository. . Debug / logging . Engine.IO is powered by debug. In order to see all the debug output, run your app with the environment variable DEBUG including the desired scope. . To see the output from all of Engine.IO’s debugging scopes you can use: . DEBUG=engine* node myapp . Transports . polling: XHR / JSONP polling transport. | websocket: WebSocket transport. | . Plugins . engine.io-conflation: Makes conflation and aggregation of messages straightforward. | . Support . The support channels for engine.io are the same as socket.io: . irc.freenode.net #socket.io | Google Groups | Website | . Development . To contribute patches, run tests or benchmarks, make sure to clone the repository: . git clone git://github.com/LearnBoost/engine.io.git . Then: . cd engine.io npm install . Tests . Tests run with npm test. It runs the server tests that are aided by the usage of engine.io-client. . Make sure npm install is run first. . Goals . The main goal of Engine is ensuring the most reliable realtime communication. Unlike the previous Socket.IO core, it always establishes a long-polling connection first, then tries to upgrade to better transports that are “tested” on the side. . During the lifetime of the Socket.IO projects, we’ve found countless drawbacks to relying on HTML5 WebSocket or Flash Socket as the first connection mechanisms. . Both are clearly the right way of establishing a bidirectional communication, with HTML5 WebSocket being the way of the future. However, to answer most business needs, alternative traditional HTTP 1.1 mechanisms are just as good as delivering the same solution. . WebSocket based connections have two fundamental benefits: . Better server performance A: Load balancers Load balancing a long polling connection poses a serious architectural nightmare since requests can come from any number of open sockets by the user agent, but they all need to be routed to the process and computer that owns the Engine connection. This negatively impacts RAM and CPU usage. | B: Network traffic WebSocket is designed around the premise that each message frame has to be surrounded by the least amount of data. In HTTP 1.1 transports, each message frame is surrounded by HTTP headers and chunked encoding frames. If you try to send the message “Hello world” with xhr-polling, the message ultimately becomes larger than if you were to send it with WebSocket. | C: Lightweight parser As an effect of B, the server has to do a lot more work to parse the network data and figure out the message when traditional HTTP requests are used (as in long polling). This means that another advantage of WebSocket is less server CPU usage. | . | Better user experience . Due to the reasons stated in point 1, the most important effect of being able to establish a WebSocket connection is raw data transfer speed, which translates in some cases in better user experience. . Applications with heavy realtime interaction (such as games) will benefit greatly, whereas applications like realtime chat (Gmail/Facebook), newsfeeds (Facebook) or timelines (Twitter) will have negligible user experience improvements. . | Having said this, attempting to establish a WebSocket connection directly so far has proven problematic: . Proxies Many corporate proxies block WebSocket traffic. . | Personal firewall and antivirus software As a result of our research, we’ve found that at least 3 personal security applications block WebSocket traffic. . | Cloud application platforms Platforms like Heroku or No.de have had trouble keeping up with the fast-paced nature of the evolution of the WebSocket protocol. Applications therefore end up inevitably using long polling, but the seamless installation experience of Socket.IO we strive for (“require() it and it just works”) disappears. . | Some of these problems have solutions. In the case of proxies and personal programs, however, the solutions many times involve upgrading software. Experience has shown that relying on client software upgrades to deliver a business solution is fruitless: the very existence of this project has to do with a fragmented panorama of user agent distribution, with clients connecting with latest versions of the most modern user agents (Chrome, Firefox and Safari), but others with versions as low as IE 5.5. . From the user perspective, an unsuccessful WebSocket connection can translate in up to at least 10 seconds of waiting for the realtime application to begin exchanging data. This perceptively hurts user experience. . To summarize, Engine focuses on reliability and user experience first, marginal potential UX improvements and increased server performance second. Engine is the result of all the lessons learned with WebSocket in the wild. . Architecture . The main premise of Engine, and the core of its existence, is the ability to swap transports on the fly. A connection starts as xhr-polling, but it can switch to WebSocket. . The central problem this poses is: how do we switch transports without losing messages? . Engine only switches from polling to another transport in between polling cycles. Since the server closes the connection after a certain timeout when there’s no activity, and the polling transport implementation buffers messages in between connections, this ensures no message loss and optimal performance. . Another benefit of this design is that we workaround almost all the limitations of Flash Socket, such as slow connection times, increased file size (we can safely lazy load it without hurting user experience), etc. . FAQ . Can I use engine without Socket.IO ? . Absolutely. Although the recommended framework for building realtime applications is Socket.IO, since it provides fundamental features for real-world applications such as multiplexing, reconnection support, etc. . Engine is to Socket.IO what Connect is to Express. An essential piece for building realtime frameworks, but something you probably won’t be using for building actual applications. . Does the server serve the client? . No. The main reason is that Engine is meant to be bundled with frameworks. Socket.IO includes Engine, therefore serving two clients is not necessary. If you use Socket.IO, including . &lt;script src=&quot;/socket.io/socket.io.js&quot;&gt; . has you covered. . Can I implement Engine in other languages? . Absolutely. The engine.io-protocol repository contains the most up-to-date description of the specification at all times. . License . (The MIT License) . Copyright (c) 2014 Guillermo Rauch &lt;guillermo@learnboost.com&gt; . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. . THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/engine.io/",
          "relUrl": "/node_backend_Trystan/node_modules/engine.io/",
          "date": ""
      }
      
  

  
      ,"page132": {
          "title": "escape-html",
          "content": "escape-html . Escape string for use in HTML . Example . var escape = require(&#39;escape-html&#39;); var html = escape(&#39;foo &amp; bar&#39;); // -&gt; foo &amp;amp; bar . Benchmark . $ npm run-script bench &gt; escape-html@1.0.3 bench nodejs-escape-html &gt; node benchmark/index.js http_parser@1.0 node@0.10.33 v8@3.14.5.9 ares@1.9.0-DEV uv@0.10.29 zlib@1.2.3 modules@11 openssl@1.0.1j 1 test completed. 2 tests completed. 3 tests completed. no special characters x 19,435,271 ops/sec ±0.85% (187 runs sampled) single special character x 6,132,421 ops/sec ±0.67% (194 runs sampled) many special characters x 3,175,826 ops/sec ±0.65% (193 runs sampled) . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/escape-html/",
          "relUrl": "/node_backend_Trystan/node_modules/escape-html/",
          "date": ""
      }
      
  

  
      ,"page133": {
          "title": "etag",
          "content": "etag . . Create simple HTTP ETags . This module generates HTTP ETags (as defined in RFC 7232) for use in HTTP responses. . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install etag . API . var etag = require(&#39;etag&#39;) . etag(entity, [options]) . Generate a strong ETag for the given entity. This should be the complete body of the entity. Strings, Buffers, and fs.Stats are accepted. By default, a strong ETag is generated except for fs.Stats, which will generate a weak ETag (this can be overwritten by options.weak). . res.setHeader(&#39;ETag&#39;, etag(body)) . Options . etag accepts these properties in the options object. . weak . Specifies if the generated ETag will include the weak validator mark (that is, the leading W/). The actual entity tag is the same. The default value is false, unless the entity is fs.Stats, in which case it is true. . Testing . $ npm test . Benchmark . $ npm run-script bench &gt; etag@1.8.1 bench nodejs-etag &gt; node benchmark/index.js http_parser@2.7.0 node@6.11.1 v8@5.1.281.103 uv@1.11.0 zlib@1.2.11 ares@1.10.1-DEV icu@58.2 modules@48 openssl@1.0.2k &gt; node benchmark/body0-100b.js 100B body 4 tests completed. buffer - strong x 258,647 ops/sec ±1.07% (180 runs sampled) buffer - weak x 263,812 ops/sec ±0.61% (184 runs sampled) string - strong x 259,955 ops/sec ±1.19% (185 runs sampled) string - weak x 264,356 ops/sec ±1.09% (184 runs sampled) &gt; node benchmark/body1-1kb.js 1KB body 4 tests completed. buffer - strong x 189,018 ops/sec ±1.12% (182 runs sampled) buffer - weak x 190,586 ops/sec ±0.81% (186 runs sampled) string - strong x 144,272 ops/sec ±0.96% (188 runs sampled) string - weak x 145,380 ops/sec ±1.43% (187 runs sampled) &gt; node benchmark/body2-5kb.js 5KB body 4 tests completed. buffer - strong x 92,435 ops/sec ±0.42% (188 runs sampled) buffer - weak x 92,373 ops/sec ±0.58% (189 runs sampled) string - strong x 48,850 ops/sec ±0.56% (186 runs sampled) string - weak x 49,380 ops/sec ±0.56% (190 runs sampled) &gt; node benchmark/body3-10kb.js 10KB body 4 tests completed. buffer - strong x 55,989 ops/sec ±0.93% (188 runs sampled) buffer - weak x 56,148 ops/sec ±0.55% (190 runs sampled) string - strong x 27,345 ops/sec ±0.43% (188 runs sampled) string - weak x 27,496 ops/sec ±0.45% (190 runs sampled) &gt; node benchmark/body4-100kb.js 100KB body 4 tests completed. buffer - strong x 7,083 ops/sec ±0.22% (190 runs sampled) buffer - weak x 7,115 ops/sec ±0.26% (191 runs sampled) string - strong x 3,068 ops/sec ±0.34% (190 runs sampled) string - weak x 3,096 ops/sec ±0.35% (190 runs sampled) &gt; node benchmark/stats.js stat 4 tests completed. real - strong x 871,642 ops/sec ±0.34% (189 runs sampled) real - weak x 867,613 ops/sec ±0.39% (190 runs sampled) fake - strong x 401,051 ops/sec ±0.40% (189 runs sampled) fake - weak x 400,100 ops/sec ±0.47% (188 runs sampled) . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/etag/",
          "relUrl": "/node_backend_Trystan/node_modules/etag/",
          "date": ""
      }
      
  

  
      ,"page134": {
          "title": "",
          "content": ". Fast, unopinionated, minimalist web framework for Node.js. . . const express = require(&#39;express&#39;) const app = express() app.get(&#39;/&#39;, function (req, res) { res.send(&#39;Hello World&#39;) }) app.listen(3000) . Installation . This is a Node.js module available through the npm registry. . Before installing, download and install Node.js. Node.js 0.10 or higher is required. . If this is a brand new project, make sure to create a package.json first with the npm init command. . Installation is done using the npm install command: . $ npm install express . Follow our installing guide for more information. . Features . Robust routing | Focus on high performance | Super-high test coverage | HTTP helpers (redirection, caching, etc) | View system supporting 14+ template engines | Content negotiation | Executable for generating applications quickly | . Docs &amp; Community . Website and Documentation - [website repo] | #express on Libera Chat IRC | GitHub Organization for Official Middleware &amp; Modules | Visit the Wiki | Google Group for discussion | Gitter for support and discussion | . PROTIP Be sure to read Migrating from 3.x to 4.x as well as New features in 4.x. . Quick Start . The quickest way to get started with express is to utilize the executable express(1) to generate an application as shown below: . Install the executable. The executable’s major version will match Express’s: . $ npm install -g express-generator@4 . Create the app: . $ express /tmp/foo &amp;&amp; cd /tmp/foo . Install dependencies: . $ npm install . Start the server: . $ npm start . View the website at: http://localhost:3000 . Philosophy . The Express philosophy is to provide small, robust tooling for HTTP servers, making it a great solution for single page applications, websites, hybrids, or public HTTP APIs. . Express does not force you to use any specific ORM or template engine. With support for over 14 template engines via Consolidate.js, you can quickly craft your perfect framework. . Examples . To view the examples, clone the Express repo and install the dependencies: . $ git clone git://github.com/expressjs/express.git --depth 1 $ cd express $ npm install . Then run whichever example you want: . $ node examples/content-negotiation . Contributing . . The Express.js project welcomes all constructive contributions. Contributions take many forms, from code for bug fixes and enhancements, to additions and fixes to documentation, additional tests, triaging incoming pull requests and issues, and more! . See the Contributing Guide for more technical details on contributing. . Security Issues . If you discover a security vulnerability in Express, please see Security Policies and Procedures. . Running Tests . To run the test suite, first install the dependencies, then run npm test: . $ npm install $ npm test . People . The original author of Express is TJ Holowaychuk . The current lead maintainer is Douglas Christopher Wilson . List of all contributors . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/express/",
          "relUrl": "/node_backend_Trystan/node_modules/express/",
          "date": ""
      }
      
  

  
      ,"page135": {
          "title": "cookie",
          "content": "cookie . . Basic HTTP cookie parser and serializer for HTTP servers. . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install cookie . API . var cookie = require(&#39;cookie&#39;); . cookie.parse(str, options) . Parse an HTTP Cookie header string and returning an object of all cookie name-value pairs. The str argument is the string representing a Cookie header value and options is an optional object containing additional parsing options. . var cookies = cookie.parse(&#39;foo=bar; equation=E%3Dmc%5E2&#39;); // { foo: &#39;bar&#39;, equation: &#39;E=mc^2&#39; } . Options . cookie.parse accepts these properties in the options object. . decode . Specifies a function that will be used to decode a cookie’s value. Since the value of a cookie has a limited character set (and must be a simple string), this function can be used to decode a previously-encoded cookie value into a JavaScript string or other object. . The default function is the global decodeURIComponent, which will decode any URL-encoded sequences into their byte representations. . note if an error is thrown from this function, the original, non-decoded cookie value will be returned as the cookie’s value. . cookie.serialize(name, value, options) . Serialize a cookie name-value pair into a Set-Cookie header string. The name argument is the name for the cookie, the value argument is the value to set the cookie to, and the options argument is an optional object containing additional serialization options. . var setCookie = cookie.serialize(&#39;foo&#39;, &#39;bar&#39;); // foo=bar . Options . cookie.serialize accepts these properties in the options object. . domain . Specifies the value for the Domain Set-Cookie attribute. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain. . encode . Specifies a function that will be used to encode a cookie’s value. Since value of a cookie has a limited character set (and must be a simple string), this function can be used to encode a value into a string suited for a cookie’s value. . The default function is the global encodeURIComponent, which will encode a JavaScript string into UTF-8 byte sequences and then URL-encode any that fall outside of the cookie range. . expires . Specifies the Date object to be the value for the Expires Set-Cookie attribute. By default, no expiration is set, and most clients will consider this a “non-persistent cookie” and will delete it on a condition like exiting a web browser application. . note the cookie storage model specification states that if both expires and maxAge are set, then maxAge takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time. . httpOnly . Specifies the boolean value for the HttpOnly Set-Cookie attribute. When truthy, the HttpOnly attribute is set, otherwise it is not. By default, the HttpOnly attribute is not set. . note be careful when setting this to true, as compliant clients will not allow client-side JavaScript to see the cookie in document.cookie. . maxAge . Specifies the number (in seconds) to be the value for the Max-Age Set-Cookie attribute. The given number will be converted to an integer by rounding down. By default, no maximum age is set. . note the cookie storage model specification states that if both expires and maxAge are set, then maxAge takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time. . path . Specifies the value for the Path Set-Cookie attribute. By default, the path is considered the “default path”. . priority . Specifies the string to be the value for the Priority Set-Cookie attribute. . &#39;low&#39; will set the Priority attribute to Low. | &#39;medium&#39; will set the Priority attribute to Medium, the default priority when not set. | &#39;high&#39; will set the Priority attribute to High. | . More information about the different priority levels can be found in the specification. . note This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it. . sameSite . Specifies the boolean or string to be the value for the SameSite Set-Cookie attribute. . true will set the SameSite attribute to Strict for strict same site enforcement. | false will not set the SameSite attribute. | &#39;lax&#39; will set the SameSite attribute to Lax for lax same site enforcement. | &#39;none&#39; will set the SameSite attribute to None for an explicit cross-site cookie. | &#39;strict&#39; will set the SameSite attribute to Strict for strict same site enforcement. | . More information about the different enforcement levels can be found in the specification. . note This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it. . secure . Specifies the boolean value for the Secure Set-Cookie attribute. When truthy, the Secure attribute is set, otherwise it is not. By default, the Secure attribute is not set. . note be careful when setting this to true, as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection. . Example . The following example uses this module in conjunction with the Node.js core HTTP server to prompt a user for their name and display it back on future visits. . var cookie = require(&#39;cookie&#39;); var escapeHtml = require(&#39;escape-html&#39;); var http = require(&#39;http&#39;); var url = require(&#39;url&#39;); function onRequest(req, res) { // Parse the query string var query = url.parse(req.url, true, true).query; if (query &amp;&amp; query.name) { // Set a new cookie with the name res.setHeader(&#39;Set-Cookie&#39;, cookie.serialize(&#39;name&#39;, String(query.name), { httpOnly: true, maxAge: 60 * 60 * 24 * 7 // 1 week })); // Redirect back after setting cookie res.statusCode = 302; res.setHeader(&#39;Location&#39;, req.headers.referer || &#39;/&#39;); res.end(); return; } // Parse the cookies on the request var cookies = cookie.parse(req.headers.cookie || &#39;&#39;); // Get the visitor name set in the cookie var name = cookies.name; res.setHeader(&#39;Content-Type&#39;, &#39;text/html; charset=UTF-8&#39;); if (name) { res.write(&#39;&lt;p&gt;Welcome back, &lt;b&gt;&#39; + escapeHtml(name) + &#39;&lt;/b&gt;!&lt;/p&gt;&#39;); } else { res.write(&#39;&lt;p&gt;Hello, new visitor!&lt;/p&gt;&#39;); } res.write(&#39;&lt;form method=&quot;GET&quot;&gt;&#39;); res.write(&#39;&lt;input placeholder=&quot;enter your name&quot; name=&quot;name&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;Set Name&quot;&gt;&#39;); res.end(&#39;&lt;/form&gt;&#39;); } http.createServer(onRequest).listen(3000); . Testing . $ npm test . Benchmark . $ npm run bench &gt; cookie@0.4.2 bench &gt; node benchmark/index.js node@16.14.0 v8@9.4.146.24-node.20 uv@1.43.0 zlib@1.2.11 brotli@1.0.9 ares@1.18.1 modules@93 nghttp2@1.45.1 napi@8 llhttp@6.0.4 openssl@1.1.1m+quic cldr@40.0 icu@70.1 tz@2021a3 unicode@14.0 ngtcp2@0.1.0-DEV nghttp3@0.1.0-DEV &gt; node benchmark/parse-top.js cookie.parse - top sites 15 tests completed. parse accounts.google.com x 2,421,245 ops/sec ±0.80% (188 runs sampled) parse apple.com x 2,684,710 ops/sec ±0.59% (189 runs sampled) parse cloudflare.com x 2,231,418 ops/sec ±0.76% (186 runs sampled) parse docs.google.com x 2,316,357 ops/sec ±1.28% (187 runs sampled) parse drive.google.com x 2,363,543 ops/sec ±0.49% (189 runs sampled) parse en.wikipedia.org x 839,414 ops/sec ±0.53% (189 runs sampled) parse linkedin.com x 553,797 ops/sec ±0.63% (190 runs sampled) parse maps.google.com x 1,314,779 ops/sec ±0.72% (189 runs sampled) parse microsoft.com x 153,783 ops/sec ±0.53% (190 runs sampled) parse play.google.com x 2,249,574 ops/sec ±0.59% (187 runs sampled) parse plus.google.com x 2,258,682 ops/sec ±0.60% (188 runs sampled) parse sites.google.com x 2,247,069 ops/sec ±0.68% (189 runs sampled) parse support.google.com x 1,456,840 ops/sec ±0.70% (187 runs sampled) parse www.google.com x 1,046,028 ops/sec ±0.58% (188 runs sampled) parse youtu.be x 937,428 ops/sec ±1.47% (190 runs sampled) parse youtube.com x 963,878 ops/sec ±0.59% (190 runs sampled) &gt; node benchmark/parse.js cookie.parse - generic 6 tests completed. simple x 2,745,604 ops/sec ±0.77% (185 runs sampled) decode x 557,287 ops/sec ±0.60% (188 runs sampled) unquote x 2,498,475 ops/sec ±0.55% (189 runs sampled) duplicates x 868,591 ops/sec ±0.89% (187 runs sampled) 10 cookies x 306,745 ops/sec ±0.49% (190 runs sampled) 100 cookies x 22,414 ops/sec ±2.38% (182 runs sampled) . References . RFC 6265: HTTP State Management Mechanism | Same-site Cookies | . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/express/node_modules/cookie/",
          "relUrl": "/node_backend_Trystan/node_modules/express/node_modules/cookie/",
          "date": ""
      }
      
  

  
      ,"page136": {
          "title": "debug",
          "content": "debug . . A tiny node.js debugging utility modelled after node core’s debugging technique. . Discussion around the V3 API is under way here . Installation . $ npm install debug . Usage . debug exposes a function; simply pass this function the name of your module, and it will return a decorated version of console.error for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole. . Example app.js: . var debug = require(&#39;debug&#39;)(&#39;http&#39;) , http = require(&#39;http&#39;) , name = &#39;My App&#39;; // fake app debug(&#39;booting %s&#39;, name); http.createServer(function(req, res){ debug(req.method + &#39; &#39; + req.url); res.end(&#39;hello n&#39;); }).listen(3000, function(){ debug(&#39;listening&#39;); }); // fake worker of some kind require(&#39;./worker&#39;); . Example worker.js: . var debug = require(&#39;debug&#39;)(&#39;worker&#39;); setInterval(function(){ debug(&#39;doing some work&#39;); }, 1000); . The DEBUG environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: . . . Windows note . On Windows the environment variable is set using the set command. . set DEBUG=*,-not_this . Note that PowerShell uses different syntax to set environment variables. . $env:DEBUG = &quot;*,-not_this&quot; . Then, run the program to be debugged as usual. . Millisecond diff . When actively developing an application it can be useful to see when the time spent between one debug() call and the next. Suppose for example you invoke debug() before requesting a resource, and after as well, the “+NNNms” will show you how much time was spent between calls. . . When stdout is not a TTY, Date#toUTCString() is used, making it more useful for logging the debug information as shown below: . . Conventions . If you’re using this in one or more of your libraries, you should use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you should prefix them with your library name and use “:” to separate features. For example “bodyParser” from Connect would then be “connect:bodyParser”. . Wildcards . The * character may be used as a wildcard. Suppose for example your library has debuggers named “connect:bodyParser”, “connect:compress”, “connect:session”, instead of listing all three with DEBUG=connect:bodyParser,connect:compress,connect:session, you may simply do DEBUG=connect:*, or to run everything using this module simply use DEBUG=*. . You can also exclude specific debuggers by prefixing them with a “-“ character. For example, DEBUG=*,-connect:* would include all debuggers except those starting with “connect:”. . Environment Variables . When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging: . Name Purpose . DEBUG | Enables/disables specific debugging namespaces. | . DEBUG_COLORS | Whether or not to use colors in the debug output. | . DEBUG_DEPTH | Object inspection depth. | . DEBUG_SHOW_HIDDEN | Shows hidden properties on inspected objects. | . Note: The environment variables beginning with DEBUG_ end up being converted into an Options object that gets used with %o/%O formatters. See the Node.js documentation for util.inspect() for the complete list. . Formatters . Debug uses printf-style formatting. Below are the officially supported formatters: . Formatter Representation . %O | Pretty-print an Object on multiple lines. | . %o | Pretty-print an Object all on a single line. | . %s | String. | . %d | Number (both integer and float). | . %j | JSON. Replaced with the string ‘[Circular]’ if the argument contains circular references. | . %% | Single percent sign (‘%’). This does not consume an argument. | . Custom formatters . You can add custom formatters by extending the debug.formatters object. For example, if you wanted to add support for rendering a Buffer as hex with %h, you could do something like: . const createDebug = require(&#39;debug&#39;) createDebug.formatters.h = (v) =&gt; { return v.toString(&#39;hex&#39;) } // …elsewhere const debug = createDebug(&#39;foo&#39;) debug(&#39;this is hex: %h&#39;, new Buffer(&#39;hello world&#39;)) // foo this is hex: 68656c6c6f20776f726c6421 +0ms . Browser support . You can build a browser-ready script using browserify, or just use the browserify-as-a-service build, if you don’t want to build it yourself. . Debug’s enable state is currently persisted by localStorage. Consider the situation shown below where you have worker:a and worker:b, and wish to debug both. You can enable this using localStorage.debug: . localStorage.debug = &#39;worker:*&#39; . And then refresh the page. . a = debug(&#39;worker:a&#39;); b = debug(&#39;worker:b&#39;); setInterval(function(){ a(&#39;doing some work&#39;); }, 1000); setInterval(function(){ b(&#39;doing some work&#39;); }, 1200); . Web Inspector Colors . Colors are also enabled on “Web Inspectors” that understand the %c formatting option. These are WebKit web inspectors, Firefox (since version 31) and the Firebug plugin for Firefox (any version). . Colored output looks something like: . . Output streams . By default debug will log to stderr, however this can be configured per-namespace by overriding the log method: . Example stdout.js: . var debug = require(&#39;debug&#39;); var error = debug(&#39;app:error&#39;); // by default stderr is used error(&#39;goes to stderr!&#39;); var log = debug(&#39;app:log&#39;); // set this namespace to log via console.log log.log = console.log.bind(console); // don&#39;t forget to bind to console! log(&#39;goes to stdout&#39;); error(&#39;still goes to stderr!&#39;); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error(&#39;now goes to stdout via console.info&#39;); log(&#39;still goes to stdout, but via console.info now&#39;); . Authors . TJ Holowaychuk | Nathan Rajlich | Andrew Rhyne | . Backers . Support us with a monthly donation and help us continue our activities. [Become a backer] . . Sponsors . Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] . . License . (The MIT License) . Copyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt; . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. . THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/express/node_modules/debug/",
          "relUrl": "/node_backend_Trystan/node_modules/express/node_modules/debug/",
          "date": ""
      }
      
  

  
      ,"page137": {
          "title": "ms",
          "content": "ms . . Use this package to easily convert various time formats to milliseconds. . Examples . ms(&#39;2 days&#39;) // 172800000 ms(&#39;1d&#39;) // 86400000 ms(&#39;10h&#39;) // 36000000 ms(&#39;2.5 hrs&#39;) // 9000000 ms(&#39;2h&#39;) // 7200000 ms(&#39;1m&#39;) // 60000 ms(&#39;5s&#39;) // 5000 ms(&#39;1y&#39;) // 31557600000 ms(&#39;100&#39;) // 100 . Convert from milliseconds . ms(60000) // &quot;1m&quot; ms(2 * 60000) // &quot;2m&quot; ms(ms(&#39;10 hours&#39;)) // &quot;10h&quot; . Time format written-out . ms(60000, { long: true }) // &quot;1 minute&quot; ms(2 * 60000, { long: true }) // &quot;2 minutes&quot; ms(ms(&#39;10 hours&#39;), { long: true }) // &quot;10 hours&quot; . Features . Works both in node and in the browser. | If a number is supplied to ms, a string with a unit is returned. | If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for &#39;100&#39;). | If you pass a string with a number and a valid unit, the number of equivalent ms is returned. | . Caught a bug? . Fork this repository to your own GitHub account and then clone it to your local device | Link the package to the global module directory: npm link | Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms. Instead of the default one from npm, node will now use your clone of ms! | As always, you can run the tests using: npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/express/node_modules/ms/",
          "relUrl": "/node_backend_Trystan/node_modules/express/node_modules/ms/",
          "date": ""
      }
      
  

  
      ,"page138": {
          "title": "finalhandler",
          "content": "finalhandler . . Node.js function to invoke as the final step to respond to HTTP request. . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install finalhandler . API . var finalhandler = require(&#39;finalhandler&#39;) . finalhandler(req, res, [options]) . Returns function to be invoked as the final step for the given req and res. This function is to be invoked as fn(err). If err is falsy, the handler will write out a 404 response to the res. If it is truthy, an error response will be written out to the res or res will be terminated if a response has already started. . When an error is written, the following information is added to the response: . The res.statusCode is set from err.status (or err.statusCode). If this value is outside the 4xx or 5xx range, it will be set to 500. | The res.statusMessage is set according to the status code. | The body will be the HTML of the status code message if env is &#39;production&#39;, otherwise will be err.stack. | Any headers specified in an err.headers object. | . The final handler will also unpipe anything from req when it is invoked. . options.env . By default, the environment is determined by NODE_ENV variable, but it can be overridden by this option. . options.onerror . Provide a function to be called with the err when it exists. Can be used for writing errors to a central location without excessive function generation. Called as onerror(err, req, res). . Examples . always 404 . var finalhandler = require(&#39;finalhandler&#39;) var http = require(&#39;http&#39;) var server = http.createServer(function (req, res) { var done = finalhandler(req, res) done() }) server.listen(3000) . perform simple action . var finalhandler = require(&#39;finalhandler&#39;) var fs = require(&#39;fs&#39;) var http = require(&#39;http&#39;) var server = http.createServer(function (req, res) { var done = finalhandler(req, res) fs.readFile(&#39;index.html&#39;, function (err, buf) { if (err) return done(err) res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;) res.end(buf) }) }) server.listen(3000) . use with middleware-style functions . var finalhandler = require(&#39;finalhandler&#39;) var http = require(&#39;http&#39;) var serveStatic = require(&#39;serve-static&#39;) var serve = serveStatic(&#39;public&#39;) var server = http.createServer(function (req, res) { var done = finalhandler(req, res) serve(req, res, done) }) server.listen(3000) . keep log of all errors . var finalhandler = require(&#39;finalhandler&#39;) var fs = require(&#39;fs&#39;) var http = require(&#39;http&#39;) var server = http.createServer(function (req, res) { var done = finalhandler(req, res, { onerror: logerror }) fs.readFile(&#39;index.html&#39;, function (err, buf) { if (err) return done(err) res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;) res.end(buf) }) }) server.listen(3000) function logerror (err) { console.error(err.stack || err.toString()) } . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/finalhandler/",
          "relUrl": "/node_backend_Trystan/node_modules/finalhandler/",
          "date": ""
      }
      
  

  
      ,"page139": {
          "title": "debug",
          "content": "debug . . A tiny node.js debugging utility modelled after node core’s debugging technique. . Discussion around the V3 API is under way here . Installation . $ npm install debug . Usage . debug exposes a function; simply pass this function the name of your module, and it will return a decorated version of console.error for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole. . Example app.js: . var debug = require(&#39;debug&#39;)(&#39;http&#39;) , http = require(&#39;http&#39;) , name = &#39;My App&#39;; // fake app debug(&#39;booting %s&#39;, name); http.createServer(function(req, res){ debug(req.method + &#39; &#39; + req.url); res.end(&#39;hello n&#39;); }).listen(3000, function(){ debug(&#39;listening&#39;); }); // fake worker of some kind require(&#39;./worker&#39;); . Example worker.js: . var debug = require(&#39;debug&#39;)(&#39;worker&#39;); setInterval(function(){ debug(&#39;doing some work&#39;); }, 1000); . The DEBUG environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: . . . Windows note . On Windows the environment variable is set using the set command. . set DEBUG=*,-not_this . Note that PowerShell uses different syntax to set environment variables. . $env:DEBUG = &quot;*,-not_this&quot; . Then, run the program to be debugged as usual. . Millisecond diff . When actively developing an application it can be useful to see when the time spent between one debug() call and the next. Suppose for example you invoke debug() before requesting a resource, and after as well, the “+NNNms” will show you how much time was spent between calls. . . When stdout is not a TTY, Date#toUTCString() is used, making it more useful for logging the debug information as shown below: . . Conventions . If you’re using this in one or more of your libraries, you should use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you should prefix them with your library name and use “:” to separate features. For example “bodyParser” from Connect would then be “connect:bodyParser”. . Wildcards . The * character may be used as a wildcard. Suppose for example your library has debuggers named “connect:bodyParser”, “connect:compress”, “connect:session”, instead of listing all three with DEBUG=connect:bodyParser,connect:compress,connect:session, you may simply do DEBUG=connect:*, or to run everything using this module simply use DEBUG=*. . You can also exclude specific debuggers by prefixing them with a “-“ character. For example, DEBUG=*,-connect:* would include all debuggers except those starting with “connect:”. . Environment Variables . When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging: . Name Purpose . DEBUG | Enables/disables specific debugging namespaces. | . DEBUG_COLORS | Whether or not to use colors in the debug output. | . DEBUG_DEPTH | Object inspection depth. | . DEBUG_SHOW_HIDDEN | Shows hidden properties on inspected objects. | . Note: The environment variables beginning with DEBUG_ end up being converted into an Options object that gets used with %o/%O formatters. See the Node.js documentation for util.inspect() for the complete list. . Formatters . Debug uses printf-style formatting. Below are the officially supported formatters: . Formatter Representation . %O | Pretty-print an Object on multiple lines. | . %o | Pretty-print an Object all on a single line. | . %s | String. | . %d | Number (both integer and float). | . %j | JSON. Replaced with the string ‘[Circular]’ if the argument contains circular references. | . %% | Single percent sign (‘%’). This does not consume an argument. | . Custom formatters . You can add custom formatters by extending the debug.formatters object. For example, if you wanted to add support for rendering a Buffer as hex with %h, you could do something like: . const createDebug = require(&#39;debug&#39;) createDebug.formatters.h = (v) =&gt; { return v.toString(&#39;hex&#39;) } // …elsewhere const debug = createDebug(&#39;foo&#39;) debug(&#39;this is hex: %h&#39;, new Buffer(&#39;hello world&#39;)) // foo this is hex: 68656c6c6f20776f726c6421 +0ms . Browser support . You can build a browser-ready script using browserify, or just use the browserify-as-a-service build, if you don’t want to build it yourself. . Debug’s enable state is currently persisted by localStorage. Consider the situation shown below where you have worker:a and worker:b, and wish to debug both. You can enable this using localStorage.debug: . localStorage.debug = &#39;worker:*&#39; . And then refresh the page. . a = debug(&#39;worker:a&#39;); b = debug(&#39;worker:b&#39;); setInterval(function(){ a(&#39;doing some work&#39;); }, 1000); setInterval(function(){ b(&#39;doing some work&#39;); }, 1200); . Web Inspector Colors . Colors are also enabled on “Web Inspectors” that understand the %c formatting option. These are WebKit web inspectors, Firefox (since version 31) and the Firebug plugin for Firefox (any version). . Colored output looks something like: . . Output streams . By default debug will log to stderr, however this can be configured per-namespace by overriding the log method: . Example stdout.js: . var debug = require(&#39;debug&#39;); var error = debug(&#39;app:error&#39;); // by default stderr is used error(&#39;goes to stderr!&#39;); var log = debug(&#39;app:log&#39;); // set this namespace to log via console.log log.log = console.log.bind(console); // don&#39;t forget to bind to console! log(&#39;goes to stdout&#39;); error(&#39;still goes to stderr!&#39;); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error(&#39;now goes to stdout via console.info&#39;); log(&#39;still goes to stdout, but via console.info now&#39;); . Authors . TJ Holowaychuk | Nathan Rajlich | Andrew Rhyne | . Backers . Support us with a monthly donation and help us continue our activities. [Become a backer] . . Sponsors . Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] . . License . (The MIT License) . Copyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt; . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. . THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/finalhandler/node_modules/debug/",
          "relUrl": "/node_backend_Trystan/node_modules/finalhandler/node_modules/debug/",
          "date": ""
      }
      
  

  
      ,"page140": {
          "title": "ms",
          "content": "ms . . Use this package to easily convert various time formats to milliseconds. . Examples . ms(&#39;2 days&#39;) // 172800000 ms(&#39;1d&#39;) // 86400000 ms(&#39;10h&#39;) // 36000000 ms(&#39;2.5 hrs&#39;) // 9000000 ms(&#39;2h&#39;) // 7200000 ms(&#39;1m&#39;) // 60000 ms(&#39;5s&#39;) // 5000 ms(&#39;1y&#39;) // 31557600000 ms(&#39;100&#39;) // 100 . Convert from milliseconds . ms(60000) // &quot;1m&quot; ms(2 * 60000) // &quot;2m&quot; ms(ms(&#39;10 hours&#39;)) // &quot;10h&quot; . Time format written-out . ms(60000, { long: true }) // &quot;1 minute&quot; ms(2 * 60000, { long: true }) // &quot;2 minutes&quot; ms(ms(&#39;10 hours&#39;), { long: true }) // &quot;10 hours&quot; . Features . Works both in node and in the browser. | If a number is supplied to ms, a string with a unit is returned. | If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for &#39;100&#39;). | If you pass a string with a number and a valid unit, the number of equivalent ms is returned. | . Caught a bug? . Fork this repository to your own GitHub account and then clone it to your local device | Link the package to the global module directory: npm link | Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms. Instead of the default one from npm, node will now use your clone of ms! | As always, you can run the tests using: npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/finalhandler/node_modules/ms/",
          "relUrl": "/node_backend_Trystan/node_modules/finalhandler/node_modules/ms/",
          "date": ""
      }
      
  

  
      ,"page141": {
          "title": "forwarded",
          "content": "forwarded . . Parse HTTP X-Forwarded-For header . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install forwarded . API . var forwarded = require(&#39;forwarded&#39;) . forwarded(req) . var addresses = forwarded(req) . Parse the X-Forwarded-For header from the request. Returns an array of the addresses, including the socket address for the req, in reverse order (i.e. index 0 is the socket address and the last index is the furthest address, typically the end-user). . Testing . $ npm test . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/forwarded/",
          "relUrl": "/node_backend_Trystan/node_modules/forwarded/",
          "date": ""
      }
      
  

  
      ,"page142": {
          "title": "fresh",
          "content": "fresh . . HTTP response freshness testing . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install fresh . API . var fresh = require(&#39;fresh&#39;) . fresh(reqHeaders, resHeaders) . Check freshness of the response using request and response headers. . When the response is still “fresh” in the client’s cache true is returned, otherwise false is returned to indicate that the client cache is now stale and the full response should be sent. . When a client sends the Cache-Control: no-cache request header to indicate an end-to-end reload request, this module will return false to make handling these requests transparent. . Known Issues . This module is designed to only follow the HTTP specifications, not to work-around all kinda of client bugs (especially since this module typically does not recieve enough information to understand what the client actually is). . There is a known issue that in certain versions of Safari, Safari will incorrectly make a request that allows this module to validate freshness of the resource even when Safari does not have a representation of the resource in the cache. The module jumanji can be used in an Express application to work-around this issue and also provides links to further reading on this Safari bug. . Example . API usage . var reqHeaders = { &#39;if-none-match&#39;: &#39;&quot;foo&quot;&#39; } var resHeaders = { &#39;etag&#39;: &#39;&quot;bar&quot;&#39; } fresh(reqHeaders, resHeaders) // =&gt; false var reqHeaders = { &#39;if-none-match&#39;: &#39;&quot;foo&quot;&#39; } var resHeaders = { &#39;etag&#39;: &#39;&quot;foo&quot;&#39; } fresh(reqHeaders, resHeaders) // =&gt; true . Using with Node.js http server . var fresh = require(&#39;fresh&#39;) var http = require(&#39;http&#39;) var server = http.createServer(function (req, res) { // perform server logic // ... including adding ETag / Last-Modified response headers if (isFresh(req, res)) { // client has a fresh copy of resource res.statusCode = 304 res.end() return } // send the resource res.statusCode = 200 res.end(&#39;hello, world!&#39;) }) function isFresh (req, res) { return fresh(req.headers, { &#39;etag&#39;: res.getHeader(&#39;ETag&#39;), &#39;last-modified&#39;: res.getHeader(&#39;Last-Modified&#39;) }) } server.listen(3000) . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/fresh/",
          "relUrl": "/node_backend_Trystan/node_modules/fresh/",
          "date": ""
      }
      
  

  
      ,"page143": {
          "title": "function-bind [![Version Badge][npm-version-svg]][package-url]",
          "content": "function-bind . . . Implementation of function.prototype.bind . Old versions of phantomjs, Internet Explorer &lt; 9, and node &lt; 0.6 don’t support Function.prototype.bind. . Example . Function.prototype.bind = require(&quot;function-bind&quot;) . Installation . npm install function-bind . Contributors . Raynos | . MIT Licenced .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/function-bind/",
          "relUrl": "/node_backend_Trystan/node_modules/function-bind/",
          "date": ""
      }
      
  

  
      ,"page144": {
          "title": "get-intrinsic [![Version Badge][npm-version-svg]][package-url]",
          "content": "get-intrinsic . . . Get and robustly cache all JS language-level intrinsics at first require time. . See the syntax described in the JS spec for reference. . Example . var GetIntrinsic = require(&#39;get-intrinsic&#39;); var assert = require(&#39;assert&#39;); // static methods assert.equal(GetIntrinsic(&#39;%Math.pow%&#39;), Math.pow); assert.equal(Math.pow(2, 3), 8); assert.equal(GetIntrinsic(&#39;%Math.pow%&#39;)(2, 3), 8); delete Math.pow; assert.equal(GetIntrinsic(&#39;%Math.pow%&#39;)(2, 3), 8); // instance methods var arr = [1]; assert.equal(GetIntrinsic(&#39;%Array.prototype.push%&#39;), Array.prototype.push); assert.deepEqual(arr, [1]); arr.push(2); assert.deepEqual(arr, [1, 2]); GetIntrinsic(&#39;%Array.prototype.push%&#39;).call(arr, 3); assert.deepEqual(arr, [1, 2, 3]); delete Array.prototype.push; GetIntrinsic(&#39;%Array.prototype.push%&#39;).call(arr, 4); assert.deepEqual(arr, [1, 2, 3, 4]); // missing features delete JSON.parse; // to simulate a real intrinsic that is missing in the environment assert.throws(() =&gt; GetIntrinsic(&#39;%JSON.parse%&#39;)); assert.equal(undefined, GetIntrinsic(&#39;%JSON.parse%&#39;, true)); . Tests . Simply clone the repo, npm install, and run npm test . Security . Please email @ljharb or see https://tidelift.com/security if you have a potential security vulnerability to report. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/get-intrinsic/",
          "relUrl": "/node_backend_Trystan/node_modules/get-intrinsic/",
          "date": ""
      }
      
  

  
      ,"page145": {
          "title": "gopd [![Version Badge][npm-version-svg]][package-url]",
          "content": "gopd . . . Object.getOwnPropertyDescriptor, but accounts for IE’s broken implementation. . Usage . var gOPD = require(&#39;gopd&#39;); var assert = require(&#39;assert&#39;); if (gOPD) { assert.equal(typeof gOPD, &#39;function&#39;, &#39;descriptors supported&#39;); // use gOPD like Object.getOwnPropertyDescriptor here } else { assert.ok(!gOPD, &#39;descriptors not supported&#39;); } .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/gopd/",
          "relUrl": "/node_backend_Trystan/node_modules/gopd/",
          "date": ""
      }
      
  

  
      ,"page146": {
          "title": "has-property-descriptors [![Version Badge][npm-version-svg]][package-url]",
          "content": "has-property-descriptors . . . Does the environment have full property descriptor support? Handles IE 8’s broken defineProperty/gOPD. . Example . var hasPropertyDescriptors = require(&#39;has-property-descriptors&#39;); var assert = require(&#39;assert&#39;); assert.equal(hasPropertyDescriptors(), true); // will be `false` in IE 6-8, and ES5 engines // Arrays can not have their length `[[Defined]]` in some engines assert.equal(hasPropertyDescriptors.hasArrayLengthDefineBug(), false); // will be `true` in Firefox 4-22, and node v0.6 . Tests . Simply clone the repo, npm install, and run npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/has-property-descriptors/",
          "relUrl": "/node_backend_Trystan/node_modules/has-property-descriptors/",
          "date": ""
      }
      
  

  
      ,"page147": {
          "title": "has-proto [![Version Badge][npm-version-svg]][package-url]",
          "content": "has-proto . . . Does this environment have the ability to set the [[Prototype]] of an object on creation with __proto__? . Example . var hasProto = require(&#39;has-proto&#39;); var assert = require(&#39;assert&#39;); assert.equal(typeof hasProto(), &#39;boolean&#39;); . Tests . Simply clone the repo, npm install, and run npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/has-proto/",
          "relUrl": "/node_backend_Trystan/node_modules/has-proto/",
          "date": ""
      }
      
  

  
      ,"page148": {
          "title": "has-symbols [![Version Badge][2]][1]",
          "content": "has-symbols . . . Determine if the JS environment has Symbol support. Supports spec, or shams. . Example . var hasSymbols = require(&#39;has-symbols&#39;); hasSymbols() === true; // if the environment has native Symbol support. Not polyfillable, not forgeable. var hasSymbolsKinda = require(&#39;has-symbols/shams&#39;); hasSymbolsKinda() === true; // if the environment has a Symbol sham that mostly follows the spec. . Supported Symbol shams . get-own-property-symbols npm | github | . | core-js npm | github | . | . Tests . Simply clone the repo, npm install, and run npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/has-symbols/",
          "relUrl": "/node_backend_Trystan/node_modules/has-symbols/",
          "date": ""
      }
      
  

  
      ,"page149": {
          "title": "hasown [![Version Badge][npm-version-svg]][package-url]",
          "content": "hasown . . . A robust, ES3 compatible, “has own property” predicate. . Example . const assert = require(&#39;assert&#39;); const hasOwn = require(&#39;hasown&#39;); assert.equal(hasOwn({}, &#39;toString&#39;), false); assert.equal(hasOwn([], &#39;length&#39;), true); assert.equal(hasOwn({ a: 42 }, &#39;a&#39;), true); . Tests . Simply clone the repo, npm install, and run npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/hasown/",
          "relUrl": "/node_backend_Trystan/node_modules/hasown/",
          "date": ""
      }
      
  

  
      ,"page150": {
          "title": "http-errors",
          "content": "http-errors . . Create HTTP errors for Express, Koa, Connect, etc. with ease. . Install . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install http-errors . Example . var createError = require(&#39;http-errors&#39;) var express = require(&#39;express&#39;) var app = express() app.use(function (req, res, next) { if (!req.user) return next(createError(401, &#39;Please login to view this page.&#39;)) next() }) . API . This is the current API, currently extracted from Koa and subject to change. . Error Properties . expose - can be used to signal if message should be sent to the client, defaulting to false when status &gt;= 500 | headers - can be an object of header names to values to be sent to the client, defaulting to undefined. When defined, the key names should all be lower-cased | message - the traditional error message, which should be kept short and all single line | status - the status code of the error, mirroring statusCode for general compatibility | statusCode - the status code of the error, defaulting to 500 | . createError([status], [message], [properties]) . Create a new error object with the given message msg. The error object inherits from createError.HttpError. . var err = createError(404, &#39;This video does not exist!&#39;) . status: 500 - the status code as a number | message - the message of the error, defaulting to node’s text for that status code. | properties - custom properties to attach to the object | . createError([status], [error], [properties]) . Extend the given error object with createError.HttpError properties. This will not alter the inheritance of the given error object, and the modified error object is the return value. . fs.readFile(&#39;foo.txt&#39;, function (err, buf) { if (err) { if (err.code === &#39;ENOENT&#39;) { var httpError = createError(404, err, { expose: false }) } else { var httpError = createError(500, err) } } }) . status - the status code as a number | error - the error object to extend | properties - custom properties to attach to the object | . createError.isHttpError(val) . Determine if the provided val is an HttpError. This will return true if the error inherits from the HttpError constructor of this module or matches the “duck type” for an error this module creates. All outputs from the createError factory will return true for this function, including if an non-HttpError was passed into the factory. . new createError[code || name]([msg])) . Create a new error object with the given message msg. The error object inherits from createError.HttpError. . var err = new createError.NotFound() . code - the status code as a number | name - the name of the error as a “bumpy case”, i.e. NotFound or InternalServerError. | . List of all constructors . Status Code Constructor Name . 400 | BadRequest | . 401 | Unauthorized | . 402 | PaymentRequired | . 403 | Forbidden | . 404 | NotFound | . 405 | MethodNotAllowed | . 406 | NotAcceptable | . 407 | ProxyAuthenticationRequired | . 408 | RequestTimeout | . 409 | Conflict | . 410 | Gone | . 411 | LengthRequired | . 412 | PreconditionFailed | . 413 | PayloadTooLarge | . 414 | URITooLong | . 415 | UnsupportedMediaType | . 416 | RangeNotSatisfiable | . 417 | ExpectationFailed | . 418 | ImATeapot | . 421 | MisdirectedRequest | . 422 | UnprocessableEntity | . 423 | Locked | . 424 | FailedDependency | . 425 | TooEarly | . 426 | UpgradeRequired | . 428 | PreconditionRequired | . 429 | TooManyRequests | . 431 | RequestHeaderFieldsTooLarge | . 451 | UnavailableForLegalReasons | . 500 | InternalServerError | . 501 | NotImplemented | . 502 | BadGateway | . 503 | ServiceUnavailable | . 504 | GatewayTimeout | . 505 | HTTPVersionNotSupported | . 506 | VariantAlsoNegotiates | . 507 | InsufficientStorage | . 508 | LoopDetected | . 509 | BandwidthLimitExceeded | . 510 | NotExtended | . 511 | NetworkAuthenticationRequired | . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/http-errors/",
          "relUrl": "/node_backend_Trystan/node_modules/http-errors/",
          "date": ""
      }
      
  

  
      ,"page151": {
          "title": "Pure JS character encoding conversion",
          "content": "Pure JS character encoding conversion . Doesn’t need native code compilation. Works on Windows and in sandboxed environments like Cloud9. | Used in popular projects like Express.js (body_parser), Grunt, Nodemailer, Yeoman and others. | Faster than node-iconv (see below for performance comparison). | Intuitive encode/decode API | Streaming support for Node v0.10+ | [Deprecated] Can extend Node.js primitives (buffers, streams) to support all iconv-lite encodings. | In-browser usage via Browserify (~180k gzip compressed with Buffer shim included). | Typescript type definition file included. | React Native is supported (need to explicitly npm install two more modules: buffer and stream). | License: MIT. | . . Usage . Basic API . var iconv = require(&#39;iconv-lite&#39;); // Convert from an encoded buffer to js string. str = iconv.decode(Buffer.from([0x68, 0x65, 0x6c, 0x6c, 0x6f]), &#39;win1251&#39;); // Convert from js string to an encoded buffer. buf = iconv.encode(&quot;Sample input string&quot;, &#39;win1251&#39;); // Check if encoding is supported iconv.encodingExists(&quot;us-ascii&quot;) . Streaming API (Node v0.10+) . // Decode stream (from binary stream to js strings) http.createServer(function(req, res) { var converterStream = iconv.decodeStream(&#39;win1251&#39;); req.pipe(converterStream); converterStream.on(&#39;data&#39;, function(str) { console.log(str); // Do something with decoded strings, chunk-by-chunk. }); }); // Convert encoding streaming example fs.createReadStream(&#39;file-in-win1251.txt&#39;) .pipe(iconv.decodeStream(&#39;win1251&#39;)) .pipe(iconv.encodeStream(&#39;ucs2&#39;)) .pipe(fs.createWriteStream(&#39;file-in-ucs2.txt&#39;)); // Sugar: all encode/decode streams have .collect(cb) method to accumulate data. http.createServer(function(req, res) { req.pipe(iconv.decodeStream(&#39;win1251&#39;)).collect(function(err, body) { assert(typeof body == &#39;string&#39;); console.log(body); // full request body string }); }); . [Deprecated] Extend Node.js own encodings . NOTE: This doesn’t work on latest Node versions. See details. . // After this call all Node basic primitives will understand iconv-lite encodings. iconv.extendNodeEncodings(); // Examples: buf = new Buffer(str, &#39;win1251&#39;); buf.write(str, &#39;gbk&#39;); str = buf.toString(&#39;latin1&#39;); assert(Buffer.isEncoding(&#39;iso-8859-15&#39;)); Buffer.byteLength(str, &#39;us-ascii&#39;); http.createServer(function(req, res) { req.setEncoding(&#39;big5&#39;); req.collect(function(err, body) { console.log(body); }); }); fs.createReadStream(&quot;file.txt&quot;, &quot;shift_jis&quot;); // External modules are also supported (if they use Node primitives, which they probably do). request = require(&#39;request&#39;); request({ url: &quot;http://github.com/&quot;, encoding: &quot;cp932&quot; }); // To remove extensions iconv.undoExtendNodeEncodings(); . Supported encodings . All node.js native encodings: utf8, ucs2 / utf16-le, ascii, binary, base64, hex. | Additional unicode encodings: utf16, utf16-be, utf-7, utf-7-imap. | All widespread singlebyte encodings: Windows 125x family, ISO-8859 family, IBM/DOS codepages, Macintosh family, KOI8 family, all others supported by iconv library. Aliases like ‘latin1’, ‘us-ascii’ also supported. | All widespread multibyte encodings: CP932, CP936, CP949, CP950, GB2312, GBK, GB18030, Big5, Shift_JIS, EUC-JP. | . See all supported encodings on wiki. . Most singlebyte encodings are generated automatically from node-iconv. Thank you Ben Noordhuis and libiconv authors! . Multibyte encodings are generated from Unicode.org mappings and WHATWG Encoding Standard mappings. Thank you, respective authors! . Encoding/decoding speed . Comparison with node-iconv module (1000x256kb, on MacBook Pro, Core i5/2.6 GHz, Node v0.12.0). Note: your results may vary, so please always check on your hardware. . operation iconv@2.1.4 iconv-lite@0.4.7 - encode(&#39;win1251&#39;) ~96 Mb/s ~320 Mb/s decode(&#39;win1251&#39;) ~95 Mb/s ~246 Mb/s . BOM handling . Decoding: BOM is stripped by default, unless overridden by passing stripBOM: false in options (f.ex. iconv.decode(buf, enc, {stripBOM: false})). A callback might also be given as a stripBOM parameter - it’ll be called if BOM character was actually found. | If you want to detect UTF-8 BOM when decoding other encodings, use node-autodetect-decoder-stream module. | Encoding: No BOM added, unless overridden by addBOM: true option. | . UTF-16 Encodings . This library supports UTF-16LE, UTF-16BE and UTF-16 encodings. First two are straightforward, but UTF-16 is trying to be smart about endianness in the following ways: . Decoding: uses BOM and ‘spaces heuristic’ to determine input endianness. Default is UTF-16LE, but can be overridden with defaultEncoding: &#39;utf-16be&#39; option. Strips BOM unless stripBOM: false. | Encoding: uses UTF-16LE and writes BOM by default. Use addBOM: false to override. | . Other notes . When decoding, be sure to supply a Buffer to decode() method, otherwise bad things usually happen. Untranslatable characters are set to � or ?. No transliteration is currently supported. Node versions 0.10.31 and 0.11.13 are buggy, don’t use them (see #65, #77). . Testing . $ git clone git@github.com:ashtuchkin/iconv-lite.git $ cd iconv-lite $ npm install $ npm test $ # To view performance: $ node test/performance.js $ # To view test coverage: $ npm run coverage $ open coverage/lcov-report/index.html .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/iconv-lite/",
          "relUrl": "/node_backend_Trystan/node_modules/iconv-lite/",
          "date": ""
      }
      
  

  
      ,"page152": {
          "title": "",
          "content": "Browser-friendly inheritance fully compatible with standard node.js inherits. . This package exports standard inherits from node.js util module in node environment, but also provides alternative browser-friendly implementation through browser field. Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of util. It also has a shim for old browsers with no Object.create support. . While keeping you sure you are using standard inherits implementation in node.js environment, it allows bundlers such as browserify to not include full util package to your client code if all you need is just inherits function. It worth, because browser shim for util package is large and inherits is often the single function you need from it. . It’s recommended to use this package instead of require(&#39;util&#39;).inherits for any code that has chances to be used not only in node.js but in browser too. . usage . var inherits = require(&#39;inherits&#39;); // then use exactly as the standard one . note on version ~1.0 . Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js inherits. . If you are using version ~1.0 and planning to switch to ~2.0, be careful: . new version uses super_ instead of super for referencing superclass | new version overwrites current prototype while old one preserves any existing fields on it | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/inherits/",
          "relUrl": "/node_backend_Trystan/node_modules/inherits/",
          "date": ""
      }
      
  

  
      ,"page153": {
          "title": "ipaddr.js — an IPv6 and IPv4 address manipulation library",
          "content": "ipaddr.js — an IPv6 and IPv4 address manipulation library . ipaddr.js is a small (1.9K minified and gzipped) library for manipulating IP addresses in JavaScript environments. It runs on both CommonJS runtimes (e.g. nodejs) and in a web browser. . ipaddr.js allows you to verify and parse string representation of an IP address, match it against a CIDR range or range list, determine if it falls into some reserved ranges (examples include loopback and private ranges), and convert between IPv4 and IPv4-mapped IPv6 addresses. . Installation . npm install ipaddr.js . or . bower install ipaddr.js . API . ipaddr.js defines one object in the global scope: ipaddr. In CommonJS, it is exported from the module: . var ipaddr = require(&#39;ipaddr.js&#39;); . The API consists of several global methods and two classes: ipaddr.IPv6 and ipaddr.IPv4. . Global methods . There are three global methods defined: ipaddr.isValid, ipaddr.parse and ipaddr.process. All of them receive a string as a single parameter. . The ipaddr.isValid method returns true if the address is a valid IPv4 or IPv6 address, and false otherwise. It does not throw any exceptions. . The ipaddr.parse method returns an object representing the IP address, or throws an Error if the passed string is not a valid representation of an IP address. . The ipaddr.process method works just like the ipaddr.parse one, but it automatically converts IPv4-mapped IPv6 addresses to their IPv4 counterparts before returning. It is useful when you have a Node.js instance listening on an IPv6 socket, and the net.ivp6.bindv6only sysctl parameter (or its equivalent on non-Linux OS) is set to 0. In this case, you can accept IPv4 connections on your IPv6-only socket, but the remote address will be mangled. Use ipaddr.process method to automatically demangle it. . Object representation . Parsing methods return an object which descends from ipaddr.IPv6 or ipaddr.IPv4. These objects share some properties, but most of them differ. . Shared properties . One can determine the type of address by calling addr.kind(). It will return either &quot;ipv6&quot; or &quot;ipv4&quot;. . An address can be converted back to its string representation with addr.toString(). Note that this method: . does not return the original string used to create the object (in fact, there is no way of getting that string) | returns a compact representation (when it is applicable) | . A match(range, bits) method can be used to check if the address falls into a certain CIDR range. Note that an address can be (obviously) matched only against an address of the same type. . For example: . var addr = ipaddr.parse(&quot;2001:db8:1234::1&quot;); var range = ipaddr.parse(&quot;2001:db8::&quot;); addr.match(range, 32); // =&gt; true . Alternatively, match can also be called as match([range, bits]). In this way, it can be used together with the parseCIDR(string) method, which parses an IP address together with a CIDR range. . For example: . var addr = ipaddr.parse(&quot;2001:db8:1234::1&quot;); addr.match(ipaddr.parseCIDR(&quot;2001:db8::/32&quot;)); // =&gt; true . A range() method returns one of predefined names for several special ranges defined by IP protocols. The exact names (and their respective CIDR ranges) can be looked up in the source: IPv6 ranges and IPv4 ranges. Some common ones include &quot;unicast&quot; (the default one) and &quot;reserved&quot;. . You can match against your own range list by using ipaddr.subnetMatch(address, rangeList, defaultName) method. It can work with a mix of IPv6 or IPv4 addresses, and accepts a name-to-subnet map as the range list. For example: . var rangeList = { documentationOnly: [ ipaddr.parse(&#39;2001:db8::&#39;), 32 ], tunnelProviders: [ [ ipaddr.parse(&#39;2001:470::&#39;), 32 ], // he.net [ ipaddr.parse(&#39;2001:5c0::&#39;), 32 ] // freenet6 ] }; ipaddr.subnetMatch(ipaddr.parse(&#39;2001:470:8:66::1&#39;), rangeList, &#39;unknown&#39;); // =&gt; &quot;tunnelProviders&quot; . The addresses can be converted to their byte representation with toByteArray(). (Actually, JavaScript mostly does not know about byte buffers. They are emulated with arrays of numbers, each in range of 0..255.) . var bytes = ipaddr.parse(&#39;2a00:1450:8007::68&#39;).toByteArray(); // ipv6.google.com bytes // =&gt; [42, 0x00, 0x14, 0x50, 0x80, 0x07, 0x00, &lt;zeroes...&gt;, 0x00, 0x68 ] . The ipaddr.IPv4 and ipaddr.IPv6 objects have some methods defined, too. All of them have the same interface for both protocols, and are similar to global methods. . ipaddr.IPvX.isValid(string) can be used to check if the string is a valid address for particular protocol, and ipaddr.IPvX.parse(string) is the error-throwing parser. . ipaddr.IPvX.isValid(string) uses the same format for parsing as the POSIX inet_ntoa function, which accepts unusual formats like 0xc0.168.1.1 or 0x10000000. The function ipaddr.IPv4.isValidFourPartDecimal(string) validates the IPv4 address and also ensures that it is written in four-part decimal format. . IPv6 properties . Sometimes you will want to convert IPv6 not to a compact string representation (with the :: substitution); the toNormalizedString() method will return an address where all zeroes are explicit. . For example: . var addr = ipaddr.parse(&quot;2001:0db8::0001&quot;); addr.toString(); // =&gt; &quot;2001:db8::1&quot; addr.toNormalizedString(); // =&gt; &quot;2001:db8:0:0:0:0:0:1&quot; . The isIPv4MappedAddress() method will return true if this address is an IPv4-mapped one, and toIPv4Address() will return an IPv4 object address. . To access the underlying binary representation of the address, use addr.parts. . var addr = ipaddr.parse(&quot;2001:db8:10::1234:DEAD&quot;); addr.parts // =&gt; [0x2001, 0xdb8, 0x10, 0, 0, 0, 0x1234, 0xdead] . A IPv6 zone index can be accessed via addr.zoneId: . var addr = ipaddr.parse(&quot;2001:db8::%eth0&quot;); addr.zoneId // =&gt; &#39;eth0&#39; . IPv4 properties . toIPv4MappedAddress() will return a corresponding IPv4-mapped IPv6 address. . To access the underlying representation of the address, use addr.octets. . var addr = ipaddr.parse(&quot;192.168.1.1&quot;); addr.octets // =&gt; [192, 168, 1, 1] . prefixLengthFromSubnetMask() will return a CIDR prefix length for a valid IPv4 netmask or null if the netmask is not valid. . ipaddr.IPv4.parse(&#39;255.255.255.240&#39;).prefixLengthFromSubnetMask() == 28 ipaddr.IPv4.parse(&#39;255.192.164.0&#39;).prefixLengthFromSubnetMask() == null . subnetMaskFromPrefixLength() will return an IPv4 netmask for a valid CIDR prefix length. . ipaddr.IPv4.subnetMaskFromPrefixLength(24) == &quot;255.255.255.0&quot; ipaddr.IPv4.subnetMaskFromPrefixLength(29) == &quot;255.255.255.248&quot; . broadcastAddressFromCIDR() will return the broadcast address for a given IPv4 interface and netmask in CIDR notation. . ipaddr.IPv4.broadcastAddressFromCIDR(&quot;172.0.0.1/24&quot;) == &quot;172.0.0.255&quot; . networkAddressFromCIDR() will return the network address for a given IPv4 interface and netmask in CIDR notation. . ipaddr.IPv4.networkAddressFromCIDR(&quot;172.0.0.1/24&quot;) == &quot;172.0.0.0&quot; . Conversion . IPv4 and IPv6 can be converted bidirectionally to and from network byte order (MSB) byte arrays. . The fromByteArray() method will take an array and create an appropriate IPv4 or IPv6 object if the input satisfies the requirements. For IPv4 it has to be an array of four 8-bit values, while for IPv6 it has to be an array of sixteen 8-bit values. . For example: . var addr = ipaddr.fromByteArray([0x7f, 0, 0, 1]); addr.toString(); // =&gt; &quot;127.0.0.1&quot; . or . var addr = ipaddr.fromByteArray([0x20, 1, 0xd, 0xb8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]) addr.toString(); // =&gt; &quot;2001:db8::1&quot; . Both objects also offer a toByteArray() method, which returns an array in network byte order (MSB). . For example: . var addr = ipaddr.parse(&quot;127.0.0.1&quot;); addr.toByteArray(); // =&gt; [0x7f, 0, 0, 1] . or . var addr = ipaddr.parse(&quot;2001:db8::1&quot;); addr.toByteArray(); // =&gt; [0x20, 1, 0xd, 0xb8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1] .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/ipaddr.js/",
          "relUrl": "/node_backend_Trystan/node_modules/ipaddr.js/",
          "date": ""
      }
      
  

  
      ,"page154": {
          "title": "media-typer",
          "content": "media-typer . . Simple RFC 6838 media type parser . Installation . $ npm install media-typer . API . var typer = require(&#39;media-typer&#39;) . typer.parse(string) . var obj = typer.parse(&#39;image/svg+xml; charset=utf-8&#39;) . Parse a media type string. This will return an object with the following properties (examples are shown for the string &#39;image/svg+xml; charset=utf-8&#39;): . type: The type of the media type (always lower case). Example: &#39;image&#39; . | subtype: The subtype of the media type (always lower case). Example: &#39;svg&#39; . | suffix: The suffix of the media type (always lower case). Example: &#39;xml&#39; . | parameters: An object of the parameters in the media type (name of parameter always lower case). Example: {charset: &#39;utf-8&#39;} . | . typer.parse(req) . var obj = typer.parse(req) . Parse the content-type header from the given req. Short-cut for typer.parse(req.headers[&#39;content-type&#39;]). . typer.parse(res) . var obj = typer.parse(res) . Parse the content-type header set on the given res. Short-cut for typer.parse(res.getHeader(&#39;content-type&#39;)). . typer.format(obj) . var obj = typer.format({type: &#39;image&#39;, subtype: &#39;svg&#39;, suffix: &#39;xml&#39;}) . Format an object into a media type string. This will return a string of the mime type for the given object. For the properties of the object, see the documentation for typer.parse(string). . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/media-typer/",
          "relUrl": "/node_backend_Trystan/node_modules/media-typer/",
          "date": ""
      }
      
  

  
      ,"page155": {
          "title": "Merge Descriptors",
          "content": "Merge Descriptors . . Merge objects using descriptors. . var thing = { get name() { return &#39;jon&#39; } } var animal = { } merge(animal, thing) animal.name === &#39;jon&#39; . API . merge(destination, source) . Redefines destination’s descriptors with source’s. . merge(destination, source, false) . Defines source’s descriptors on destination if destination does not have a descriptor by the same name. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/merge-descriptors/",
          "relUrl": "/node_backend_Trystan/node_modules/merge-descriptors/",
          "date": ""
      }
      
  

  
      ,"page156": {
          "title": "Methods",
          "content": "Methods . . HTTP verbs that Node.js core’s HTTP parser supports. . This module provides an export that is just like http.METHODS from Node.js core, with the following differences: . All method names are lower-cased. | Contains a fallback list of methods for Node.js versions that do not have a http.METHODS export (0.10 and lower). | Provides the fallback list when using tools like browserify without pulling in the http shim module. | . Install . $ npm install methods . API . var methods = require(&#39;methods&#39;) . methods . This is an array of lower-cased method names that Node.js supports. If Node.js provides the http.METHODS export, then this is the same array lower-cased, otherwise it is a snapshot of the verbs from Node.js 0.10. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/methods/",
          "relUrl": "/node_backend_Trystan/node_modules/methods/",
          "date": ""
      }
      
  

  
      ,"page157": {
          "title": "mime-db",
          "content": "mime-db . . This is a large database of mime types and information about them. It consists of a single, public JSON file and does not include any logic, allowing it to remain as un-opinionated as possible with an API. It aggregates data from the following sources: . http://www.iana.org/assignments/media-types/media-types.xhtml | http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types | http://hg.nginx.org/nginx/raw-file/default/conf/mime.types | . Installation . npm install mime-db . Database Download . If you’re crazy enough to use this in the browser, you can just grab the JSON file using jsDelivr. It is recommended to replace master with a release tag as the JSON format may change in the future. . https://cdn.jsdelivr.net/gh/jshttp/mime-db@master/db.json . Usage . var db = require(&#39;mime-db&#39;) // grab data on .js files var data = db[&#39;application/javascript&#39;] . Data Structure . The JSON file is a map lookup for lowercased mime types. Each mime type has the following properties: . .source - where the mime type is defined. If not set, it’s probably a custom media type. apache - Apache common media types | iana - IANA-defined media types | nginx - nginx media types | . | .extensions[] - known extensions associated with this mime type. | .compressible - whether a file of this type can be gzipped. | .charset - the default charset associated with this type, if any. | . If unknown, every property could be undefined. . Contributing . To edit the database, only make PRs against src/custom-types.json or src/custom-suffix.json. . The src/custom-types.json file is a JSON object with the MIME type as the keys and the values being an object with the following keys: . compressible - leave out if you don’t know, otherwise true/false to indicate whether the data represented by the type is typically compressible. | extensions - include an array of file extensions that are associated with the type. | notes - human-readable notes about the type, typically what the type is. | sources - include an array of URLs of where the MIME type and the associated extensions are sourced from. This needs to be a primary source; links to type aggregating sites and Wikipedia are not acceptable. | . To update the build, run npm run build. . Adding Custom Media Types . The best way to get new media types included in this library is to register them with the IANA. The community registration procedure is outlined in RFC 6838 section 5. Types registered with the IANA are automatically pulled into this library. . If that is not possible / feasible, they can be added directly here as a “custom” type. To do this, it is required to have a primary source that definitively lists the media type. If an extension is going to be listed as associateed with this media type, the source must definitively link the media type and extension as well. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/mime-db/",
          "relUrl": "/node_backend_Trystan/node_modules/mime-db/",
          "date": ""
      }
      
  

  
      ,"page158": {
          "title": "mime-types",
          "content": "mime-types . . The ultimate javascript content-type utility. . Similar to the mime@1.x module, except: . No fallbacks. Instead of naively returning the first available type, mime-types simply returns false, so do var type = mime.lookup(&#39;unrecognized&#39;) || &#39;application/octet-stream&#39;. | No new Mime() business, so you could do var lookup = require(&#39;mime-types&#39;).lookup. | No .define() functionality | Bug fixes for .lookup(path) | . Otherwise, the API is compatible with mime 1.x. . Install . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install mime-types . Adding Types . All mime types are based on mime-db, so open a PR there if you’d like to add mime types. . API . var mime = require(&#39;mime-types&#39;) . All functions return false if input is invalid or not found. . mime.lookup(path) . Lookup the content-type associated with a file. . mime.lookup(&#39;json&#39;) // &#39;application/json&#39; mime.lookup(&#39;.md&#39;) // &#39;text/markdown&#39; mime.lookup(&#39;file.html&#39;) // &#39;text/html&#39; mime.lookup(&#39;folder/file.js&#39;) // &#39;application/javascript&#39; mime.lookup(&#39;folder/.htaccess&#39;) // false mime.lookup(&#39;cats&#39;) // false . mime.contentType(type) . Create a full content-type header given a content-type or extension. When given an extension, mime.lookup is used to get the matching content-type, otherwise the given content-type is used. Then if the content-type does not already have a charset parameter, mime.charset is used to get the default charset and add to the returned content-type. . mime.contentType(&#39;markdown&#39;) // &#39;text/x-markdown; charset=utf-8&#39; mime.contentType(&#39;file.json&#39;) // &#39;application/json; charset=utf-8&#39; mime.contentType(&#39;text/html&#39;) // &#39;text/html; charset=utf-8&#39; mime.contentType(&#39;text/html; charset=iso-8859-1&#39;) // &#39;text/html; charset=iso-8859-1&#39; // from a full path mime.contentType(path.extname(&#39;/path/to/file.json&#39;)) // &#39;application/json; charset=utf-8&#39; . mime.extension(type) . Get the default extension for a content-type. . mime.extension(&#39;application/octet-stream&#39;) // &#39;bin&#39; . mime.charset(type) . Lookup the implied default charset of a content-type. . mime.charset(&#39;text/markdown&#39;) // &#39;UTF-8&#39; . var type = mime.types[extension] . A map of content-types by extension. . [extensions…] = mime.extensions[type] . A map of extensions by content-type. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/mime-types/",
          "relUrl": "/node_backend_Trystan/node_modules/mime-types/",
          "date": ""
      }
      
  

  
      ,"page159": {
          "title": "mime",
          "content": "mime . Comprehensive MIME type mapping API based on mime-db module. . Install . Install with npm: . npm install mime . Contributing / Testing . npm run test . Command Line . mime [path_string] . E.g. . &gt; mime scripts/jquery.js application/javascript . API - Queries . mime.lookup(path) . Get the mime type associated with a file, if no mime type is found application/octet-stream is returned. Performs a case-insensitive lookup using the extension in path (the substring after the last ‘/’ or ‘.’). E.g. . var mime = require(&#39;mime&#39;); mime.lookup(&#39;/path/to/file.txt&#39;); // =&gt; &#39;text/plain&#39; mime.lookup(&#39;file.txt&#39;); // =&gt; &#39;text/plain&#39; mime.lookup(&#39;.TXT&#39;); // =&gt; &#39;text/plain&#39; mime.lookup(&#39;htm&#39;); // =&gt; &#39;text/html&#39; . mime.default_type . Sets the mime type returned when mime.lookup fails to find the extension searched for. (Default is application/octet-stream.) . mime.extension(type) . Get the default extension for type . mime.extension(&#39;text/html&#39;); // =&gt; &#39;html&#39; mime.extension(&#39;application/octet-stream&#39;); // =&gt; &#39;bin&#39; . mime.charsets.lookup() . Map mime-type to charset . mime.charsets.lookup(&#39;text/plain&#39;); // =&gt; &#39;UTF-8&#39; . (The logic for charset lookups is pretty rudimentary. Feel free to suggest improvements.) . API - Defining Custom Types . Custom type mappings can be added on a per-project basis via the following APIs. . mime.define() . Add custom mime/extension mappings . mime.define({ &#39;text/x-some-format&#39;: [&#39;x-sf&#39;, &#39;x-sft&#39;, &#39;x-sfml&#39;], &#39;application/x-my-type&#39;: [&#39;x-mt&#39;, &#39;x-mtt&#39;], // etc ... }); mime.lookup(&#39;x-sft&#39;); // =&gt; &#39;text/x-some-format&#39; . The first entry in the extensions array is returned by mime.extension(). E.g. . mime.extension(&#39;text/x-some-format&#39;); // =&gt; &#39;x-sf&#39; . mime.load(filepath) . Load mappings from an Apache “.types” format file . mime.load(&#39;./my_project.types&#39;); . The .types file format is simple - See the types dir for examples. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/mime/",
          "relUrl": "/node_backend_Trystan/node_modules/mime/",
          "date": ""
      }
      
  

  
      ,"page160": {
          "title": "ms",
          "content": "ms . . Use this package to easily convert various time formats to milliseconds. . Examples . ms(&#39;2 days&#39;) // 172800000 ms(&#39;1d&#39;) // 86400000 ms(&#39;10h&#39;) // 36000000 ms(&#39;2.5 hrs&#39;) // 9000000 ms(&#39;2h&#39;) // 7200000 ms(&#39;1m&#39;) // 60000 ms(&#39;5s&#39;) // 5000 ms(&#39;1y&#39;) // 31557600000 ms(&#39;100&#39;) // 100 ms(&#39;-3 days&#39;) // -259200000 ms(&#39;-1h&#39;) // -3600000 ms(&#39;-200&#39;) // -200 . Convert from Milliseconds . ms(60000) // &quot;1m&quot; ms(2 * 60000) // &quot;2m&quot; ms(-3 * 60000) // &quot;-3m&quot; ms(ms(&#39;10 hours&#39;)) // &quot;10h&quot; . Time Format Written-Out . ms(60000, { long: true }) // &quot;1 minute&quot; ms(2 * 60000, { long: true }) // &quot;2 minutes&quot; ms(-3 * 60000, { long: true }) // &quot;-3 minutes&quot; ms(ms(&#39;10 hours&#39;), { long: true }) // &quot;10 hours&quot; . Features . Works both in Node.js and in the browser | If a number is supplied to ms, a string with a unit is returned | If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for &#39;100&#39;) | If you pass a string with a number and a valid unit, the number of equivalent milliseconds is returned | . Related Packages . ms.macro - Run ms as a macro at build-time. | . Caught a Bug? . Fork this repository to your own GitHub account and then clone it to your local device | Link the package to the global module directory: npm link | Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms. Instead of the default one from npm, Node.js will now use your clone of ms! | As always, you can run the tests using: npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/ms/",
          "relUrl": "/node_backend_Trystan/node_modules/ms/",
          "date": ""
      }
      
  

  
      ,"page161": {
          "title": "negotiator",
          "content": "negotiator . . An HTTP content negotiator for Node.js . Installation . $ npm install negotiator . API . var Negotiator = require(&#39;negotiator&#39;) . Accept Negotiation . availableMediaTypes = [&#39;text/html&#39;, &#39;text/plain&#39;, &#39;application/json&#39;] // The negotiator constructor receives a request object negotiator = new Negotiator(request) // Let&#39;s say Accept header is &#39;text/html, application/*;q=0.2, image/jpeg;q=0.8&#39; negotiator.mediaTypes() // -&gt; [&#39;text/html&#39;, &#39;image/jpeg&#39;, &#39;application/*&#39;] negotiator.mediaTypes(availableMediaTypes) // -&gt; [&#39;text/html&#39;, &#39;application/json&#39;] negotiator.mediaType(availableMediaTypes) // -&gt; &#39;text/html&#39; . You can check a working example at examples/accept.js. . Methods . mediaType() . Returns the most preferred media type from the client. . mediaType(availableMediaType) . Returns the most preferred media type from a list of available media types. . mediaTypes() . Returns an array of preferred media types ordered by the client preference. . mediaTypes(availableMediaTypes) . Returns an array of preferred media types ordered by priority from a list of available media types. . Accept-Language Negotiation . negotiator = new Negotiator(request) availableLanguages = [&#39;en&#39;, &#39;es&#39;, &#39;fr&#39;] // Let&#39;s say Accept-Language header is &#39;en;q=0.8, es, pt&#39; negotiator.languages() // -&gt; [&#39;es&#39;, &#39;pt&#39;, &#39;en&#39;] negotiator.languages(availableLanguages) // -&gt; [&#39;es&#39;, &#39;en&#39;] language = negotiator.language(availableLanguages) // -&gt; &#39;es&#39; . You can check a working example at examples/language.js. . Methods . language() . Returns the most preferred language from the client. . language(availableLanguages) . Returns the most preferred language from a list of available languages. . languages() . Returns an array of preferred languages ordered by the client preference. . languages(availableLanguages) . Returns an array of preferred languages ordered by priority from a list of available languages. . Accept-Charset Negotiation . availableCharsets = [&#39;utf-8&#39;, &#39;iso-8859-1&#39;, &#39;iso-8859-5&#39;] negotiator = new Negotiator(request) // Let&#39;s say Accept-Charset header is &#39;utf-8, iso-8859-1;q=0.8, utf-7;q=0.2&#39; negotiator.charsets() // -&gt; [&#39;utf-8&#39;, &#39;iso-8859-1&#39;, &#39;utf-7&#39;] negotiator.charsets(availableCharsets) // -&gt; [&#39;utf-8&#39;, &#39;iso-8859-1&#39;] negotiator.charset(availableCharsets) // -&gt; &#39;utf-8&#39; . You can check a working example at examples/charset.js. . Methods . charset() . Returns the most preferred charset from the client. . charset(availableCharsets) . Returns the most preferred charset from a list of available charsets. . charsets() . Returns an array of preferred charsets ordered by the client preference. . charsets(availableCharsets) . Returns an array of preferred charsets ordered by priority from a list of available charsets. . Accept-Encoding Negotiation . availableEncodings = [&#39;identity&#39;, &#39;gzip&#39;] negotiator = new Negotiator(request) // Let&#39;s say Accept-Encoding header is &#39;gzip, compress;q=0.2, identity;q=0.5&#39; negotiator.encodings() // -&gt; [&#39;gzip&#39;, &#39;identity&#39;, &#39;compress&#39;] negotiator.encodings(availableEncodings) // -&gt; [&#39;gzip&#39;, &#39;identity&#39;] negotiator.encoding(availableEncodings) // -&gt; &#39;gzip&#39; . You can check a working example at examples/encoding.js. . Methods . encoding() . Returns the most preferred encoding from the client. . encoding(availableEncodings) . Returns the most preferred encoding from a list of available encodings. . encodings() . Returns an array of preferred encodings ordered by the client preference. . encodings(availableEncodings) . Returns an array of preferred encodings ordered by priority from a list of available encodings. . See Also . The accepts module builds on this module and provides an alternative interface, mime type validation, and more. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/negotiator/",
          "relUrl": "/node_backend_Trystan/node_modules/negotiator/",
          "date": ""
      }
      
  

  
      ,"page162": {
          "title": "object-assign",
          "content": "object-assign . ES2015 Object.assign() ponyfill . Use the built-in . Node.js 4 and up, as well as every evergreen browser (Chrome, Edge, Firefox, Opera, Safari), support Object.assign() :tada:. If you target only those environments, then by all means, use Object.assign() instead of this package. . Install . $ npm install --save object-assign . Usage . const objectAssign = require(&#39;object-assign&#39;); objectAssign({foo: 0}, {bar: 1}); //=&gt; {foo: 0, bar: 1} // multiple sources objectAssign({foo: 0}, {bar: 1}, {baz: 2}); //=&gt; {foo: 0, bar: 1, baz: 2} // overwrites equal keys objectAssign({foo: 0}, {foo: 1}, {foo: 2}); //=&gt; {foo: 2} // ignores null and undefined sources objectAssign({foo: 0}, null, {bar: 1}, undefined); //=&gt; {foo: 0, bar: 1} . API . objectAssign(target, [source, …]) . Assigns enumerable own properties of source objects to the target object and returns the target object. Additional source objects will overwrite previous ones. . Resources . ES2015 spec - Object.assign | . Related . deep-assign - Recursive Object.assign() | . License . MIT © Sindre Sorhus .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/object-assign/",
          "relUrl": "/node_backend_Trystan/node_modules/object-assign/",
          "date": ""
      }
      
  

  
      ,"page163": {
          "title": "object-inspect [![Version Badge][2]][1]",
          "content": "object-inspect . string representations of objects in node and the browser . . . example . circular . var inspect = require(&#39;object-inspect&#39;); var obj = { a: 1, b: [3,4] }; obj.c = obj; console.log(inspect(obj)); . dom element . var inspect = require(&#39;object-inspect&#39;); var d = document.createElement(&#39;div&#39;); d.setAttribute(&#39;id&#39;, &#39;beep&#39;); d.innerHTML = &#39;&lt;b&gt;wooo&lt;/b&gt;&lt;i&gt;iiiii&lt;/i&gt;&#39;; console.log(inspect([ d, { a: 3, b : 4, c: [5,6,[7,[8,[9]]]] } ])); . output: . [ &lt;div id=&quot;beep&quot;&gt;...&lt;/div&gt;, { a: 3, b: 4, c: [ 5, 6, [ 7, [ 8, [ ... ] ] ] ] } ] . methods . var inspect = require(&#39;object-inspect&#39;) . var s = inspect(obj, opts={}) . Return a string s with the string representation of obj up to a depth of opts.depth. . Additional options: . quoteStyle: must be “single” or “double”, if present. Default &#39;single&#39; for strings, &#39;double&#39; for HTML elements. | maxStringLength: must be 0, a positive integer, Infinity, or null, if present. Default Infinity. | customInspect: When true, a custom inspect method function will be invoked (either undere the util.inspect.custom symbol, or the inspect property). When the string &#39;symbol&#39;, only the symbol method will be invoked. Default true. | indent: must be “ t”, null, or a positive integer. Default null. | numericSeparator: must be a boolean, if present. Default false. If true, all numbers will be printed with numeric separators (eg, 1234.5678 will be printed as &#39;1_234.567_8&#39;) | . install . With npm do: . npm install object-inspect . license . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/object-inspect/",
          "relUrl": "/node_backend_Trystan/node_modules/object-inspect/",
          "date": ""
      }
      
  

  
      ,"page164": {
          "title": "on-finished",
          "content": "on-finished . . Execute a callback when a HTTP request closes, finishes, or errors. . Install . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install on-finished . API . var onFinished = require(&#39;on-finished&#39;) . onFinished(res, listener) . Attach a listener to listen for the response to finish. The listener will be invoked only once when the response finished. If the response finished to an error, the first argument will contain the error. If the response has already finished, the listener will be invoked. . Listening to the end of a response would be used to close things associated with the response, like open files. . Listener is invoked as listener(err, res). . onFinished(res, function (err, res) { // clean up open fds, etc. // err contains the error if request error&#39;d }) . onFinished(req, listener) . Attach a listener to listen for the request to finish. The listener will be invoked only once when the request finished. If the request finished to an error, the first argument will contain the error. If the request has already finished, the listener will be invoked. . Listening to the end of a request would be used to know when to continue after reading the data. . Listener is invoked as listener(err, req). . var data = &#39;&#39; req.setEncoding(&#39;utf8&#39;) req.on(&#39;data&#39;, function (str) { data += str }) onFinished(req, function (err, req) { // data is read unless there is err }) . onFinished.isFinished(res) . Determine if res is already finished. This would be useful to check and not even start certain operations if the response has already finished. . onFinished.isFinished(req) . Determine if req is already finished. This would be useful to check and not even start certain operations if the request has already finished. . Special Node.js requests . HTTP CONNECT method . The meaning of the CONNECT method from RFC 7231, section 4.3.6: . The CONNECT method requests that the recipient establish a tunnel to the destination origin server identified by the request-target and, if successful, thereafter restrict its behavior to blind forwarding of packets, in both directions, until the tunnel is closed. Tunnels are commonly used to create an end-to-end virtual connection, through one or more proxies, which can then be secured using TLS (Transport Layer Security, [RFC5246]). . In Node.js, these request objects come from the &#39;connect&#39; event on the HTTP server. . When this module is used on a HTTP CONNECT request, the request is considered “finished” immediately, due to limitations in the Node.js interface. This means if the CONNECT request contains a request entity, the request will be considered “finished” even before it has been read. . There is no such thing as a response object to a CONNECT request in Node.js, so there is no support for one. . HTTP Upgrade request . The meaning of the Upgrade header from RFC 7230, section 6.1: . The “Upgrade” header field is intended to provide a simple mechanism for transitioning from HTTP/1.1 to some other protocol on the same connection. . In Node.js, these request objects come from the &#39;upgrade&#39; event on the HTTP server. . When this module is used on a HTTP request with an Upgrade header, the request is considered “finished” immediately, due to limitations in the Node.js interface. This means if the Upgrade request contains a request entity, the request will be considered “finished” even before it has been read. . There is no such thing as a response object to a Upgrade request in Node.js, so there is no support for one. . Example . The following code ensures that file descriptors are always closed once the response finishes. . var destroy = require(&#39;destroy&#39;) var fs = require(&#39;fs&#39;) var http = require(&#39;http&#39;) var onFinished = require(&#39;on-finished&#39;) http.createServer(function onRequest (req, res) { var stream = fs.createReadStream(&#39;package.json&#39;) stream.pipe(res) onFinished(res, function () { destroy(stream) }) }) . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/on-finished/",
          "relUrl": "/node_backend_Trystan/node_modules/on-finished/",
          "date": ""
      }
      
  

  
      ,"page165": {
          "title": "parseurl",
          "content": "parseurl . . Parse a URL with memoization. . Install . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install parseurl . API . var parseurl = require(&#39;parseurl&#39;) . parseurl(req) . Parse the URL of the given request object (looks at the req.url property) and return the result. The result is the same as url.parse in Node.js core. Calling this function multiple times on the same req where req.url does not change will return a cached parsed object, rather than parsing again. . parseurl.original(req) . Parse the original URL of the given request object and return the result. This works by trying to parse req.originalUrl if it is a string, otherwise parses req.url. The result is the same as url.parse in Node.js core. Calling this function multiple times on the same req where req.originalUrl does not change will return a cached parsed object, rather than parsing again. . Benchmark . $ npm run-script bench &gt; parseurl@1.3.3 bench nodejs-parseurl &gt; node benchmark/index.js http_parser@2.8.0 node@10.6.0 v8@6.7.288.46-node.13 uv@1.21.0 zlib@1.2.11 ares@1.14.0 modules@64 nghttp2@1.32.0 napi@3 openssl@1.1.0h icu@61.1 unicode@10.0 cldr@33.0 tz@2018c &gt; node benchmark/fullurl.js Parsing URL &quot;http://localhost:8888/foo/bar?user=tj&amp;pet=fluffy&quot; 4 tests completed. fasturl x 2,207,842 ops/sec ±3.76% (184 runs sampled) nativeurl - legacy x 507,180 ops/sec ±0.82% (191 runs sampled) nativeurl - whatwg x 290,044 ops/sec ±1.96% (189 runs sampled) parseurl x 488,907 ops/sec ±2.13% (192 runs sampled) &gt; node benchmark/pathquery.js Parsing URL &quot;/foo/bar?user=tj&amp;pet=fluffy&quot; 4 tests completed. fasturl x 3,812,564 ops/sec ±3.15% (188 runs sampled) nativeurl - legacy x 2,651,631 ops/sec ±1.68% (189 runs sampled) nativeurl - whatwg x 161,837 ops/sec ±2.26% (189 runs sampled) parseurl x 4,166,338 ops/sec ±2.23% (184 runs sampled) &gt; node benchmark/samerequest.js Parsing URL &quot;/foo/bar?user=tj&amp;pet=fluffy&quot; on same request object 4 tests completed. fasturl x 3,821,651 ops/sec ±2.42% (185 runs sampled) nativeurl - legacy x 2,651,162 ops/sec ±1.90% (187 runs sampled) nativeurl - whatwg x 175,166 ops/sec ±1.44% (188 runs sampled) parseurl x 14,912,606 ops/sec ±3.59% (183 runs sampled) &gt; node benchmark/simplepath.js Parsing URL &quot;/foo/bar&quot; 4 tests completed. fasturl x 12,421,765 ops/sec ±2.04% (191 runs sampled) nativeurl - legacy x 7,546,036 ops/sec ±1.41% (188 runs sampled) nativeurl - whatwg x 198,843 ops/sec ±1.83% (189 runs sampled) parseurl x 24,244,006 ops/sec ±0.51% (194 runs sampled) &gt; node benchmark/slash.js Parsing URL &quot;/&quot; 4 tests completed. fasturl x 17,159,456 ops/sec ±3.25% (188 runs sampled) nativeurl - legacy x 11,635,097 ops/sec ±3.79% (184 runs sampled) nativeurl - whatwg x 240,693 ops/sec ±0.83% (189 runs sampled) parseurl x 42,279,067 ops/sec ±0.55% (190 runs sampled) . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/parseurl/",
          "relUrl": "/node_backend_Trystan/node_modules/parseurl/",
          "date": ""
      }
      
  

  
      ,"page166": {
          "title": "Path-to-RegExp",
          "content": "Path-to-RegExp . Turn an Express-style path string such as /user/:name into a regular expression. . Note: This is a legacy branch. You should upgrade to 1.x. . Usage . var pathToRegexp = require(&#39;path-to-regexp&#39;); . pathToRegexp(path, keys, options) . path A string in the express format, an array of such strings, or a regular expression | keys An array to be populated with the keys present in the url. Once the function completes, this will be an array of strings. | options options.sensitive Defaults to false, set this to true to make routes case sensitive | options.strict Defaults to false, set this to true to make the trailing slash matter. | options.end Defaults to true, set this to false to only match the prefix of the URL. | . | . var keys = []; var exp = pathToRegexp(&#39;/foo/:bar&#39;, keys); //keys = [&#39;bar&#39;] //exp = /^ /foo /(?:([^ /]+?)) /?$/i . Live Demo . You can see a live demo of this library in use at express-route-tester. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/path-to-regexp/",
          "relUrl": "/node_backend_Trystan/node_modules/path-to-regexp/",
          "date": ""
      }
      
  

  
      ,"page167": {
          "title": "proxy-addr",
          "content": "proxy-addr . . Determine address of proxied request . Install . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install proxy-addr . API . var proxyaddr = require(&#39;proxy-addr&#39;) . proxyaddr(req, trust) . Return the address of the request, using the given trust parameter. . The trust argument is a function that returns true if you trust the address, false if you don’t. The closest untrusted address is returned. . proxyaddr(req, function (addr) { return addr === &#39;127.0.0.1&#39; }) proxyaddr(req, function (addr, i) { return i &lt; 1 }) . The trust arugment may also be a single IP address string or an array of trusted addresses, as plain IP addresses, CIDR-formatted strings, or IP/netmask strings. . proxyaddr(req, &#39;127.0.0.1&#39;) proxyaddr(req, [&#39;127.0.0.0/8&#39;, &#39;10.0.0.0/8&#39;]) proxyaddr(req, [&#39;127.0.0.0/255.0.0.0&#39;, &#39;192.168.0.0/255.255.0.0&#39;]) . This module also supports IPv6. Your IPv6 addresses will be normalized automatically (i.e. fe80::00ed:1 equals fe80:0:0:0:0:0:ed:1). . proxyaddr(req, &#39;::1&#39;) proxyaddr(req, [&#39;::1/128&#39;, &#39;fe80::/10&#39;]) . This module will automatically work with IPv4-mapped IPv6 addresses as well to support node.js in IPv6-only mode. This means that you do not have to specify both ::ffff:a00:1 and 10.0.0.1. . As a convenience, this module also takes certain pre-defined names in addition to IP addresses, which expand into IP addresses: . proxyaddr(req, &#39;loopback&#39;) proxyaddr(req, [&#39;loopback&#39;, &#39;fc00:ac:1ab5:fff::1/64&#39;]) . loopback: IPv4 and IPv6 loopback addresses (like ::1 and 127.0.0.1). | linklocal: IPv4 and IPv6 link-local addresses (like fe80::1:1:1:1 and 169.254.0.1). | uniquelocal: IPv4 private addresses and IPv6 unique-local addresses (like fc00:ac:1ab5:fff::1 and 192.168.0.1). | . When trust is specified as a function, it will be called for each address to determine if it is a trusted address. The function is given two arguments: addr and i, where addr is a string of the address to check and i is a number that represents the distance from the socket address. . proxyaddr.all(req, [trust]) . Return all the addresses of the request, optionally stopping at the first untrusted. This array is ordered from closest to furthest (i.e. arr[0] === req.connection.remoteAddress). . proxyaddr.all(req) . The optional trust argument takes the same arguments as trust does in proxyaddr(req, trust). . proxyaddr.all(req, &#39;loopback&#39;) . proxyaddr.compile(val) . Compiles argument val into a trust function. This function takes the same arguments as trust does in proxyaddr(req, trust) and returns a function suitable for proxyaddr(req, trust). . var trust = proxyaddr.compile(&#39;loopback&#39;) var addr = proxyaddr(req, trust) . This function is meant to be optimized for use against every request. It is recommend to compile a trust function up-front for the trusted configuration and pass that to proxyaddr(req, trust) for each request. . Testing . $ npm test . Benchmarks . $ npm run-script bench . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/proxy-addr/",
          "relUrl": "/node_backend_Trystan/node_modules/proxy-addr/",
          "date": ""
      }
      
  

  
      ,"page168": {
          "title": "qs [![Version Badge][npm-version-svg]][package-url]",
          "content": "qs . . . A querystring parsing and stringifying library with some added security. . Lead Maintainer: Jordan Harband . The qs module was originally created and maintained by TJ Holowaychuk. . Usage . var qs = require(&#39;qs&#39;); var assert = require(&#39;assert&#39;); var obj = qs.parse(&#39;a=c&#39;); assert.deepEqual(obj, { a: &#39;c&#39; }); var str = qs.stringify(obj); assert.equal(str, &#39;a=c&#39;); . Parsing Objects . . qs.parse(string, [options]); . qs allows you to create nested objects within your query strings, by surrounding the name of sub-keys with square brackets []. For example, the string &#39;foo[bar]=baz&#39; converts to: . assert.deepEqual(qs.parse(&#39;foo[bar]=baz&#39;), { foo: { bar: &#39;baz&#39; } }); . When using the plainObjects option the parsed value is returned as a null object, created via Object.create(null) and as such you should be aware that prototype methods will not exist on it and a user may set those names to whatever value they like: . var nullObject = qs.parse(&#39;a[hasOwnProperty]=b&#39;, { plainObjects: true }); assert.deepEqual(nullObject, { a: { hasOwnProperty: &#39;b&#39; } }); . By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option. . var protoObject = qs.parse(&#39;a[hasOwnProperty]=b&#39;, { allowPrototypes: true }); assert.deepEqual(protoObject, { a: { hasOwnProperty: &#39;b&#39; } }); . URI encoded strings work too: . assert.deepEqual(qs.parse(&#39;a%5Bb%5D=c&#39;), { a: { b: &#39;c&#39; } }); . You can also nest your objects, like &#39;foo[bar][baz]=foobarbaz&#39;: . assert.deepEqual(qs.parse(&#39;foo[bar][baz]=foobarbaz&#39;), { foo: { bar: { baz: &#39;foobarbaz&#39; } } }); . By default, when nesting objects qs will only parse up to 5 children deep. This means if you attempt to parse a string like &#39;a[b][c][d][e][f][g][h][i]=j&#39; your resulting object will be: . var expected = { a: { b: { c: { d: { e: { f: { &#39;[g][h][i]&#39;: &#39;j&#39; } } } } } } }; var string = &#39;a[b][c][d][e][f][g][h][i]=j&#39;; assert.deepEqual(qs.parse(string), expected); . This depth can be overridden by passing a depth option to qs.parse(string, [options]): . var deep = qs.parse(&#39;a[b][c][d][e][f][g][h][i]=j&#39;, { depth: 1 }); assert.deepEqual(deep, { a: { b: { &#39;[c][d][e][f][g][h][i]&#39;: &#39;j&#39; } } }); . The depth limit helps mitigate abuse when qs is used to parse user input, and it is recommended to keep it a reasonably small number. . For similar reasons, by default qs will only parse up to 1000 parameters. This can be overridden by passing a parameterLimit option: . var limited = qs.parse(&#39;a=b&amp;c=d&#39;, { parameterLimit: 1 }); assert.deepEqual(limited, { a: &#39;b&#39; }); . To bypass the leading question mark, use ignoreQueryPrefix: . var prefixed = qs.parse(&#39;?a=b&amp;c=d&#39;, { ignoreQueryPrefix: true }); assert.deepEqual(prefixed, { a: &#39;b&#39;, c: &#39;d&#39; }); . An optional delimiter can also be passed: . var delimited = qs.parse(&#39;a=b;c=d&#39;, { delimiter: &#39;;&#39; }); assert.deepEqual(delimited, { a: &#39;b&#39;, c: &#39;d&#39; }); . Delimiters can be a regular expression too: . var regexed = qs.parse(&#39;a=b;c=d,e=f&#39;, { delimiter: /[;,]/ }); assert.deepEqual(regexed, { a: &#39;b&#39;, c: &#39;d&#39;, e: &#39;f&#39; }); . Option allowDots can be used to enable dot notation: . var withDots = qs.parse(&#39;a.b=c&#39;, { allowDots: true }); assert.deepEqual(withDots, { a: { b: &#39;c&#39; } }); . If you have to deal with legacy browsers or services, there’s also support for decoding percent-encoded octets as iso-8859-1: . var oldCharset = qs.parse(&#39;a=%A7&#39;, { charset: &#39;iso-8859-1&#39; }); assert.deepEqual(oldCharset, { a: &#39;§&#39; }); . Some services add an initial utf8=✓ value to forms so that old Internet Explorer versions are more likely to submit the form as utf-8. Additionally, the server can check the value against wrong encodings of the checkmark character and detect that a query string or application/x-www-form-urlencoded body was not sent as utf-8, eg. if the form had an accept-charset parameter or the containing page had a different character set. . qs supports this mechanism via the charsetSentinel option. If specified, the utf8 parameter will be omitted from the returned object. It will be used to switch to iso-8859-1/utf-8 mode depending on how the checkmark is encoded. . Important: When you specify both the charset option and the charsetSentinel option, the charset will be overridden when the request contains a utf8 parameter from which the actual charset can be deduced. In that sense the charset will behave as the default charset rather than the authoritative charset. . var detectedAsUtf8 = qs.parse(&#39;utf8=%E2%9C%93&amp;a=%C3%B8&#39;, { charset: &#39;iso-8859-1&#39;, charsetSentinel: true }); assert.deepEqual(detectedAsUtf8, { a: &#39;ø&#39; }); // Browsers encode the checkmark as &amp;#10003; when submitting as iso-8859-1: var detectedAsIso8859_1 = qs.parse(&#39;utf8=%26%2310003%3B&amp;a=%F8&#39;, { charset: &#39;utf-8&#39;, charsetSentinel: true }); assert.deepEqual(detectedAsIso8859_1, { a: &#39;ø&#39; }); . If you want to decode the &amp;#...; syntax to the actual character, you can specify the interpretNumericEntities option as well: . var detectedAsIso8859_1 = qs.parse(&#39;a=%26%239786%3B&#39;, { charset: &#39;iso-8859-1&#39;, interpretNumericEntities: true }); assert.deepEqual(detectedAsIso8859_1, { a: &#39;☺&#39; }); . It also works when the charset has been detected in charsetSentinel mode. . Parsing Arrays . qs can also parse arrays using a similar [] notation: . var withArray = qs.parse(&#39;a[]=b&amp;a[]=c&#39;); assert.deepEqual(withArray, { a: [&#39;b&#39;, &#39;c&#39;] }); . You may specify an index as well: . var withIndexes = qs.parse(&#39;a[1]=c&amp;a[0]=b&#39;); assert.deepEqual(withIndexes, { a: [&#39;b&#39;, &#39;c&#39;] }); . Note that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number to create an array. When creating arrays with specific indices, qs will compact a sparse array to only the existing values preserving their order: . var noSparse = qs.parse(&#39;a[1]=b&amp;a[15]=c&#39;); assert.deepEqual(noSparse, { a: [&#39;b&#39;, &#39;c&#39;] }); . You may also use allowSparse option to parse sparse arrays: . var sparseArray = qs.parse(&#39;a[1]=2&amp;a[3]=5&#39;, { allowSparse: true }); assert.deepEqual(sparseArray, { a: [, &#39;2&#39;, , &#39;5&#39;] }); . Note that an empty string is also a value, and will be preserved: . var withEmptyString = qs.parse(&#39;a[]=&amp;a[]=b&#39;); assert.deepEqual(withEmptyString, { a: [&#39;&#39;, &#39;b&#39;] }); var withIndexedEmptyString = qs.parse(&#39;a[0]=b&amp;a[1]=&amp;a[2]=c&#39;); assert.deepEqual(withIndexedEmptyString, { a: [&#39;b&#39;, &#39;&#39;, &#39;c&#39;] }); . qs will also limit specifying indices in an array to a maximum index of 20. Any array members with an index of greater than 20 will instead be converted to an object with the index as the key. This is needed to handle cases when someone sent, for example, a[999999999] and it will take significant time to iterate over this huge array. . var withMaxIndex = qs.parse(&#39;a[100]=b&#39;); assert.deepEqual(withMaxIndex, { a: { &#39;100&#39;: &#39;b&#39; } }); . This limit can be overridden by passing an arrayLimit option: . var withArrayLimit = qs.parse(&#39;a[1]=b&#39;, { arrayLimit: 0 }); assert.deepEqual(withArrayLimit, { a: { &#39;1&#39;: &#39;b&#39; } }); . To disable array parsing entirely, set parseArrays to false. . var noParsingArrays = qs.parse(&#39;a[]=b&#39;, { parseArrays: false }); assert.deepEqual(noParsingArrays, { a: { &#39;0&#39;: &#39;b&#39; } }); . If you mix notations, qs will merge the two items into an object: . var mixedNotation = qs.parse(&#39;a[0]=b&amp;a[b]=c&#39;); assert.deepEqual(mixedNotation, { a: { &#39;0&#39;: &#39;b&#39;, b: &#39;c&#39; } }); . You can also create arrays of objects: . var arraysOfObjects = qs.parse(&#39;a[][b]=c&#39;); assert.deepEqual(arraysOfObjects, { a: [{ b: &#39;c&#39; }] }); . Some people use comma to join array, qs can parse it: . var arraysOfObjects = qs.parse(&#39;a=b,c&#39;, { comma: true }) assert.deepEqual(arraysOfObjects, { a: [&#39;b&#39;, &#39;c&#39;] }) . (this cannot convert nested objects, such as a={b:1},{c:d}) . Parsing primitive/scalar values (numbers, booleans, null, etc) . By default, all values are parsed as strings. This behavior will not change and is explained in issue #91. . var primitiveValues = qs.parse(&#39;a=15&amp;b=true&amp;c=null&#39;); assert.deepEqual(primitiveValues, { a: &#39;15&#39;, b: &#39;true&#39;, c: &#39;null&#39; }); . If you wish to auto-convert values which look like numbers, booleans, and other values into their primitive counterparts, you can use the query-types Express JS middleware which will auto-convert all request query parameters. . Stringifying . . qs.stringify(object, [options]); . When stringifying, qs by default URI encodes output. Objects are stringified as you would expect: . assert.equal(qs.stringify({ a: &#39;b&#39; }), &#39;a=b&#39;); assert.equal(qs.stringify({ a: { b: &#39;c&#39; } }), &#39;a%5Bb%5D=c&#39;); . This encoding can be disabled by setting the encode option to false: . var unencoded = qs.stringify({ a: { b: &#39;c&#39; } }, { encode: false }); assert.equal(unencoded, &#39;a[b]=c&#39;); . Encoding can be disabled for keys by setting the encodeValuesOnly option to true: . var encodedValues = qs.stringify( { a: &#39;b&#39;, c: [&#39;d&#39;, &#39;e=f&#39;], f: [[&#39;g&#39;], [&#39;h&#39;]] }, { encodeValuesOnly: true } ); assert.equal(encodedValues,&#39;a=b&amp;c[0]=d&amp;c[1]=e%3Df&amp;f[0][0]=g&amp;f[1][0]=h&#39;); . This encoding can also be replaced by a custom encoding method set as encoder option: . var encoded = qs.stringify({ a: { b: &#39;c&#39; } }, { encoder: function (str) { // Passed in values `a`, `b`, `c` return // Return encoded string }}) . (Note: the encoder option does not apply if encode is false) . Analogue to the encoder there is a decoder option for parse to override decoding of properties and values: . var decoded = qs.parse(&#39;x=z&#39;, { decoder: function (str) { // Passed in values `x`, `z` return // Return decoded string }}) . You can encode keys and values using different logic by using the type argument provided to the encoder: . var encoded = qs.stringify({ a: { b: &#39;c&#39; } }, { encoder: function (str, defaultEncoder, charset, type) { if (type === &#39;key&#39;) { return // Encoded key } else if (type === &#39;value&#39;) { return // Encoded value } }}) . The type argument is also provided to the decoder: . var decoded = qs.parse(&#39;x=z&#39;, { decoder: function (str, defaultDecoder, charset, type) { if (type === &#39;key&#39;) { return // Decoded key } else if (type === &#39;value&#39;) { return // Decoded value } }}) . Examples beyond this point will be shown as though the output is not URI encoded for clarity. Please note that the return values in these cases will be URI encoded during real usage. . When arrays are stringified, by default they are given explicit indices: . qs.stringify({ a: [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;] }); // &#39;a[0]=b&amp;a[1]=c&amp;a[2]=d&#39; . You may override this by setting the indices option to false: . qs.stringify({ a: [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;] }, { indices: false }); // &#39;a=b&amp;a=c&amp;a=d&#39; . You may use the arrayFormat option to specify the format of the output array: . qs.stringify({ a: [&#39;b&#39;, &#39;c&#39;] }, { arrayFormat: &#39;indices&#39; }) // &#39;a[0]=b&amp;a[1]=c&#39; qs.stringify({ a: [&#39;b&#39;, &#39;c&#39;] }, { arrayFormat: &#39;brackets&#39; }) // &#39;a[]=b&amp;a[]=c&#39; qs.stringify({ a: [&#39;b&#39;, &#39;c&#39;] }, { arrayFormat: &#39;repeat&#39; }) // &#39;a=b&amp;a=c&#39; qs.stringify({ a: [&#39;b&#39;, &#39;c&#39;] }, { arrayFormat: &#39;comma&#39; }) // &#39;a=b,c&#39; . Note: when using arrayFormat set to &#39;comma&#39;, you can also pass the commaRoundTrip option set to true or false, to append [] on single-item arrays, so that they can round trip through a parse. . When objects are stringified, by default they use bracket notation: . qs.stringify({ a: { b: { c: &#39;d&#39;, e: &#39;f&#39; } } }); // &#39;a[b][c]=d&amp;a[b][e]=f&#39; . You may override this to use dot notation by setting the allowDots option to true: . qs.stringify({ a: { b: { c: &#39;d&#39;, e: &#39;f&#39; } } }, { allowDots: true }); // &#39;a.b.c=d&amp;a.b.e=f&#39; . Empty strings and null values will omit the value, but the equals sign (=) remains in place: . assert.equal(qs.stringify({ a: &#39;&#39; }), &#39;a=&#39;); . Key with no values (such as an empty object or array) will return nothing: . assert.equal(qs.stringify({ a: [] }), &#39;&#39;); assert.equal(qs.stringify({ a: {} }), &#39;&#39;); assert.equal(qs.stringify({ a: [{}] }), &#39;&#39;); assert.equal(qs.stringify({ a: { b: []} }), &#39;&#39;); assert.equal(qs.stringify({ a: { b: {}} }), &#39;&#39;); . Properties that are set to undefined will be omitted entirely: . assert.equal(qs.stringify({ a: null, b: undefined }), &#39;a=&#39;); . The query string may optionally be prepended with a question mark: . assert.equal(qs.stringify({ a: &#39;b&#39;, c: &#39;d&#39; }, { addQueryPrefix: true }), &#39;?a=b&amp;c=d&#39;); . The delimiter may be overridden with stringify as well: . assert.equal(qs.stringify({ a: &#39;b&#39;, c: &#39;d&#39; }, { delimiter: &#39;;&#39; }), &#39;a=b;c=d&#39;); . If you only want to override the serialization of Date objects, you can provide a serializeDate option: . var date = new Date(7); assert.equal(qs.stringify({ a: date }), &#39;a=1970-01-01T00:00:00.007Z&#39;.replace(/:/g, &#39;%3A&#39;)); assert.equal( qs.stringify({ a: date }, { serializeDate: function (d) { return d.getTime(); } }), &#39;a=7&#39; ); . You may use the sort option to affect the order of parameter keys: . function alphabeticalSort(a, b) { return a.localeCompare(b); } assert.equal(qs.stringify({ a: &#39;c&#39;, z: &#39;y&#39;, b : &#39;f&#39; }, { sort: alphabeticalSort }), &#39;a=c&amp;b=f&amp;z=y&#39;); . Finally, you can use the filter option to restrict which keys will be included in the stringified output. If you pass a function, it will be called for each key to obtain the replacement value. Otherwise, if you pass an array, it will be used to select properties and array indices for stringification: . function filterFunc(prefix, value) { if (prefix == &#39;b&#39;) { // Return an `undefined` value to omit a property. return; } if (prefix == &#39;e[f]&#39;) { return value.getTime(); } if (prefix == &#39;e[g][0]&#39;) { return value * 2; } return value; } qs.stringify({ a: &#39;b&#39;, c: &#39;d&#39;, e: { f: new Date(123), g: [2] } }, { filter: filterFunc }); // &#39;a=b&amp;c=d&amp;e[f]=123&amp;e[g][0]=4&#39; qs.stringify({ a: &#39;b&#39;, c: &#39;d&#39;, e: &#39;f&#39; }, { filter: [&#39;a&#39;, &#39;e&#39;] }); // &#39;a=b&amp;e=f&#39; qs.stringify({ a: [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;], e: &#39;f&#39; }, { filter: [&#39;a&#39;, 0, 2] }); // &#39;a[0]=b&amp;a[2]=d&#39; . Handling of null values . By default, null values are treated like empty strings: . var withNull = qs.stringify({ a: null, b: &#39;&#39; }); assert.equal(withNull, &#39;a=&amp;b=&#39;); . Parsing does not distinguish between parameters with and without equal signs. Both are converted to empty strings. . var equalsInsensitive = qs.parse(&#39;a&amp;b=&#39;); assert.deepEqual(equalsInsensitive, { a: &#39;&#39;, b: &#39;&#39; }); . To distinguish between null values and empty strings use the strictNullHandling flag. In the result string the null values have no = sign: . var strictNull = qs.stringify({ a: null, b: &#39;&#39; }, { strictNullHandling: true }); assert.equal(strictNull, &#39;a&amp;b=&#39;); . To parse values without = back to null use the strictNullHandling flag: . var parsedStrictNull = qs.parse(&#39;a&amp;b=&#39;, { strictNullHandling: true }); assert.deepEqual(parsedStrictNull, { a: null, b: &#39;&#39; }); . To completely skip rendering keys with null values, use the skipNulls flag: . var nullsSkipped = qs.stringify({ a: &#39;b&#39;, c: null}, { skipNulls: true }); assert.equal(nullsSkipped, &#39;a=b&#39;); . If you’re communicating with legacy systems, you can switch to iso-8859-1 using the charset option: . var iso = qs.stringify({ æ: &#39;æ&#39; }, { charset: &#39;iso-8859-1&#39; }); assert.equal(iso, &#39;%E6=%E6&#39;); . Characters that don’t exist in iso-8859-1 will be converted to numeric entities, similar to what browsers do: . var numeric = qs.stringify({ a: &#39;☺&#39; }, { charset: &#39;iso-8859-1&#39; }); assert.equal(numeric, &#39;a=%26%239786%3B&#39;); . You can use the charsetSentinel option to announce the character by including an utf8=✓ parameter with the proper encoding if the checkmark, similar to what Ruby on Rails and others do when submitting forms. . var sentinel = qs.stringify({ a: &#39;☺&#39; }, { charsetSentinel: true }); assert.equal(sentinel, &#39;utf8=%E2%9C%93&amp;a=%E2%98%BA&#39;); var isoSentinel = qs.stringify({ a: &#39;æ&#39; }, { charsetSentinel: true, charset: &#39;iso-8859-1&#39; }); assert.equal(isoSentinel, &#39;utf8=%26%2310003%3B&amp;a=%E6&#39;); . Dealing with special character sets . By default the encoding and decoding of characters is done in utf-8, and iso-8859-1 support is also built in via the charset parameter. . If you wish to encode querystrings to a different character set (i.e. Shift JIS) you can use the qs-iconv library: . var encoder = require(&#39;qs-iconv/encoder&#39;)(&#39;shift_jis&#39;); var shiftJISEncoded = qs.stringify({ a: &#39;こんにちは！&#39; }, { encoder: encoder }); assert.equal(shiftJISEncoded, &#39;a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I&#39;); . This also works for decoding of query strings: . var decoder = require(&#39;qs-iconv/decoder&#39;)(&#39;shift_jis&#39;); var obj = qs.parse(&#39;a=%82%B1%82%F1%82%C9%82%BF%82%CD%81I&#39;, { decoder: decoder }); assert.deepEqual(obj, { a: &#39;こんにちは！&#39; }); . RFC 3986 and RFC 1738 space encoding . RFC3986 used as default option and encodes ‘ ‘ to %20 which is backward compatible. In the same time, output can be stringified as per RFC1738 with ‘ ‘ equal to ‘+’. . assert.equal(qs.stringify({ a: &#39;b c&#39; }), &#39;a=b%20c&#39;); assert.equal(qs.stringify({ a: &#39;b c&#39; }, { format : &#39;RFC3986&#39; }), &#39;a=b%20c&#39;); assert.equal(qs.stringify({ a: &#39;b c&#39; }, { format : &#39;RFC1738&#39; }), &#39;a=b+c&#39;); . Security . Please email @ljharb or see https://tidelift.com/security if you have a potential security vulnerability to report. . qs for enterprise . Available as part of the Tidelift Subscription . The maintainers of qs and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/qs/",
          "relUrl": "/node_backend_Trystan/node_modules/qs/",
          "date": ""
      }
      
  

  
      ,"page169": {
          "title": "range-parser",
          "content": "range-parser . . Range header field parser. . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install range-parser . API . var parseRange = require(&#39;range-parser&#39;) . parseRange(size, header, options) . Parse the given header string where size is the maximum size of the resource. An array of ranges will be returned or negative numbers indicating an error parsing. . -2 signals a malformed header string | -1 signals an unsatisfiable range | . // parse header from request var range = parseRange(size, req.headers.range) // the type of the range if (range.type === &#39;bytes&#39;) { // the ranges range.forEach(function (r) { // do something with r.start and r.end }) } . Options . These properties are accepted in the options object. . combine . Specifies if overlapping &amp; adjacent ranges should be combined, defaults to false. When true, ranges will be combined and returned as if they were specified that way in the header. . parseRange(100, &#39;bytes=50-55,0-10,5-10,56-60&#39;, { combine: true }) // =&gt; [ // { start: 0, end: 10 }, // { start: 50, end: 60 } // ] . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/range-parser/",
          "relUrl": "/node_backend_Trystan/node_modules/range-parser/",
          "date": ""
      }
      
  

  
      ,"page170": {
          "title": "raw-body",
          "content": "raw-body . . Gets the entire buffer of a stream either as a Buffer or a string. Validates the stream’s length against an expected length and maximum limit. Ideal for parsing request bodies. . Install . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install raw-body . TypeScript . This module includes a TypeScript declaration file to enable auto complete in compatible editors and type information for TypeScript projects. This module depends on the Node.js types, so install @types/node: . $ npm install @types/node . API . var getRawBody = require(&#39;raw-body&#39;) . getRawBody(stream, [options], [callback]) . Returns a promise if no callback specified and global Promise exists. . Options: . length - The length of the stream. If the contents of the stream do not add up to this length, an 400 error code is returned. | limit - The byte limit of the body. This is the number of bytes or any string format supported by bytes, for example 1000, &#39;500kb&#39; or &#39;3mb&#39;. If the body ends up being larger than this limit, a 413 error code is returned. | encoding - The encoding to use to decode the body into a string. By default, a Buffer instance will be returned when no encoding is specified. Most likely, you want utf-8, so setting encoding to true will decode as utf-8. You can use any type of encoding supported by iconv-lite. | . You can also pass a string in place of options to just specify the encoding. . If an error occurs, the stream will be paused, everything unpiped, and you are responsible for correctly disposing the stream. For HTTP requests, you may need to finish consuming the stream if you want to keep the socket open for future requests. For streams that use file descriptors, you should stream.destroy() or stream.close() to prevent leaks. . Errors . This module creates errors depending on the error condition during reading. The error may be an error from the underlying Node.js implementation, but is otherwise an error created by this module, which has the following attributes: . limit - the limit in bytes | length and expected - the expected length of the stream | received - the received bytes | encoding - the invalid encoding | status and statusCode - the corresponding status code for the error | type - the error type | . Types . The errors from this module have a type property which allows for the programmatic determination of the type of error returned. . encoding.unsupported . This error will occur when the encoding option is specified, but the value does not map to an encoding supported by the iconv-lite module. . entity.too.large . This error will occur when the limit option is specified, but the stream has an entity that is larger. . request.aborted . This error will occur when the request stream is aborted by the client before reading the body has finished. . request.size.invalid . This error will occur when the length option is specified, but the stream has emitted more bytes. . stream.encoding.set . This error will occur when the given stream has an encoding set on it, making it a decoded stream. The stream should not have an encoding set and is expected to emit Buffer objects. . stream.not.readable . This error will occur when the given stream is not readable. . Examples . Simple Express example . var contentType = require(&#39;content-type&#39;) var express = require(&#39;express&#39;) var getRawBody = require(&#39;raw-body&#39;) var app = express() app.use(function (req, res, next) { getRawBody(req, { length: req.headers[&#39;content-length&#39;], limit: &#39;1mb&#39;, encoding: contentType.parse(req).parameters.charset }, function (err, string) { if (err) return next(err) req.text = string next() }) }) // now access req.text . Simple Koa example . var contentType = require(&#39;content-type&#39;) var getRawBody = require(&#39;raw-body&#39;) var koa = require(&#39;koa&#39;) var app = koa() app.use(function * (next) { this.text = yield getRawBody(this.req, { length: this.req.headers[&#39;content-length&#39;], limit: &#39;1mb&#39;, encoding: contentType.parse(this.req).parameters.charset }) yield next }) // now access this.text . Using as a promise . To use this library as a promise, simply omit the callback and a promise is returned, provided that a global Promise is defined. . var getRawBody = require(&#39;raw-body&#39;) var http = require(&#39;http&#39;) var server = http.createServer(function (req, res) { getRawBody(req) .then(function (buf) { res.statusCode = 200 res.end(buf.length + &#39; bytes submitted&#39;) }) .catch(function (err) { res.statusCode = 500 res.end(err.message) }) }) server.listen(3000) . Using with TypeScript . import * as getRawBody from &#39;raw-body&#39;; import * as http from &#39;http&#39;; const server = http.createServer((req, res) =&gt; { getRawBody(req) .then((buf) =&gt; { res.statusCode = 200; res.end(buf.length + &#39; bytes submitted&#39;); }) .catch((err) =&gt; { res.statusCode = err.statusCode; res.end(err.message); }); }); server.listen(3000); . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/raw-body/",
          "relUrl": "/node_backend_Trystan/node_modules/raw-body/",
          "date": ""
      }
      
  

  
      ,"page171": {
          "title": "safe-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![downloads][downloads-image]][downloads-url] [![javascript style guide][standard-image]][standard-url]",
          "content": "safe-buffer . Safer Node.js Buffer API . Use the new Node.js Buffer APIs (Buffer.from, Buffer.alloc, Buffer.allocUnsafe, Buffer.allocUnsafeSlow) in all versions of Node.js. . Uses the built-in implementation when available. . install . npm install safe-buffer . usage . The goal of this package is to provide a safe replacement for the node.js Buffer. . It’s a drop-in replacement for Buffer. You can use it by adding one require line to the top of your node.js modules: . var Buffer = require(&#39;safe-buffer&#39;).Buffer // Existing buffer code will continue to work without issues: new Buffer(&#39;hey&#39;, &#39;utf8&#39;) new Buffer([1, 2, 3], &#39;utf8&#39;) new Buffer(obj) new Buffer(16) // create an uninitialized buffer (potentially unsafe) // But you can use these new explicit APIs to make clear what you want: Buffer.from(&#39;hey&#39;, &#39;utf8&#39;) // convert from many types to a Buffer Buffer.alloc(16) // create a zero-filled buffer (safe) Buffer.allocUnsafe(16) // create an uninitialized buffer (potentially unsafe) . api . Class Method: Buffer.from(array) . array {Array} | . Allocates a new Buffer using an array of octets. . const buf = Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]); // creates a new Buffer containing ASCII bytes // [&#39;b&#39;,&#39;u&#39;,&#39;f&#39;,&#39;f&#39;,&#39;e&#39;,&#39;r&#39;] . A TypeError will be thrown if array is not an Array. . Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]]) . arrayBuffer {ArrayBuffer} The .buffer property of a TypedArray or a new ArrayBuffer() | byteOffset {Number} Default: 0 | length {Number} Default: arrayBuffer.length - byteOffset | . When passed a reference to the .buffer property of a TypedArray instance, the newly created Buffer will share the same allocated memory as the TypedArray. . const arr = new Uint16Array(2); arr[0] = 5000; arr[1] = 4000; const buf = Buffer.from(arr.buffer); // shares the memory with arr; console.log(buf); // Prints: &lt;Buffer 88 13 a0 0f&gt; // changing the TypedArray changes the Buffer also arr[1] = 6000; console.log(buf); // Prints: &lt;Buffer 88 13 70 17&gt; . The optional byteOffset and length arguments specify a memory range within the arrayBuffer that will be shared by the Buffer. . const ab = new ArrayBuffer(10); const buf = Buffer.from(ab, 0, 2); console.log(buf.length); // Prints: 2 . A TypeError will be thrown if arrayBuffer is not an ArrayBuffer. . Class Method: Buffer.from(buffer) . buffer {Buffer} | . Copies the passed buffer data onto a new Buffer instance. . const buf1 = Buffer.from(&#39;buffer&#39;); const buf2 = Buffer.from(buf1); buf1[0] = 0x61; console.log(buf1.toString()); // &#39;auffer&#39; console.log(buf2.toString()); // &#39;buffer&#39; (copy is not changed) . A TypeError will be thrown if buffer is not a Buffer. . Class Method: Buffer.from(str[, encoding]) . str {String} String to encode. | encoding {String} Encoding to use, Default: &#39;utf8&#39; | . Creates a new Buffer containing the given JavaScript string str. If provided, the encoding parameter identifies the character encoding. If not provided, encoding defaults to &#39;utf8&#39;. . const buf1 = Buffer.from(&#39;this is a tést&#39;); console.log(buf1.toString()); // prints: this is a tést console.log(buf1.toString(&#39;ascii&#39;)); // prints: this is a tC)st const buf2 = Buffer.from(&#39;7468697320697320612074c3a97374&#39;, &#39;hex&#39;); console.log(buf2.toString()); // prints: this is a tést . A TypeError will be thrown if str is not a string. . Class Method: Buffer.alloc(size[, fill[, encoding]]) . size {Number} | fill {Value} Default: undefined | encoding {String} Default: utf8 | . Allocates a new Buffer of size bytes. If fill is undefined, the Buffer will be zero-filled. . const buf = Buffer.alloc(5); console.log(buf); // &lt;Buffer 00 00 00 00 00&gt; . The size must be less than or equal to the value of require(&#39;buffer&#39;).kMaxLength (on 64-bit architectures, kMaxLength is (2^31)-1). Otherwise, a [RangeError][] is thrown. A zero-length Buffer will be created if a size less than or equal to 0 is specified. . If fill is specified, the allocated Buffer will be initialized by calling buf.fill(fill). See [buf.fill()][] for more information. . const buf = Buffer.alloc(5, &#39;a&#39;); console.log(buf); // &lt;Buffer 61 61 61 61 61&gt; . If both fill and encoding are specified, the allocated Buffer will be initialized by calling buf.fill(fill, encoding). For example: . const buf = Buffer.alloc(11, &#39;aGVsbG8gd29ybGQ=&#39;, &#39;base64&#39;); console.log(buf); // &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt; . Calling Buffer.alloc(size) can be significantly slower than the alternative Buffer.allocUnsafe(size) but ensures that the newly created Buffer instance contents will never contain sensitive data. . A TypeError will be thrown if size is not a number. . Class Method: Buffer.allocUnsafe(size) . size {Number} | . Allocates a new non-zero-filled Buffer of size bytes. The size must be less than or equal to the value of require(&#39;buffer&#39;).kMaxLength (on 64-bit architectures, kMaxLength is (2^31)-1). Otherwise, a [RangeError][] is thrown. A zero-length Buffer will be created if a size less than or equal to 0 is specified. . The underlying memory for Buffer instances created in this way is not initialized. The contents of the newly created Buffer are unknown and may contain sensitive data. Use [buf.fill(0)][] to initialize such Buffer instances to zeroes. . const buf = Buffer.allocUnsafe(5); console.log(buf); // &lt;Buffer 78 e0 82 02 01&gt; // (octets will be different, every time) buf.fill(0); console.log(buf); // &lt;Buffer 00 00 00 00 00&gt; . A TypeError will be thrown if size is not a number. . Note that the Buffer module pre-allocates an internal Buffer instance of size Buffer.poolSize that is used as a pool for the fast allocation of new Buffer instances created using Buffer.allocUnsafe(size) (and the deprecated new Buffer(size) constructor) only when size is less than or equal to Buffer.poolSize &gt;&gt; 1 (floor of Buffer.poolSize divided by two). The default value of Buffer.poolSize is 8192 but can be modified. . Use of this pre-allocated internal memory pool is a key difference between calling Buffer.alloc(size, fill) vs. Buffer.allocUnsafe(size).fill(fill). Specifically, Buffer.alloc(size, fill) will never use the internal Buffer pool, while Buffer.allocUnsafe(size).fill(fill) will use the internal Buffer pool if size is less than or equal to half Buffer.poolSize. The difference is subtle but can be important when an application requires the additional performance that Buffer.allocUnsafe(size) provides. . Class Method: Buffer.allocUnsafeSlow(size) . size {Number} | . Allocates a new non-zero-filled and non-pooled Buffer of size bytes. The size must be less than or equal to the value of require(&#39;buffer&#39;).kMaxLength (on 64-bit architectures, kMaxLength is (2^31)-1). Otherwise, a [RangeError][] is thrown. A zero-length Buffer will be created if a size less than or equal to 0 is specified. . The underlying memory for Buffer instances created in this way is not initialized. The contents of the newly created Buffer are unknown and may contain sensitive data. Use [buf.fill(0)][] to initialize such Buffer instances to zeroes. . When using Buffer.allocUnsafe() to allocate new Buffer instances, allocations under 4KB are, by default, sliced from a single pre-allocated Buffer. This allows applications to avoid the garbage collection overhead of creating many individually allocated Buffers. This approach improves both performance and memory usage by eliminating the need to track and cleanup as many Persistent objects. . However, in the case where a developer may need to retain a small chunk of memory from a pool for an indeterminate amount of time, it may be appropriate to create an un-pooled Buffer instance using Buffer.allocUnsafeSlow() then copy out the relevant bits. . // need to keep around a few small chunks of memory const store = []; socket.on(&#39;readable&#39;, () =&gt; { const data = socket.read(); // allocate for retained data const sb = Buffer.allocUnsafeSlow(10); // copy the data into the new allocation data.copy(sb, 0, 0, 10); store.push(sb); }); . Use of Buffer.allocUnsafeSlow() should be used only as a last resort after a developer has observed undue memory retention in their applications. . A TypeError will be thrown if size is not a number. . All the Rest . The rest of the Buffer API is exactly the same as in node.js. See the docs. . Related links . Node.js issue: Buffer(number) is unsafe | Node.js Enhancement Proposal: Buffer.from/Buffer.alloc/Buffer.zalloc/Buffer() soft-deprecate | . Why is Buffer unsafe? . Today, the node.js Buffer constructor is overloaded to handle many different argument types like String, Array, Object, TypedArrayView (Uint8Array, etc.), ArrayBuffer, and also Number. . The API is optimized for convenience: you can throw any type at it, and it will try to do what you want. . Because the Buffer constructor is so powerful, you often see code like this: . // Convert UTF-8 strings to hex function toHex (str) { return new Buffer(str).toString(&#39;hex&#39;) } . But what happens if toHex is called with a Number argument? . Remote Memory Disclosure . If an attacker can make your program call the Buffer constructor with a Number argument, then they can make it allocate uninitialized memory from the node.js process. This could potentially disclose TLS private keys, user data, or database passwords. . When the Buffer constructor is passed a Number argument, it returns an UNINITIALIZED block of memory of the specified size. When you create a Buffer like this, you MUST overwrite the contents before returning it to the user. . From the node.js docs: . new Buffer(size) . size Number | . The underlying memory for Buffer instances created in this way is not initialized. The contents of a newly created Buffer are unknown and could contain sensitive data. Use buf.fill(0) to initialize a Buffer to zeroes. . (Emphasis our own.) . Whenever the programmer intended to create an uninitialized Buffer you often see code like this: . var buf = new Buffer(16) // Immediately overwrite the uninitialized buffer with data from another buffer for (var i = 0; i &lt; buf.length; i++) { buf[i] = otherBuf[i] } . Would this ever be a problem in real code? . Yes. It’s surprisingly common to forget to check the type of your variables in a dynamically-typed language like JavaScript. . Usually the consequences of assuming the wrong type is that your program crashes with an uncaught exception. But the failure mode for forgetting to check the type of arguments to the Buffer constructor is more catastrophic. . Here’s an example of a vulnerable service that takes a JSON payload and converts it to hex: . // Take a JSON payload {str: &quot;some string&quot;} and convert it to hex var server = http.createServer(function (req, res) { var data = &#39;&#39; req.setEncoding(&#39;utf8&#39;) req.on(&#39;data&#39;, function (chunk) { data += chunk }) req.on(&#39;end&#39;, function () { var body = JSON.parse(data) res.end(new Buffer(body.str).toString(&#39;hex&#39;)) }) }) server.listen(8080) . In this example, an http client just has to send: . { &quot;str&quot;: 1000 } . and it will get back 1,000 bytes of uninitialized memory from the server. . This is a very serious bug. It’s similar in severity to the the Heartbleed bug that allowed disclosure of OpenSSL process memory by remote attackers. . Which real-world packages were vulnerable? . bittorrent-dht . Mathias Buus and I (Feross Aboukhadijeh) found this issue in one of our own packages, bittorrent-dht. The bug would allow anyone on the internet to send a series of messages to a user of bittorrent-dht and get them to reveal 20 bytes at a time of uninitialized memory from the node.js process. . Here’s the commit that fixed it. We released a new fixed version, created a Node Security Project disclosure, and deprecated all vulnerable versions on npm so users will get a warning to upgrade to a newer version. . ws . That got us wondering if there were other vulnerable packages. Sure enough, within a short period of time, we found the same issue in ws, the most popular WebSocket implementation in node.js. . If certain APIs were called with Number parameters instead of String or Buffer as expected, then uninitialized server memory would be disclosed to the remote peer. . These were the vulnerable methods: . socket.send(number) socket.ping(number) socket.pong(number) . Here’s a vulnerable socket server with some echo functionality: . server.on(&#39;connection&#39;, function (socket) { socket.on(&#39;message&#39;, function (message) { message = JSON.parse(message) if (message.type === &#39;echo&#39;) { socket.send(message.data) // send back the user&#39;s message } }) }) . socket.send(number) called on the server, will disclose server memory. . Here’s the release where the issue was fixed, with a more detailed explanation. Props to Arnout Kazemier for the quick fix. Here’s the Node Security Project disclosure. . What’s the solution? . It’s important that node.js offers a fast way to get memory otherwise performance-critical applications would needlessly get a lot slower. . But we need a better way to signal our intent as programmers. When we want uninitialized memory, we should request it explicitly. . Sensitive functionality should not be packed into a developer-friendly API that loosely accepts many different types. This type of API encourages the lazy practice of passing variables in without checking the type very carefully. . A new API: Buffer.allocUnsafe(number) . The functionality of creating buffers with uninitialized memory should be part of another API. We propose Buffer.allocUnsafe(number). This way, it’s not part of an API that frequently gets user input of all sorts of different types passed into it. . var buf = Buffer.allocUnsafe(16) // careful, uninitialized memory! // Immediately overwrite the uninitialized buffer with data from another buffer for (var i = 0; i &lt; buf.length; i++) { buf[i] = otherBuf[i] } . How do we fix node.js core? . We sent a PR to node.js core (merged as semver-major) which defends against one case: . var str = 16 new Buffer(str, &#39;utf8&#39;) . In this situation, it’s implied that the programmer intended the first argument to be a string, since they passed an encoding as a second argument. Today, node.js will allocate uninitialized memory in the case of new Buffer(number, encoding), which is probably not what the programmer intended. . But this is only a partial solution, since if the programmer does new Buffer(variable) (without an encoding parameter) there’s no way to know what they intended. If variable is sometimes a number, then uninitialized memory will sometimes be returned. . What’s the real long-term fix? . We could deprecate and remove new Buffer(number) and use Buffer.allocUnsafe(number) when we need uninitialized memory. But that would break 1000s of packages. . We believe the best solution is to: . 1. Change new Buffer(number) to return safe, zeroed-out memory . 2. Create a new API for creating uninitialized Buffers. We propose: Buffer.allocUnsafe(number) . Update . We now support adding three new APIs: . Buffer.from(value) - convert from any type to a buffer | Buffer.alloc(size) - create a zero-filled buffer | Buffer.allocUnsafe(size) - create an uninitialized buffer with given size | . This solves the core problem that affected ws and bittorrent-dht which is Buffer(variable) getting tricked into taking a number argument. . This way, existing code continues working and the impact on the npm ecosystem will be minimal. Over time, npm maintainers can migrate performance-critical code to use Buffer.allocUnsafe(number) instead of new Buffer(number). . Conclusion . We think there’s a serious design issue with the Buffer API as it exists today. It promotes insecure software by putting high-risk functionality into a convenient API with friendly “developer ergonomics”. . This wasn’t merely a theoretical exercise because we found the issue in some of the most popular npm packages. . Fortunately, there’s an easy fix that can be applied today. Use safe-buffer in place of buffer. . var Buffer = require(&#39;safe-buffer&#39;).Buffer . Eventually, we hope that node.js core can switch to this new, safer behavior. We believe the impact on the ecosystem would be minimal since it’s not a breaking change. Well-maintained, popular packages would be updated to use Buffer.alloc quickly, while older, insecure packages would magically become safe from this attack vector. . links . Node.js PR: buffer: throw if both length and enc are passed | Node Security Project disclosure for ws | Node Security Project disclosure forbittorrent-dht | . credit . The original issues in bittorrent-dht (disclosure) and ws (disclosure) were discovered by Mathias Buus and Feross Aboukhadijeh. . Thanks to Adam Baldwin for helping disclose these issues and for his work running the Node Security Project. . Thanks to John Hiesey for proofreading this README and auditing the code. . license . MIT. Copyright (C) Feross Aboukhadijeh .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/safe-buffer/",
          "relUrl": "/node_backend_Trystan/node_modules/safe-buffer/",
          "date": ""
      }
      
  

  
      ,"page172": {
          "title": "safer-buffer [![travis][travis-image]][travis-url] [![npm][npm-image]][npm-url] [![javascript style guide][standard-image]][standard-url] [![Security Responsible Disclosure][secuirty-image]][secuirty-url]",
          "content": "safer-buffer . Modern Buffer API polyfill without footguns, working on Node.js from 0.8 to current. . How to use? . First, port all Buffer() and new Buffer() calls to Buffer.alloc() and Buffer.from() API. . Then, to achieve compatibility with outdated Node.js versions (&lt;4.5.0 and 5.x &lt;5.9.0), use const Buffer = require(&#39;safer-buffer&#39;).Buffer in all files where you make calls to the new Buffer API. Use var instead of const if you need that for your Node.js version range support. . Also, see the porting Buffer guide. . Do I need it? . Hopefully, not — dropping support for outdated Node.js versions should be fine nowdays, and that is the recommended path forward. You do need to port to the Buffer.alloc() and Buffer.from() though. . See the porting guide for a better description. . Why not safe-buffer? . In short: while safe-buffer serves as a polyfill for the new API, it allows old API usage and itself contains footguns. . safe-buffer could be used safely to get the new API while still keeping support for older Node.js versions (like this module), but while analyzing ecosystem usage of the old Buffer API I found out that safe-buffer is itself causing problems in some cases. . For example, consider the following snippet: . $ cat example.unsafe.js console.log(Buffer(20)) $ ./node-v6.13.0-linux-x64/bin/node example.unsafe.js &lt;Buffer 0a 00 00 00 00 00 00 00 28 13 de 02 00 00 00 00 05 00 00 00&gt; $ standard example.unsafe.js standard: Use JavaScript Standard Style (https://standardjs.com) /home/chalker/repo/safer-buffer/example.unsafe.js:2:13: &#39;Buffer()&#39; was deprecated since v6. Use &#39;Buffer.alloc()&#39; or &#39;Buffer.from()&#39; (use &#39;https://www.npmjs.com/package/safe-buffer&#39; for &#39;&lt;4.5.0&#39;) instead. . This is allocates and writes to console an uninitialized chunk of memory. standard linter (among others) catch that and warn people to avoid using unsafe API. . Let’s now throw in safe-buffer! . $ cat example.safe-buffer.js const Buffer = require(&#39;safe-buffer&#39;).Buffer console.log(Buffer(20)) $ standard example.safe-buffer.js $ ./node-v6.13.0-linux-x64/bin/node example.safe-buffer.js &lt;Buffer 08 00 00 00 00 00 00 00 28 58 01 82 fe 7f 00 00 00 00 00 00&gt; . See the problem? Adding in safe-buffer magically removes the lint warning, but the behavior remains identiсal to what we had before, and when launched on Node.js 6.x LTS — this dumps out chunks of uninitialized memory. And this code will still emit runtime warnings on Node.js 10.x and above. . That was done by design. I first considered changing safe-buffer, prohibiting old API usage or emitting warnings on it, but that significantly diverges from safe-buffer design. After some discussion, it was decided to move my approach into a separate package, and this is that separate package. . This footgun is not imaginary — I observed top-downloaded packages doing that kind of thing, «fixing» the lint warning by blindly including safe-buffer without any actual changes. . Also in some cases, even if the API was migrated to use of safe Buffer API — a random pull request can bring unsafe Buffer API usage back to the codebase by adding new calls — and that could go unnoticed even if you have a linter prohibiting that (becase of the reason stated above), and even pass CI. I also observed that being done in popular packages. . Some examples: . webdriverio (a module with 548 759 downloads/month), | websocket-stream (218 288 d/m, fix in maxogden/websocket-stream#142), | node-serialport (113 138 d/m, fix in node-serialport/node-serialport#1510), | karma (3 973 193 d/m, fix in karma-runner/karma#2947), | spdy-transport (5 970 727 d/m, fix in spdy-http2/spdy-transport#53). | And there are a lot more over the ecosystem. | . I filed a PR at mysticatea/eslint-plugin-node#110 to partially fix that (for cases when that lint rule is used), but it is a semver-major change for linter rules and presets, so it would take significant time for that to reach actual setups. It also hasn’t been released yet (2018-03-20). . Also, safer-buffer discourages the usage of .allocUnsafe(), which is often done by a mistake. It still supports it with an explicit concern barier, by placing it under require(&#39;safer-buffer/dangereous&#39;). . But isn’t throwing bad? . Not really. It’s an error that could be noticed and fixed early, instead of causing havoc later like unguarded new Buffer() calls that end up receiving user input can do. . This package affects only the files where var Buffer = require(&#39;safer-buffer&#39;).Buffer was done, so it is really simple to keep track of things and make sure that you don’t mix old API usage with that. Also, CI should hint anything that you might have missed. . New commits, if tested, won’t land new usage of unsafe Buffer API this way. Node.js 10.x also deals with that by printing a runtime depecation warning. . Would it affect third-party modules? . No, unless you explicitly do an awful thing like monkey-patching or overriding the built-in Buffer. Don’t do that. . But I don’t want throwing… . That is also fine! . Also, it could be better in some cases when you don’t comprehensive enough test coverage. . In that case — just don’t override Buffer and use var SaferBuffer = require(&#39;safer-buffer&#39;).Buffer instead. . That way, everything using Buffer natively would still work, but there would be two drawbacks: . Buffer.from/Buffer.alloc won’t be polyfilled — use SaferBuffer.from and SaferBuffer.alloc instead. | You are still open to accidentally using the insecure deprecated API — use a linter to catch that. | . Note that using a linter to catch accidential Buffer constructor usage in this case is strongly recommended. Buffer is not overriden in this usecase, so linters won’t get confused. . «Without footguns»? . Well, it is still possible to do some things with Buffer API, e.g. accessing .buffer property on older versions and duping things from there. You shouldn’t do that in your code, probabably. . The intention is to remove the most significant footguns that affect lots of packages in the ecosystem, and to do it in the proper way. . Also, this package doesn’t protect against security issues affecting some Node.js versions, so for usage in your own production code, it is still recommended to update to a Node.js version supported by upstream. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/safer-buffer/",
          "relUrl": "/node_backend_Trystan/node_modules/safer-buffer/",
          "date": ""
      }
      
  

  
      ,"page173": {
          "title": "send",
          "content": "send . . Send is a library for streaming files from the file system as a http response supporting partial responses (Ranges), conditional-GET negotiation (If-Match, If-Unmodified-Since, If-None-Match, If-Modified-Since), high test coverage, and granular events which may be leveraged to take appropriate actions in your application or framework. . Looking to serve up entire folders mapped to URLs? Try serve-static. . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install send . API . var send = require(&#39;send&#39;) . send(req, path, [options]) . Create a new SendStream for the given path to send to a res. The req is the Node.js HTTP request and the path is a urlencoded path to send (urlencoded, not the actual file-system path). . Options . acceptRanges . Enable or disable accepting ranged requests, defaults to true. Disabling this will not send Accept-Ranges and ignore the contents of the Range request header. . cacheControl . Enable or disable setting Cache-Control response header, defaults to true. Disabling this will ignore the immutable and maxAge options. . dotfiles . Set how “dotfiles” are treated when encountered. A dotfile is a file or directory that begins with a dot (“.”). Note this check is done on the path itself without checking if the path actually exists on the disk. If root is specified, only the dotfiles above the root are checked (i.e. the root itself can be within a dotfile when when set to “deny”). . &#39;allow&#39; No special treatment for dotfiles. | &#39;deny&#39; Send a 403 for any request for a dotfile. | &#39;ignore&#39; Pretend like the dotfile does not exist and 404. | . The default value is similar to &#39;ignore&#39;, with the exception that this default will not ignore the files within a directory that begins with a dot, for backward-compatibility. . end . Byte offset at which the stream ends, defaults to the length of the file minus 1. The end is inclusive in the stream, meaning end: 3 will include the 4th byte in the stream. . etag . Enable or disable etag generation, defaults to true. . extensions . If a given file doesn’t exist, try appending one of the given extensions, in the given order. By default, this is disabled (set to false). An example value that will serve extension-less HTML files: [&#39;html&#39;, &#39;htm&#39;]. This is skipped if the requested file already has an extension. . immutable . Enable or disable the immutable directive in the Cache-Control response header, defaults to false. If set to true, the maxAge option should also be specified to enable caching. The immutable directive will prevent supported clients from making conditional requests during the life of the maxAge option to check if the file has changed. . index . By default send supports “index.html” files, to disable this set false or to supply a new index pass a string or an array in preferred order. . lastModified . Enable or disable Last-Modified header, defaults to true. Uses the file system’s last modified value. . maxAge . Provide a max-age in milliseconds for http caching, defaults to 0. This can also be a string accepted by the ms module. . root . Serve files relative to path. . start . Byte offset at which the stream starts, defaults to 0. The start is inclusive, meaning start: 2 will include the 3rd byte in the stream. . Events . The SendStream is an event emitter and will emit the following events: . error an error occurred (err) | directory a directory was requested (res, path) | file a file was requested (path, stat) | headers the headers are about to be set on a file (res, path, stat) | stream file streaming has started (stream) | end streaming has completed | . .pipe . The pipe method is used to pipe the response into the Node.js HTTP response object, typically send(req, path, options).pipe(res). . .mime . The mime export is the global instance of of the mime npm module. . This is used to configure the MIME types that are associated with file extensions as well as other options for how to resolve the MIME type of a file (like the default type to use for an unknown file extension). . Error-handling . By default when no error listeners are present an automatic response will be made, otherwise you have full control over the response, aka you may show a 5xx page etc. . Caching . It does not perform internal caching, you should use a reverse proxy cache such as Varnish for this, or those fancy things called CDNs. If your application is small enough that it would benefit from single-node memory caching, it’s small enough that it does not need caching at all ;). . Debugging . To enable debug() instrumentation output export DEBUG: . $ DEBUG=send node app . Running tests . $ npm install $ npm test . Examples . Serve a specific file . This simple example will send a specific file to all requests. . var http = require(&#39;http&#39;) var send = require(&#39;send&#39;) var server = http.createServer(function onRequest (req, res) { send(req, &#39;/path/to/index.html&#39;) .pipe(res) }) server.listen(3000) . Serve all files from a directory . This simple example will just serve up all the files in a given directory as the top-level. For example, a request GET /foo.txt will send back /www/public/foo.txt. . var http = require(&#39;http&#39;) var parseUrl = require(&#39;parseurl&#39;) var send = require(&#39;send&#39;) var server = http.createServer(function onRequest (req, res) { send(req, parseUrl(req).pathname, { root: &#39;/www/public&#39; }) .pipe(res) }) server.listen(3000) . Custom file types . var http = require(&#39;http&#39;) var parseUrl = require(&#39;parseurl&#39;) var send = require(&#39;send&#39;) // Default unknown types to text/plain send.mime.default_type = &#39;text/plain&#39; // Add a custom type send.mime.define({ &#39;application/x-my-type&#39;: [&#39;x-mt&#39;, &#39;x-mtt&#39;] }) var server = http.createServer(function onRequest (req, res) { send(req, parseUrl(req).pathname, { root: &#39;/www/public&#39; }) .pipe(res) }) server.listen(3000) . Custom directory index view . This is a example of serving up a structure of directories with a custom function to render a listing of a directory. . var http = require(&#39;http&#39;) var fs = require(&#39;fs&#39;) var parseUrl = require(&#39;parseurl&#39;) var send = require(&#39;send&#39;) // Transfer arbitrary files from within /www/example.com/public/* // with a custom handler for directory listing var server = http.createServer(function onRequest (req, res) { send(req, parseUrl(req).pathname, { index: false, root: &#39;/www/public&#39; }) .once(&#39;directory&#39;, directory) .pipe(res) }) server.listen(3000) // Custom directory handler function directory (res, path) { var stream = this // redirect to trailing slash for consistent url if (!stream.hasTrailingSlash()) { return stream.redirect(path) } // get directory list fs.readdir(path, function onReaddir (err, list) { if (err) return stream.error(err) // render an index for the directory res.setHeader(&#39;Content-Type&#39;, &#39;text/plain; charset=UTF-8&#39;) res.end(list.join(&#39; n&#39;) + &#39; n&#39;) }) } . Serving from a root directory with custom error-handling . var http = require(&#39;http&#39;) var parseUrl = require(&#39;parseurl&#39;) var send = require(&#39;send&#39;) var server = http.createServer(function onRequest (req, res) { // your custom error-handling logic: function error (err) { res.statusCode = err.status || 500 res.end(err.message) } // your custom headers function headers (res, path, stat) { // serve all files for download res.setHeader(&#39;Content-Disposition&#39;, &#39;attachment&#39;) } // your custom directory handling logic: function redirect () { res.statusCode = 301 res.setHeader(&#39;Location&#39;, req.url + &#39;/&#39;) res.end(&#39;Redirecting to &#39; + req.url + &#39;/&#39;) } // transfer arbitrary files from within // /www/example.com/public/* send(req, parseUrl(req).pathname, { root: &#39;/www/public&#39; }) .on(&#39;error&#39;, error) .on(&#39;directory&#39;, redirect) .on(&#39;headers&#39;, headers) .pipe(res) }) server.listen(3000) . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/send/",
          "relUrl": "/node_backend_Trystan/node_modules/send/",
          "date": ""
      }
      
  

  
      ,"page174": {
          "title": "debug",
          "content": "debug . . A tiny node.js debugging utility modelled after node core’s debugging technique. . Discussion around the V3 API is under way here . Installation . $ npm install debug . Usage . debug exposes a function; simply pass this function the name of your module, and it will return a decorated version of console.error for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole. . Example app.js: . var debug = require(&#39;debug&#39;)(&#39;http&#39;) , http = require(&#39;http&#39;) , name = &#39;My App&#39;; // fake app debug(&#39;booting %s&#39;, name); http.createServer(function(req, res){ debug(req.method + &#39; &#39; + req.url); res.end(&#39;hello n&#39;); }).listen(3000, function(){ debug(&#39;listening&#39;); }); // fake worker of some kind require(&#39;./worker&#39;); . Example worker.js: . var debug = require(&#39;debug&#39;)(&#39;worker&#39;); setInterval(function(){ debug(&#39;doing some work&#39;); }, 1000); . The DEBUG environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: . . . Windows note . On Windows the environment variable is set using the set command. . set DEBUG=*,-not_this . Note that PowerShell uses different syntax to set environment variables. . $env:DEBUG = &quot;*,-not_this&quot; . Then, run the program to be debugged as usual. . Millisecond diff . When actively developing an application it can be useful to see when the time spent between one debug() call and the next. Suppose for example you invoke debug() before requesting a resource, and after as well, the “+NNNms” will show you how much time was spent between calls. . . When stdout is not a TTY, Date#toUTCString() is used, making it more useful for logging the debug information as shown below: . . Conventions . If you’re using this in one or more of your libraries, you should use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you should prefix them with your library name and use “:” to separate features. For example “bodyParser” from Connect would then be “connect:bodyParser”. . Wildcards . The * character may be used as a wildcard. Suppose for example your library has debuggers named “connect:bodyParser”, “connect:compress”, “connect:session”, instead of listing all three with DEBUG=connect:bodyParser,connect:compress,connect:session, you may simply do DEBUG=connect:*, or to run everything using this module simply use DEBUG=*. . You can also exclude specific debuggers by prefixing them with a “-“ character. For example, DEBUG=*,-connect:* would include all debuggers except those starting with “connect:”. . Environment Variables . When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging: . Name Purpose . DEBUG | Enables/disables specific debugging namespaces. | . DEBUG_COLORS | Whether or not to use colors in the debug output. | . DEBUG_DEPTH | Object inspection depth. | . DEBUG_SHOW_HIDDEN | Shows hidden properties on inspected objects. | . Note: The environment variables beginning with DEBUG_ end up being converted into an Options object that gets used with %o/%O formatters. See the Node.js documentation for util.inspect() for the complete list. . Formatters . Debug uses printf-style formatting. Below are the officially supported formatters: . Formatter Representation . %O | Pretty-print an Object on multiple lines. | . %o | Pretty-print an Object all on a single line. | . %s | String. | . %d | Number (both integer and float). | . %j | JSON. Replaced with the string ‘[Circular]’ if the argument contains circular references. | . %% | Single percent sign (‘%’). This does not consume an argument. | . Custom formatters . You can add custom formatters by extending the debug.formatters object. For example, if you wanted to add support for rendering a Buffer as hex with %h, you could do something like: . const createDebug = require(&#39;debug&#39;) createDebug.formatters.h = (v) =&gt; { return v.toString(&#39;hex&#39;) } // …elsewhere const debug = createDebug(&#39;foo&#39;) debug(&#39;this is hex: %h&#39;, new Buffer(&#39;hello world&#39;)) // foo this is hex: 68656c6c6f20776f726c6421 +0ms . Browser support . You can build a browser-ready script using browserify, or just use the browserify-as-a-service build, if you don’t want to build it yourself. . Debug’s enable state is currently persisted by localStorage. Consider the situation shown below where you have worker:a and worker:b, and wish to debug both. You can enable this using localStorage.debug: . localStorage.debug = &#39;worker:*&#39; . And then refresh the page. . a = debug(&#39;worker:a&#39;); b = debug(&#39;worker:b&#39;); setInterval(function(){ a(&#39;doing some work&#39;); }, 1000); setInterval(function(){ b(&#39;doing some work&#39;); }, 1200); . Web Inspector Colors . Colors are also enabled on “Web Inspectors” that understand the %c formatting option. These are WebKit web inspectors, Firefox (since version 31) and the Firebug plugin for Firefox (any version). . Colored output looks something like: . . Output streams . By default debug will log to stderr, however this can be configured per-namespace by overriding the log method: . Example stdout.js: . var debug = require(&#39;debug&#39;); var error = debug(&#39;app:error&#39;); // by default stderr is used error(&#39;goes to stderr!&#39;); var log = debug(&#39;app:log&#39;); // set this namespace to log via console.log log.log = console.log.bind(console); // don&#39;t forget to bind to console! log(&#39;goes to stdout&#39;); error(&#39;still goes to stderr!&#39;); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error(&#39;now goes to stdout via console.info&#39;); log(&#39;still goes to stdout, but via console.info now&#39;); . Authors . TJ Holowaychuk | Nathan Rajlich | Andrew Rhyne | . Backers . Support us with a monthly donation and help us continue our activities. [Become a backer] . . Sponsors . Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] . . License . (The MIT License) . Copyright (c) 2014-2016 TJ Holowaychuk &lt;tj@vision-media.ca&gt; . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. . THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/send/node_modules/debug/",
          "relUrl": "/node_backend_Trystan/node_modules/send/node_modules/debug/",
          "date": ""
      }
      
  

  
      ,"page175": {
          "title": "ms",
          "content": "ms . . Use this package to easily convert various time formats to milliseconds. . Examples . ms(&#39;2 days&#39;) // 172800000 ms(&#39;1d&#39;) // 86400000 ms(&#39;10h&#39;) // 36000000 ms(&#39;2.5 hrs&#39;) // 9000000 ms(&#39;2h&#39;) // 7200000 ms(&#39;1m&#39;) // 60000 ms(&#39;5s&#39;) // 5000 ms(&#39;1y&#39;) // 31557600000 ms(&#39;100&#39;) // 100 . Convert from milliseconds . ms(60000) // &quot;1m&quot; ms(2 * 60000) // &quot;2m&quot; ms(ms(&#39;10 hours&#39;)) // &quot;10h&quot; . Time format written-out . ms(60000, { long: true }) // &quot;1 minute&quot; ms(2 * 60000, { long: true }) // &quot;2 minutes&quot; ms(ms(&#39;10 hours&#39;), { long: true }) // &quot;10 hours&quot; . Features . Works both in node and in the browser. | If a number is supplied to ms, a string with a unit is returned. | If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for &#39;100&#39;). | If you pass a string with a number and a valid unit, the number of equivalent ms is returned. | . Caught a bug? . Fork this repository to your own GitHub account and then clone it to your local device | Link the package to the global module directory: npm link | Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms. Instead of the default one from npm, node will now use your clone of ms! | As always, you can run the tests using: npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/send/node_modules/debug/node_modules/ms/",
          "relUrl": "/node_backend_Trystan/node_modules/send/node_modules/debug/node_modules/ms/",
          "date": ""
      }
      
  

  
      ,"page176": {
          "title": "ms",
          "content": "ms . . Use this package to easily convert various time formats to milliseconds. . Examples . ms(&#39;2 days&#39;) // 172800000 ms(&#39;1d&#39;) // 86400000 ms(&#39;10h&#39;) // 36000000 ms(&#39;2.5 hrs&#39;) // 9000000 ms(&#39;2h&#39;) // 7200000 ms(&#39;1m&#39;) // 60000 ms(&#39;5s&#39;) // 5000 ms(&#39;1y&#39;) // 31557600000 ms(&#39;100&#39;) // 100 ms(&#39;-3 days&#39;) // -259200000 ms(&#39;-1h&#39;) // -3600000 ms(&#39;-200&#39;) // -200 . Convert from Milliseconds . ms(60000) // &quot;1m&quot; ms(2 * 60000) // &quot;2m&quot; ms(-3 * 60000) // &quot;-3m&quot; ms(ms(&#39;10 hours&#39;)) // &quot;10h&quot; . Time Format Written-Out . ms(60000, { long: true }) // &quot;1 minute&quot; ms(2 * 60000, { long: true }) // &quot;2 minutes&quot; ms(-3 * 60000, { long: true }) // &quot;-3 minutes&quot; ms(ms(&#39;10 hours&#39;), { long: true }) // &quot;10 hours&quot; . Features . Works both in Node.js and in the browser | If a number is supplied to ms, a string with a unit is returned | If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for &#39;100&#39;) | If you pass a string with a number and a valid unit, the number of equivalent milliseconds is returned | . Related Packages . ms.macro - Run ms as a macro at build-time. | . Caught a Bug? . Fork this repository to your own GitHub account and then clone it to your local device | Link the package to the global module directory: npm link | Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms. Instead of the default one from npm, Node.js will now use your clone of ms! | As always, you can run the tests using: npm test .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/send/node_modules/ms/",
          "relUrl": "/node_backend_Trystan/node_modules/send/node_modules/ms/",
          "date": ""
      }
      
  

  
      ,"page177": {
          "title": "serve-static",
          "content": "serve-static . . Install . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install serve-static . API . var serveStatic = require(&#39;serve-static&#39;) . serveStatic(root, options) . Create a new middleware function to serve files from within a given root directory. The file to serve will be determined by combining req.url with the provided root directory. When a file is not found, instead of sending a 404 response, this module will instead call next() to move on to the next middleware, allowing for stacking and fall-backs. . Options . acceptRanges . Enable or disable accepting ranged requests, defaults to true. Disabling this will not send Accept-Ranges and ignore the contents of the Range request header. . cacheControl . Enable or disable setting Cache-Control response header, defaults to true. Disabling this will ignore the immutable and maxAge options. . dotfiles . Set how “dotfiles” are treated when encountered. A dotfile is a file or directory that begins with a dot (“.”). Note this check is done on the path itself without checking if the path actually exists on the disk. If root is specified, only the dotfiles above the root are checked (i.e. the root itself can be within a dotfile when set to “deny”). . &#39;allow&#39; No special treatment for dotfiles. | &#39;deny&#39; Deny a request for a dotfile and 403/next(). | &#39;ignore&#39; Pretend like the dotfile does not exist and 404/next(). | . The default value is similar to &#39;ignore&#39;, with the exception that this default will not ignore the files within a directory that begins with a dot. . etag . Enable or disable etag generation, defaults to true. . extensions . Set file extension fallbacks. When set, if a file is not found, the given extensions will be added to the file name and search for. The first that exists will be served. Example: [&#39;html&#39;, &#39;htm&#39;]. . The default value is false. . fallthrough . Set the middleware to have client errors fall-through as just unhandled requests, otherwise forward a client error. The difference is that client errors like a bad request or a request to a non-existent file will cause this middleware to simply next() to your next middleware when this value is true. When this value is false, these errors (even 404s), will invoke next(err). . Typically true is desired such that multiple physical directories can be mapped to the same web address or for routes to fill in non-existent files. . The value false can be used if this middleware is mounted at a path that is designed to be strictly a single file system directory, which allows for short-circuiting 404s for less overhead. This middleware will also reply to all methods. . The default value is true. . immutable . Enable or disable the immutable directive in the Cache-Control response header, defaults to false. If set to true, the maxAge option should also be specified to enable caching. The immutable directive will prevent supported clients from making conditional requests during the life of the maxAge option to check if the file has changed. . index . By default this module will send “index.html” files in response to a request on a directory. To disable this set false or to supply a new index pass a string or an array in preferred order. . lastModified . Enable or disable Last-Modified header, defaults to true. Uses the file system’s last modified value. . maxAge . Provide a max-age in milliseconds for http caching, defaults to 0. This can also be a string accepted by the ms module. . redirect . Redirect to trailing “/” when the pathname is a dir. Defaults to true. . setHeaders . Function to set custom headers on response. Alterations to the headers need to occur synchronously. The function is called as fn(res, path, stat), where the arguments are: . res the response object | path the file path that is being sent | stat the stat object of the file that is being sent | . Examples . Serve files with vanilla node.js http server . var finalhandler = require(&#39;finalhandler&#39;) var http = require(&#39;http&#39;) var serveStatic = require(&#39;serve-static&#39;) // Serve up public/ftp folder var serve = serveStatic(&#39;public/ftp&#39;, { index: [&#39;index.html&#39;, &#39;index.htm&#39;] }) // Create server var server = http.createServer(function onRequest (req, res) { serve(req, res, finalhandler(req, res)) }) // Listen server.listen(3000) . Serve all files as downloads . var contentDisposition = require(&#39;content-disposition&#39;) var finalhandler = require(&#39;finalhandler&#39;) var http = require(&#39;http&#39;) var serveStatic = require(&#39;serve-static&#39;) // Serve up public/ftp folder var serve = serveStatic(&#39;public/ftp&#39;, { index: false, setHeaders: setHeaders }) // Set header to force download function setHeaders (res, path) { res.setHeader(&#39;Content-Disposition&#39;, contentDisposition(path)) } // Create server var server = http.createServer(function onRequest (req, res) { serve(req, res, finalhandler(req, res)) }) // Listen server.listen(3000) . Serving using express . Simple . This is a simple example of using Express. . var express = require(&#39;express&#39;) var serveStatic = require(&#39;serve-static&#39;) var app = express() app.use(serveStatic(&#39;public/ftp&#39;, { index: [&#39;default.html&#39;, &#39;default.htm&#39;] })) app.listen(3000) . Multiple roots . This example shows a simple way to search through multiple directories. Files are searched for in public-optimized/ first, then public/ second as a fallback. . var express = require(&#39;express&#39;) var path = require(&#39;path&#39;) var serveStatic = require(&#39;serve-static&#39;) var app = express() app.use(serveStatic(path.join(__dirname, &#39;public-optimized&#39;))) app.use(serveStatic(path.join(__dirname, &#39;public&#39;))) app.listen(3000) . Different settings for paths . This example shows how to set a different max age depending on the served file type. In this example, HTML files are not cached, while everything else is for 1 day. . var express = require(&#39;express&#39;) var path = require(&#39;path&#39;) var serveStatic = require(&#39;serve-static&#39;) var app = express() app.use(serveStatic(path.join(__dirname, &#39;public&#39;), { maxAge: &#39;1d&#39;, setHeaders: setCustomCacheControl })) app.listen(3000) function setCustomCacheControl (res, path) { if (serveStatic.mime.lookup(path) === &#39;text/html&#39;) { // Custom Cache-Control for HTML files res.setHeader(&#39;Cache-Control&#39;, &#39;public, max-age=0&#39;) } } . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/serve-static/",
          "relUrl": "/node_backend_Trystan/node_modules/serve-static/",
          "date": ""
      }
      
  

  
      ,"page178": {
          "title": "set-function-length [![Version Badge][npm-version-svg]][package-url]",
          "content": "set-function-length . . . Set a function’s length. . Arguments: . fn: the function | length: the new length. Must be an integer between 0 and 2**32. | loose: Optional. If true, and the length fails to be set, do not throw. Default false. | . Returns fn. . Usage . var setFunctionLength = require(&#39;set-function-length&#39;); var assert = require(&#39;assert&#39;); function zero() {} function one(_) {} function two(_, __) {} assert.equal(zero.length, 0); assert.equal(one.length, 1); assert.equal(two.length, 2); assert.equal(setFunctionLength(zero, 10), zero); assert.equal(setFunctionLength(one, 11), one); assert.equal(setFunctionLength(two, 12), two); assert.equal(zero.length, 10); assert.equal(one.length, 11); assert.equal(two.length, 12); .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/set-function-length/",
          "relUrl": "/node_backend_Trystan/node_modules/set-function-length/",
          "date": ""
      }
      
  

  
      ,"page179": {
          "title": "Polyfill for Object.setPrototypeOf",
          "content": "Polyfill for Object.setPrototypeOf . . A simple cross platform implementation to set the prototype of an instianted object. Supports all modern browsers and at least back to IE8. . Usage: . $ npm install --save setprototypeof . var setPrototypeOf = require(&#39;setprototypeof&#39;) var obj = {} setPrototypeOf(obj, { foo: function () { return &#39;bar&#39; } }) obj.foo() // bar . TypeScript is also supported: . import setPrototypeOf from &#39;setprototypeof&#39; .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/setprototypeof/",
          "relUrl": "/node_backend_Trystan/node_modules/setprototypeof/",
          "date": ""
      }
      
  

  
      ,"page180": {
          "title": "side-channel",
          "content": "side-channel . Store information about any JS value in a side channel. Uses WeakMap if available. .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/side-channel/",
          "relUrl": "/node_backend_Trystan/node_modules/side-channel/",
          "date": ""
      }
      
  

  
      ,"page181": {
          "title": "socket.io-adapter",
          "content": "socket.io-adapter . Default socket.io in-memory adapter class. . Compatibility table: . Adapter version Socket.IO server version . 1.x.x | 1.x.x / 2.x.x | . 2.x.x | 3.x.x | . How to use . This module is not intended for end-user usage, but can be used as an interface to inherit from other adapters you might want to build. . As an example of an adapter that builds on top of this, please take a look at socket.io-redis. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/socket.io-adapter/",
          "relUrl": "/node_backend_Trystan/node_modules/socket.io-adapter/",
          "date": ""
      }
      
  

  
      ,"page182": {
          "title": "socket.io-parser",
          "content": "socket.io-parser . . A socket.io encoder and decoder written in JavaScript complying with version 5 of socket.io-protocol. Used by socket.io and socket.io-client. . Compatibility table: . Parser version Socket.IO server version Protocol revision . 3.x | 1.x / 2.x | 4 | . 4.x | 3.x | 5 | . Parser API . socket.io-parser is the reference implementation of socket.io-protocol. Read the full API here: socket.io-protocol. . Example Usage . Encoding and decoding a packet . var parser = require(&#39;socket.io-parser&#39;); var encoder = new parser.Encoder(); var packet = { type: parser.EVENT, data: &#39;test-packet&#39;, id: 13 }; encoder.encode(packet, function(encodedPackets) { var decoder = new parser.Decoder(); decoder.on(&#39;decoded&#39;, function(decodedPacket) { // decodedPacket.type == parser.EVENT // decodedPacket.data == &#39;test-packet&#39; // decodedPacket.id == 13 }); for (var i = 0; i &lt; encodedPackets.length; i++) { decoder.add(encodedPackets[i]); } }); . Encoding and decoding a packet with binary data . var parser = require(&#39;socket.io-parser&#39;); var encoder = new parser.Encoder(); var packet = { type: parser.BINARY_EVENT, data: {i: new Buffer(1234), j: new Blob([new ArrayBuffer(2)])}, id: 15 }; encoder.encode(packet, function(encodedPackets) { var decoder = new parser.Decoder(); decoder.on(&#39;decoded&#39;, function(decodedPacket) { // decodedPacket.type == parser.BINARY_EVENT // Buffer.isBuffer(decodedPacket.data.i) == true // Buffer.isBuffer(decodedPacket.data.j) == true // decodedPacket.id == 15 }); for (var i = 0; i &lt; encodedPackets.length; i++) { decoder.add(encodedPackets[i]); } }); . See the test suite for more examples of how socket.io-parser is used. . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/socket.io-parser/",
          "relUrl": "/node_backend_Trystan/node_modules/socket.io-parser/",
          "date": ""
      }
      
  

  
      ,"page183": {
          "title": "socket.io",
          "content": "socket.io . . Features . Socket.IO enables real-time bidirectional event-based communication. It consists of: . a Node.js server (this repository) | a Javascript client library for the browser (or a Node.js client) | . Some implementations in other languages are also available: . Java | C++ | Swift | Dart | Python | .NET | Rust | PHP | . Its main features are: . Reliability . Connections are established even in the presence of: . proxies and load balancers. | personal firewall and antivirus software. | . For this purpose, it relies on Engine.IO, which first establishes a long-polling connection, then tries to upgrade to better transports that are “tested” on the side, like WebSocket. Please see the Goals section for more information. . Auto-reconnection support . Unless instructed otherwise a disconnected client will try to reconnect forever, until the server is available again. Please see the available reconnection options here. . Disconnection detection . A heartbeat mechanism is implemented at the Engine.IO level, allowing both the server and the client to know when the other one is not responding anymore. . That functionality is achieved with timers set on both the server and the client, with timeout values (the pingInterval and pingTimeout parameters) shared during the connection handshake. Those timers require any subsequent client calls to be directed to the same server, hence the sticky-session requirement when using multiples nodes. . Binary support . Any serializable data structures can be emitted, including: . ArrayBuffer and Blob in the browser | ArrayBuffer and Buffer in Node.js | . Simple and convenient API . Sample code: . io.on(&#39;connection&#39;, socket =&gt; { socket.emit(&#39;request&#39;, /* … */); // emit an event to the socket io.emit(&#39;broadcast&#39;, /* … */); // emit an event to all connected sockets socket.on(&#39;reply&#39;, () =&gt; { /* … */ }); // listen to the event }); . Cross-browser . Browser support is tested in Sauce Labs: . . Multiplexing support . In order to create separation of concerns within your application (for example per module, or based on permissions), Socket.IO allows you to create several Namespaces, which will act as separate communication channels but will share the same underlying connection. . Room support . Within each Namespace, you can define arbitrary channels, called Rooms, that sockets can join and leave. You can then broadcast to any given room, reaching every socket that has joined it. . This is a useful feature to send notifications to a group of users, or to a given user connected on several devices for example. . Note: Socket.IO is not a WebSocket implementation. Although Socket.IO indeed uses WebSocket as a transport when possible, it adds some metadata to each packet: the packet type, the namespace and the ack id when a message acknowledgement is needed. That is why a WebSocket client will not be able to successfully connect to a Socket.IO server, and a Socket.IO client will not be able to connect to a WebSocket server (like ws://echo.websocket.org) either. Please see the protocol specification here. . Installation . // with npm npm install socket.io // with yarn yarn add socket.io . How to use . The following example attaches socket.io to a plain Node.JS HTTP server listening on port 3000. . const server = require(&#39;http&#39;).createServer(); const io = require(&#39;socket.io&#39;)(server); io.on(&#39;connection&#39;, client =&gt; { client.on(&#39;event&#39;, data =&gt; { /* … */ }); client.on(&#39;disconnect&#39;, () =&gt; { /* … */ }); }); server.listen(3000); . Standalone . const io = require(&#39;socket.io&#39;)(); io.on(&#39;connection&#39;, client =&gt; { ... }); io.listen(3000); . Module syntax . import { Server } from &quot;socket.io&quot;; const io = new Server(server); io.listen(3000); . In conjunction with Express . Starting with 3.0, express applications have become request handler functions that you pass to http or http Server instances. You need to pass the Server to socket.io, not the express application function. Also make sure to call .listen on the server, not the app. . const app = require(&#39;express&#39;)(); const server = require(&#39;http&#39;).createServer(app); const io = require(&#39;socket.io&#39;)(server); io.on(&#39;connection&#39;, () =&gt; { /* … */ }); server.listen(3000); . In conjunction with Koa . Like Express.JS, Koa works by exposing an application as a request handler function, but only by calling the callback method. . const app = require(&#39;koa&#39;)(); const server = require(&#39;http&#39;).createServer(app.callback()); const io = require(&#39;socket.io&#39;)(server); io.on(&#39;connection&#39;, () =&gt; { /* … */ }); server.listen(3000); . In conjunction with Fastify . To integrate Socket.io in your Fastify application you just need to register fastify-socket.io plugin. It will create a decorator called io. . const app = require(&#39;fastify&#39;)(); app.register(require(&#39;fastify-socket.io&#39;)); app.io.on(&#39;connection&#39;, () =&gt; { /* … */ }); app.listen(3000); . Documentation . Please see the documentation here. . The source code of the website can be found here. Contributions are welcome! . Debug / logging . Socket.IO is powered by debug. In order to see all the debug output, run your app with the environment variable DEBUG including the desired scope. . To see the output from all of Socket.IO’s debugging scopes you can use: . DEBUG=socket.io* node myapp . Testing . npm test . This runs the gulp task test. By default the test will be run with the source code in lib directory. . Set the environmental variable TEST_VERSION to compat to test the transpiled es5-compat version of the code. . The gulp task test will always transpile the source code into es5 and export to dist first before running the test. . Backers . Support us with a monthly donation and help us continue our activities. [Become a backer] . . Sponsors . Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] . . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/socket.io/",
          "relUrl": "/node_backend_Trystan/node_modules/socket.io/",
          "date": ""
      }
      
  

  
      ,"page184": {
          "title": "statuses",
          "content": "statuses . . HTTP status utility for node. . This module provides a list of status codes and messages sourced from a few different projects: . The IANA Status Code Registry | The Node.js project | The NGINX project | The Apache HTTP Server project | . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install statuses . API . var status = require(&#39;statuses&#39;) . status(code) . Returns the status message string for a known HTTP status code. The code may be a number or a string. An error is thrown for an unknown status code. . status(403) // =&gt; &#39;Forbidden&#39; status(&#39;403&#39;) // =&gt; &#39;Forbidden&#39; status(306) // throws . status(msg) . Returns the numeric status code for a known HTTP status message. The message is case-insensitive. An error is thrown for an unknown status message. . status(&#39;forbidden&#39;) // =&gt; 403 status(&#39;Forbidden&#39;) // =&gt; 403 status(&#39;foo&#39;) // throws . status.codes . Returns an array of all the status codes as Integers. . status.code[msg] . Returns the numeric status code for a known status message (in lower-case), otherwise undefined. . status[&#39;not found&#39;] // =&gt; 404 . status.empty[code] . Returns true if a status code expects an empty body. . status.empty[200] // =&gt; undefined status.empty[204] // =&gt; true status.empty[304] // =&gt; true . status.message[code] . Returns the string message for a known numeric status code, otherwise undefined. This object is the same format as the Node.js http module http.STATUS_CODES. . status.message[404] // =&gt; &#39;Not Found&#39; . status.redirect[code] . Returns true if a status code is a valid redirect status. . status.redirect[200] // =&gt; undefined status.redirect[301] // =&gt; true . status.retry[code] . Returns true if you should retry the rest. . status.retry[501] // =&gt; undefined status.retry[503] // =&gt; true . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/statuses/",
          "relUrl": "/node_backend_Trystan/node_modules/statuses/",
          "date": ""
      }
      
  

  
      ,"page185": {
          "title": "toidentifier",
          "content": "toidentifier . . Convert a string of words to a JavaScript identifier . Install . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install toidentifier . Example . var toIdentifier = require(&#39;toidentifier&#39;) console.log(toIdentifier(&#39;Bad Request&#39;)) // =&gt; &quot;BadRequest&quot; . API . This CommonJS module exports a single default function: toIdentifier. . toIdentifier(string) . Given a string as the argument, it will be transformed according to the following rules and the new string will be returned: . Split into words separated by space characters (0x20). | Upper case the first character of each word. | Join the words together with no separator. | Remove all non-word ([0-9a-z_]) characters. | License . MIT . ## .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/toidentifier/",
          "relUrl": "/node_backend_Trystan/node_modules/toidentifier/",
          "date": ""
      }
      
  

  
      ,"page186": {
          "title": "type-is",
          "content": "type-is . . Infer the content-type of a request. . Install . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install type-is . API . var http = require(&#39;http&#39;) var typeis = require(&#39;type-is&#39;) http.createServer(function (req, res) { var istext = typeis(req, [&#39;text/*&#39;]) res.end(&#39;you &#39; + (istext ? &#39;sent&#39; : &#39;did not send&#39;) + &#39; me text&#39;) }) . typeis(request, types) . Checks if the request is one of the types. If the request has no body, even if there is a Content-Type header, then null is returned. If the Content-Type header is invalid or does not matches any of the types, then false is returned. Otherwise, a string of the type that matched is returned. . The request argument is expected to be a Node.js HTTP request. The types argument is an array of type strings. . Each type in the types array can be one of the following: . A file extension name such as json. This name will be returned if matched. | A mime type such as application/json. | A mime type with a wildcard such as */* or */json or application/*. The full mime type will be returned if matched. | A suffix such as +json. This can be combined with a wildcard such as */vnd+json or application/*+json. The full mime type will be returned if matched. | . Some examples to illustrate the inputs and returned value: . // req.headers.content-type = &#39;application/json&#39; typeis(req, [&#39;json&#39;]) // =&gt; &#39;json&#39; typeis(req, [&#39;html&#39;, &#39;json&#39;]) // =&gt; &#39;json&#39; typeis(req, [&#39;application/*&#39;]) // =&gt; &#39;application/json&#39; typeis(req, [&#39;application/json&#39;]) // =&gt; &#39;application/json&#39; typeis(req, [&#39;html&#39;]) // =&gt; false . typeis.hasBody(request) . Returns a Boolean if the given request has a body, regardless of the Content-Type header. . Having a body has no relation to how large the body is (it may be 0 bytes). This is similar to how file existence works. If a body does exist, then this indicates that there is data to read from the Node.js request stream. . if (typeis.hasBody(req)) { // read the body, since there is one req.on(&#39;data&#39;, function (chunk) { // ... }) } . typeis.is(mediaType, types) . Checks if the mediaType is one of the types. If the mediaType is invalid or does not matches any of the types, then false is returned. Otherwise, a string of the type that matched is returned. . The mediaType argument is expected to be a media type string. The types argument is an array of type strings. . Each type in the types array can be one of the following: . A file extension name such as json. This name will be returned if matched. | A mime type such as application/json. | A mime type with a wildcard such as */* or */json or application/*. The full mime type will be returned if matched. | A suffix such as +json. This can be combined with a wildcard such as */vnd+json or application/*+json. The full mime type will be returned if matched. | . Some examples to illustrate the inputs and returned value: . var mediaType = &#39;application/json&#39; typeis.is(mediaType, [&#39;json&#39;]) // =&gt; &#39;json&#39; typeis.is(mediaType, [&#39;html&#39;, &#39;json&#39;]) // =&gt; &#39;json&#39; typeis.is(mediaType, [&#39;application/*&#39;]) // =&gt; &#39;application/json&#39; typeis.is(mediaType, [&#39;application/json&#39;]) // =&gt; &#39;application/json&#39; typeis.is(mediaType, [&#39;html&#39;]) // =&gt; false . Examples . Example body parser . var express = require(&#39;express&#39;) var typeis = require(&#39;type-is&#39;) var app = express() app.use(function bodyParser (req, res, next) { if (!typeis.hasBody(req)) { return next() } switch (typeis(req, [&#39;urlencoded&#39;, &#39;json&#39;, &#39;multipart&#39;])) { case &#39;urlencoded&#39;: // parse urlencoded body throw new Error(&#39;implement urlencoded body parsing&#39;) case &#39;json&#39;: // parse json body throw new Error(&#39;implement json body parsing&#39;) case &#39;multipart&#39;: // parse multipart body throw new Error(&#39;implement multipart body parsing&#39;) default: // 415 error code res.statusCode = 415 res.end() break } }) . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/type-is/",
          "relUrl": "/node_backend_Trystan/node_modules/type-is/",
          "date": ""
      }
      
  

  
      ,"page187": {
          "title": "undici-types",
          "content": "undici-types . This package is a dual-publish of the undici library types. The undici package still contains types. This package is for users who only need undici types (such as for @types/node). It is published alongside every release of undici, so you can always use the same version. . GitHub nodejs/undici | Undici Documentation | .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/undici-types/",
          "relUrl": "/node_backend_Trystan/node_modules/undici-types/",
          "date": ""
      }
      
  

  
      ,"page188": {
          "title": "unpipe",
          "content": "unpipe . . Unpipe a stream from all destinations. . Installation . $ npm install unpipe . API . var unpipe = require(&#39;unpipe&#39;) . unpipe(stream) . Unpipes all destinations from a given stream. With stream 2+, this is equivalent to stream.unpipe(). When used with streams 1 style streams (typically Node.js 0.8 and below), this module attempts to undo the actions done in stream.pipe(dest). . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/unpipe/",
          "relUrl": "/node_backend_Trystan/node_modules/unpipe/",
          "date": ""
      }
      
  

  
      ,"page189": {
          "title": "utils-merge",
          "content": "utils-merge . . Merges the properties from a source object into a destination object. . Install . $ npm install utils-merge . Usage . var a = { foo: &#39;bar&#39; } , b = { bar: &#39;baz&#39; }; merge(a, b); // =&gt; { foo: &#39;bar&#39;, bar: &#39;baz&#39; } . License . The MIT License . Copyright (c) 2013-2017 Jared Hanson &lt;http://jaredhanson.net/&gt; . .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/utils-merge/",
          "relUrl": "/node_backend_Trystan/node_modules/utils-merge/",
          "date": ""
      }
      
  

  
      ,"page190": {
          "title": "",
          "content": "uuid . For the creation of RFC4122 UUIDs . Complete - Support for RFC4122 version 1, 3, 4, and 5 UUIDs | Cross-platform - Support for … CommonJS, ECMAScript Modules and CDN builds | NodeJS 12+ (LTS releases) | Chrome, Safari, Firefox, Edge browsers | Webpack and rollup.js module bundlers | React Native / Expo | . | Secure - Cryptographically-strong random values | Small - Zero-dependency, small footprint, plays nice with “tree shaking” packagers | CLI - Includes the uuid command line utility | . Note Upgrading from uuid@3? Your code is probably okay, but check out Upgrading From uuid@3 for details. . Note Only interested in creating a version 4 UUID? You might be able to use crypto.randomUUID(), eliminating the need to install this library. . Quickstart . To create a random UUID… . 1. Install . npm install uuid . 2. Create a UUID (ES6 module syntax) . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); // ⇨ &#39;9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d&#39; . … or using CommonJS syntax: . const { v4: uuidv4 } = require(&#39;uuid&#39;); uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; . For timestamp UUIDs, namespace UUIDs, and other options read on … . API Summary .       . uuid.NIL | The nil UUID string (all zeros) | New in uuid@8.3 | . uuid.parse() | Convert UUID string to array of bytes | New in uuid@8.3 | . uuid.stringify() | Convert array of bytes to UUID string | New in uuid@8.3 | . uuid.v1() | Create a version 1 (timestamp) UUID |   | . uuid.v3() | Create a version 3 (namespace w/ MD5) UUID |   | . uuid.v4() | Create a version 4 (random) UUID |   | . uuid.v5() | Create a version 5 (namespace w/ SHA-1) UUID |   | . uuid.validate() | Test a string to see if it is a valid UUID | New in uuid@8.3 | . uuid.version() | Detect RFC version of a UUID | New in uuid@8.3 | . API . uuid.NIL . The nil UUID string (all zeros). . Example: . import { NIL as NIL_UUID } from &#39;uuid&#39;; NIL_UUID; // ⇨ &#39;00000000-0000-0000-0000-000000000000&#39; . uuid.parse(str) . Convert UUID string to array of bytes .     . str | A valid UUID String | . returns | Uint8Array[16] | . throws | TypeError if str is not a valid UUID | . Note: Ordering of values in the byte arrays used by parse() and stringify() follows the left &amp;Rarr; right order of hex-pairs in UUID strings. As shown in the example below. . Example: . import { parse as uuidParse } from &#39;uuid&#39;; // Parse a UUID const bytes = uuidParse(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;); // Convert to hex strings to show byte order (for documentation purposes) [...bytes].map((v) =&gt; v.toString(16).padStart(2, &#39;0&#39;)); // ⇨ // [ // &#39;6e&#39;, &#39;c0&#39;, &#39;bd&#39;, &#39;7f&#39;, // &#39;11&#39;, &#39;c0&#39;, &#39;43&#39;, &#39;da&#39;, // &#39;97&#39;, &#39;5e&#39;, &#39;2a&#39;, &#39;8a&#39;, // &#39;d9&#39;, &#39;eb&#39;, &#39;ae&#39;, &#39;0b&#39; // ] . uuid.stringify(arr[, offset]) . Convert array of bytes to UUID string .     . arr | Array-like collection of 16 values (starting from offset) between 0-255. | . [offset = 0] | Number Starting index in the Array | . returns | String | . throws | TypeError if a valid UUID string cannot be generated | . Note: Ordering of values in the byte arrays used by parse() and stringify() follows the left &amp;Rarr; right order of hex-pairs in UUID strings. As shown in the example below. . Example: . import { stringify as uuidStringify } from &#39;uuid&#39;; const uuidBytes = [ 0x6e, 0xc0, 0xbd, 0x7f, 0x11, 0xc0, 0x43, 0xda, 0x97, 0x5e, 0x2a, 0x8a, 0xd9, 0xeb, 0xae, 0x0b, ]; uuidStringify(uuidBytes); // ⇨ &#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39; . uuid.v1([options[, buffer[, offset]]]) . Create an RFC version 1 (timestamp) UUID .     . [options] | Object with one or more of the following properties: | . [options.node ] | RFC “node” field as an Array[6] of byte values (per 4.1.6) | . [options.clockseq] | RFC “clock sequence” as a Number between 0 - 0x3fff | . [options.msecs] | RFC “timestamp” field (Number of milliseconds, unix epoch) | . [options.nsecs] | RFC “timestamp” field (Number of nanoseconds to add to msecs, should be 0-10,000) | . [options.random] | Array of 16 random bytes (0-255) | . [options.rng] | Alternative to options.random, a Function that returns an Array of 16 random bytes (0-255) | . [buffer] | Array | Buffer If specified, uuid will be written here in byte-form, starting at offset | . [offset = 0] | Number Index to start writing UUID bytes in buffer | . returns | UUID String if no buffer is specified, otherwise returns buffer | . throws | Error if more than 10M UUIDs/sec are requested | . Note: The default node id (the last 12 digits in the UUID) is generated once, randomly, on process startup, and then remains unchanged for the duration of the process. . Note: options.random and options.rng are only meaningful on the very first call to v1(), where they may be passed to initialize the internal node and clockseq fields. . Example: . import { v1 as uuidv1 } from &#39;uuid&#39;; uuidv1(); // ⇨ &#39;2c5ea4c0-4067-11e9-8bad-9b1deb4d3b7d&#39; . Example using options: . import { v1 as uuidv1 } from &#39;uuid&#39;; const v1options = { node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab], clockseq: 0x1234, msecs: new Date(&#39;2011-11-01&#39;).getTime(), nsecs: 5678, }; uuidv1(v1options); // ⇨ &#39;710b962e-041c-11e1-9234-0123456789ab&#39; . uuid.v3(name, namespace[, buffer[, offset]]) . Create an RFC version 3 (namespace w/ MD5) UUID . API is identical to v5(), but uses “v3” instead. . ⚠️ Note: Per the RFC, “If backward compatibility is not an issue, SHA-1 [Version 5] is preferred.” . uuid.v4([options[, buffer[, offset]]]) . Create an RFC version 4 (random) UUID .     . [options] | Object with one or more of the following properties: | . [options.random] | Array of 16 random bytes (0-255) | . [options.rng] | Alternative to options.random, a Function that returns an Array of 16 random bytes (0-255) | . [buffer] | Array | Buffer If specified, uuid will be written here in byte-form, starting at offset | . [offset = 0] | Number Index to start writing UUID bytes in buffer | . returns | UUID String if no buffer is specified, otherwise returns buffer | . Example: . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; . Example using predefined random values: . import { v4 as uuidv4 } from &#39;uuid&#39;; const v4options = { random: [ 0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea, 0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36, ], }; uuidv4(v4options); // ⇨ &#39;109156be-c4fb-41ea-b1b4-efe1671c5836&#39; . uuid.v5(name, namespace[, buffer[, offset]]) . Create an RFC version 5 (namespace w/ SHA-1) UUID .     . name | String | Array | . namespace | String | Array[16] Namespace UUID | . [buffer] | Array | Buffer If specified, uuid will be written here in byte-form, starting at offset | . [offset = 0] | Number Index to start writing UUID bytes in buffer | . returns | UUID String if no buffer is specified, otherwise returns buffer | . Note: The RFC DNS and URL namespaces are available as v5.DNS and v5.URL. . Example with custom namespace: . import { v5 as uuidv5 } from &#39;uuid&#39;; // Define a custom namespace. Readers, create your own using something like // https://www.uuidgenerator.net/ const MY_NAMESPACE = &#39;1b671a64-40d5-491e-99b0-da01ff1f3341&#39;; uuidv5(&#39;Hello, World!&#39;, MY_NAMESPACE); // ⇨ &#39;630eb68f-e0fa-5ecc-887a-7c7a62614681&#39; . Example with RFC URL namespace: . import { v5 as uuidv5 } from &#39;uuid&#39;; uuidv5(&#39;https://www.w3.org/&#39;, uuidv5.URL); // ⇨ &#39;c106a26a-21bb-5538-8bf2-57095d1976c1&#39; . uuid.validate(str) . Test a string to see if it is a valid UUID .     . str | String to validate | . returns | true if string is a valid UUID, false otherwise | . Example: . import { validate as uuidValidate } from &#39;uuid&#39;; uuidValidate(&#39;not a UUID&#39;); // ⇨ false uuidValidate(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;); // ⇨ true . Using validate and version together it is possible to do per-version validation, e.g. validate for only v4 UUIds. . import { version as uuidVersion } from &#39;uuid&#39;; import { validate as uuidValidate } from &#39;uuid&#39;; function uuidValidateV4(uuid) { return uuidValidate(uuid) &amp;&amp; uuidVersion(uuid) === 4; } const v1Uuid = &#39;d9428888-122b-11e1-b85c-61cd3cbb3210&#39;; const v4Uuid = &#39;109156be-c4fb-41ea-b1b4-efe1671c5836&#39;; uuidValidateV4(v4Uuid); // ⇨ true uuidValidateV4(v1Uuid); // ⇨ false . uuid.version(str) . Detect RFC version of a UUID .     . str | A valid UUID String | . returns | Number The RFC version of the UUID | . throws | TypeError if str is not a valid UUID | . Example: . import { version as uuidVersion } from &#39;uuid&#39;; uuidVersion(&#39;45637ec4-c85f-11ea-87d0-0242ac130003&#39;); // ⇨ 1 uuidVersion(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;); // ⇨ 4 . Command Line . UUIDs can be generated from the command line using uuid. . $ npx uuid ddeb27fb-d9a0-4624-be4d-4615062daed4 . The default is to generate version 4 UUIDS, however the other versions are supported. Type uuid --help for details: . $ npx uuid --help Usage: uuid uuid v1 uuid v3 &lt;name&gt; &lt;namespace uuid&gt; uuid v4 uuid v5 &lt;name&gt; &lt;namespace uuid&gt; uuid --help Note: &lt;namespace uuid&gt; may be &quot;URL&quot; or &quot;DNS&quot; to use the corresponding UUIDs defined by RFC4122 . ECMAScript Modules . This library comes with ECMAScript Modules (ESM) support for Node.js versions that support it (example) as well as bundlers like rollup.js (example) and webpack (example) (targeting both, Node.js and browser environments). . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; . To run the examples you must first create a dist build of this library in the module root: . npm run build . CDN Builds . ECMAScript Modules . To load this module directly into modern browsers that support loading ECMAScript Modules you can make use of jspm: . &lt;script type=&quot;module&quot;&gt; import { v4 as uuidv4 } from &#39;https://jspm.dev/uuid&#39;; console.log(uuidv4()); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39; &lt;/script&gt; . UMD . As of uuid@9 UMD (Universal Module Definition) builds are no longer shipped with this library. . If you need a UMD build of this library, use a bundler like Webpack or Rollup. Alternatively, refer to the documentation of uuid@8.3.2 which was the last version that shipped UMD builds. . Known issues . Duplicate UUIDs (Googlebot) . This module may generate duplicate UUIDs when run in clients with deterministic random number generators, such as Googlebot crawlers. This can cause problems for apps that expect client-generated UUIDs to always be unique. Developers should be prepared for this and have a strategy for dealing with possible collisions, such as: . Check for duplicate UUIDs, fail gracefully | Disable write operations for Googlebot clients | . “getRandomValues() not supported” . This error occurs in environments where the standard crypto.getRandomValues() API is not supported. This issue can be resolved by adding an appropriate polyfill: . React Native / Expo . Install react-native-get-random-values | Import it before uuid. Since uuid might also appear as a transitive dependency of some other imports it’s safest to just import react-native-get-random-values as the very first thing in your entry point: | import &#39;react-native-get-random-values&#39;; import { v4 as uuidv4 } from &#39;uuid&#39;; . Note: If you are using Expo, you must be using at least react-native-get-random-values@1.5.0 and expo@39.0.0. . Web Workers / Service Workers (Edge &lt;= 18) . In Edge &lt;= 18, Web Crypto is not supported in Web Workers or Service Workers and we are not aware of a polyfill (let us know if you find one, please). . IE 11 (Internet Explorer) . Support for IE11 and other legacy browsers has been dropped as of uuid@9. If you need to support legacy browsers, you can always transpile the uuid module source yourself (e.g. using Babel). . Upgrading From uuid@7 . Only Named Exports Supported When Using with Node.js ESM . uuid@7 did not come with native ECMAScript Module (ESM) support for Node.js. Importing it in Node.js ESM consequently imported the CommonJS source with a default export. This library now comes with true Node.js ESM support and only provides named exports. . Instead of doing: . import uuid from &#39;uuid&#39;; uuid.v4(); . you will now have to use the named exports: . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); . Deep Requires No Longer Supported . Deep requires like require(&#39;uuid/v4&#39;) which have been deprecated in uuid@7 are no longer supported. . Upgrading From uuid@3 . “Wait… what happened to uuid@4 thru uuid@6?!?” . In order to avoid confusion with RFC version 4 and version 5 UUIDs, and a possible version 6, releases 4 thru 6 of this module have been skipped. . Deep Requires Now Deprecated . uuid@3 encouraged the use of deep requires to minimize the bundle size of browser builds: . const uuidv4 = require(&#39;uuid/v4&#39;); // &lt;== NOW DEPRECATED! uuidv4(); . As of uuid@7 this library now provides ECMAScript modules builds, which allow packagers like Webpack and Rollup to do “tree-shaking” to remove dead code. Instead, use the import syntax: . import { v4 as uuidv4 } from &#39;uuid&#39;; uuidv4(); . … or for CommonJS: . const { v4: uuidv4 } = require(&#39;uuid&#39;); uuidv4(); . Default Export Removed . uuid@3 was exporting the Version 4 UUID method as a default export: . const uuid = require(&#39;uuid&#39;); // &lt;== REMOVED! . This usage pattern was already discouraged in uuid@3 and has been removed in uuid@7. . . Markdown generated from README_js.md by .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/uuid/",
          "relUrl": "/node_backend_Trystan/node_modules/uuid/",
          "date": ""
      }
      
  

  
      ,"page191": {
          "title": "vary",
          "content": "vary . . Manipulate the HTTP Vary header . Installation . This is a Node.js module available through the npm registry. Installation is done using the npm install command: . $ npm install vary . API . var vary = require(&#39;vary&#39;) . vary(res, field) . Adds the given header field to the Vary response header of res. This can be a string of a single field, a string of a valid Vary header, or an array of multiple fields. . This will append the header if not already listed, otherwise leaves it listed in the current location. . // Append &quot;Origin&quot; to the Vary header of the response vary(res, &#39;Origin&#39;) . vary.append(header, field) . Adds the given header field to the Vary response header string header. This can be a string of a single field, a string of a valid Vary header, or an array of multiple fields. . This will append the header if not already listed, otherwise leaves it listed in the current location. The new header string is returned. . // Get header string appending &quot;Origin&quot; to &quot;Accept, User-Agent&quot; vary.append(&#39;Accept, User-Agent&#39;, &#39;Origin&#39;) . Examples . Updating the Vary header when content is based on it . var http = require(&#39;http&#39;) var vary = require(&#39;vary&#39;) http.createServer(function onRequest (req, res) { // about to user-agent sniff vary(res, &#39;User-Agent&#39;) var ua = req.headers[&#39;user-agent&#39;] || &#39;&#39; var isMobile = /mobi|android|touch|mini/i.test(ua) // serve site, depending on isMobile res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;) res.end(&#39;You are (probably) &#39; + (isMobile ? &#39;&#39; : &#39;not &#39;) + &#39;a mobile user&#39;) }) . Testing . $ npm test . License . MIT .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/vary/",
          "relUrl": "/node_backend_Trystan/node_modules/vary/",
          "date": ""
      }
      
  

  
      ,"page192": {
          "title": "ws: a Node.js WebSocket library",
          "content": "ws: a Node.js WebSocket library . . ws is a simple to use, blazing fast, and thoroughly tested WebSocket client and server implementation. . Passes the quite extensive Autobahn test suite: [server][server-report], client. . Note: This module does not work in the browser. The client in the docs is a reference to a back end with the role of a client in the WebSocket communication. Browser clients must use the native WebSocket object. To make the same code work seamlessly on Node.js and the browser, you can use one of the many wrappers available on npm, like isomorphic-ws. . Table of Contents . Protocol support | Installing Opt-in for performance | . | API docs | WebSocket compression | Usage examples Sending and receiving text data | Sending binary data | Simple server | External HTTP/S server | Multiple servers sharing a single HTTP/S server | Client authentication | Server broadcast | Round-trip time | Use the Node.js streams API | Other examples | . | FAQ How to get the IP address of the client? | How to detect and close broken connections? | How to connect via a proxy? | . | Changelog | License | . Protocol support . HyBi drafts 07-12 (Use the option protocolVersion: 8) | HyBi drafts 13-17 (Current default, alternatively option protocolVersion: 13) | . Installing . npm install ws . Opt-in for performance . There are 2 optional modules that can be installed along side with the ws module. These modules are binary addons which improve certain operations. Prebuilt binaries are available for the most popular platforms so you don’t necessarily need to have a C++ compiler installed on your machine. . npm install --save-optional bufferutil: Allows to efficiently perform operations such as masking and unmasking the data payload of the WebSocket frames. | npm install --save-optional utf-8-validate: Allows to efficiently check if a message contains valid UTF-8. | . To not even try to require and use these modules, use the WS_NO_BUFFER_UTIL and WS_NO_UTF_8_VALIDATE environment variables. These might be useful to enhance security in systems where a user can put a package in the package search path of an application of another user, due to how the Node.js resolver algorithm works. . API docs . See /doc/ws.md for Node.js-like documentation of ws classes and utility functions. . WebSocket compression . ws supports the [permessage-deflate extension][permessage-deflate] which enables the client and server to negotiate a compression algorithm and its parameters, and then selectively apply it to the data payloads of each WebSocket message. . The extension is disabled by default on the server and enabled by default on the client. It adds a significant overhead in terms of performance and memory consumption so we suggest to enable it only if it is really needed. . Note that Node.js has a variety of issues with high-performance compression, where increased concurrency, especially on Linux, can lead to catastrophic memory fragmentation and slow performance. If you intend to use permessage-deflate in production, it is worthwhile to set up a test representative of your workload and ensure Node.js/zlib will handle it with acceptable performance and memory usage. . Tuning of permessage-deflate can be done via the options defined below. You can also use zlibDeflateOptions and zlibInflateOptions, which is passed directly into the creation of [raw deflate/inflate streams][node-zlib-deflaterawdocs]. . See [the docs][ws-server-options] for more options. . import WebSocket, { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080, perMessageDeflate: { zlibDeflateOptions: { // See zlib defaults. chunkSize: 1024, memLevel: 7, level: 3 }, zlibInflateOptions: { chunkSize: 10 * 1024 }, // Other options settable: clientNoContextTakeover: true, // Defaults to negotiated value. serverNoContextTakeover: true, // Defaults to negotiated value. serverMaxWindowBits: 10, // Defaults to negotiated value. // Below options specified as default values. concurrencyLimit: 10, // Limits zlib concurrency for perf. threshold: 1024 // Size (in bytes) below which messages // should not be compressed if context takeover is disabled. } }); . The client will only use the extension if it is supported and enabled on the server. To always disable the extension on the client set the perMessageDeflate option to false. . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;ws://www.host.com/path&#39;, { perMessageDeflate: false }); . Usage examples . Sending and receiving text data . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;ws://www.host.com/path&#39;); ws.on(&#39;open&#39;, function open() { ws.send(&#39;something&#39;); }); ws.on(&#39;message&#39;, function message(data) { console.log(&#39;received: %s&#39;, data); }); . Sending binary data . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;ws://www.host.com/path&#39;); ws.on(&#39;open&#39;, function open() { const array = new Float32Array(5); for (var i = 0; i &lt; array.length; ++i) { array[i] = i / 2; } ws.send(array); }); . Simple server . import { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data) { console.log(&#39;received: %s&#39;, data); }); ws.send(&#39;something&#39;); }); . External HTTP/S server . import { createServer } from &#39;https&#39;; import { readFileSync } from &#39;fs&#39;; import { WebSocketServer } from &#39;ws&#39;; const server = createServer({ cert: readFileSync(&#39;/path/to/cert.pem&#39;), key: readFileSync(&#39;/path/to/key.pem&#39;) }); const wss = new WebSocketServer({ server }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data) { console.log(&#39;received: %s&#39;, data); }); ws.send(&#39;something&#39;); }); server.listen(8080); . Multiple servers sharing a single HTTP/S server . import { createServer } from &#39;http&#39;; import { parse } from &#39;url&#39;; import { WebSocketServer } from &#39;ws&#39;; const server = createServer(); const wss1 = new WebSocketServer({ noServer: true }); const wss2 = new WebSocketServer({ noServer: true }); wss1.on(&#39;connection&#39;, function connection(ws) { // ... }); wss2.on(&#39;connection&#39;, function connection(ws) { // ... }); server.on(&#39;upgrade&#39;, function upgrade(request, socket, head) { const { pathname } = parse(request.url); if (pathname === &#39;/foo&#39;) { wss1.handleUpgrade(request, socket, head, function done(ws) { wss1.emit(&#39;connection&#39;, ws, request); }); } else if (pathname === &#39;/bar&#39;) { wss2.handleUpgrade(request, socket, head, function done(ws) { wss2.emit(&#39;connection&#39;, ws, request); }); } else { socket.destroy(); } }); server.listen(8080); . Client authentication . import { createServer } from &#39;http&#39;; import { WebSocketServer } from &#39;ws&#39;; const server = createServer(); const wss = new WebSocketServer({ noServer: true }); wss.on(&#39;connection&#39;, function connection(ws, request, client) { ws.on(&#39;message&#39;, function message(data) { console.log(`Received message ${data} from user ${client}`); }); }); server.on(&#39;upgrade&#39;, function upgrade(request, socket, head) { // This function is not defined on purpose. Implement it with your own logic. authenticate(request, function next(err, client) { if (err || !client) { socket.write(&#39;HTTP/1.1 401 Unauthorized r n r n&#39;); socket.destroy(); return; } wss.handleUpgrade(request, socket, head, function done(ws) { wss.emit(&#39;connection&#39;, ws, request, client); }); }); }); server.listen(8080); . Also see the provided [example][session-parse-example] using express-session. . Server broadcast . A client WebSocket broadcasting to all connected WebSocket clients, including itself. . import WebSocket, { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data, isBinary) { wss.clients.forEach(function each(client) { if (client.readyState === WebSocket.OPEN) { client.send(data, { binary: isBinary }); } }); }); }); . A client WebSocket broadcasting to every other connected WebSocket clients, excluding itself. . import WebSocket, { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.on(&#39;message&#39;, function message(data, isBinary) { wss.clients.forEach(function each(client) { if (client !== ws &amp;&amp; client.readyState === WebSocket.OPEN) { client.send(data, { binary: isBinary }); } }); }); }); . Round-trip time . import WebSocket from &#39;ws&#39;; const ws = new WebSocket(&#39;wss://websocket-echo.com/&#39;); ws.on(&#39;open&#39;, function open() { console.log(&#39;connected&#39;); ws.send(Date.now()); }); ws.on(&#39;close&#39;, function close() { console.log(&#39;disconnected&#39;); }); ws.on(&#39;message&#39;, function message(data) { console.log(`Round-trip time: ${Date.now() - data} ms`); setTimeout(function timeout() { ws.send(Date.now()); }, 500); }); . Use the Node.js streams API . import WebSocket, { createWebSocketStream } from &#39;ws&#39;; const ws = new WebSocket(&#39;wss://websocket-echo.com/&#39;); const duplex = createWebSocketStream(ws, { encoding: &#39;utf8&#39; }); duplex.pipe(process.stdout); process.stdin.pipe(duplex); . Other examples . For a full example with a browser client communicating with a ws server, see the examples folder. . Otherwise, see the test cases. . FAQ . How to get the IP address of the client? . The remote IP address can be obtained from the raw socket. . import { WebSocketServer } from &#39;ws&#39;; const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws, req) { const ip = req.socket.remoteAddress; }); . When the server runs behind a proxy like NGINX, the de-facto standard is to use the X-Forwarded-For header. . wss.on(&#39;connection&#39;, function connection(ws, req) { const ip = req.headers[&#39;x-forwarded-for&#39;].split(&#39;,&#39;)[0].trim(); }); . How to detect and close broken connections? . Sometimes the link between the server and the client can be interrupted in a way that keeps both the server and the client unaware of the broken state of the connection (e.g. when pulling the cord). . In these cases ping messages can be used as a means to verify that the remote endpoint is still responsive. . import { WebSocketServer } from &#39;ws&#39;; function heartbeat() { this.isAlive = true; } const wss = new WebSocketServer({ port: 8080 }); wss.on(&#39;connection&#39;, function connection(ws) { ws.isAlive = true; ws.on(&#39;pong&#39;, heartbeat); }); const interval = setInterval(function ping() { wss.clients.forEach(function each(ws) { if (ws.isAlive === false) return ws.terminate(); ws.isAlive = false; ws.ping(); }); }, 30000); wss.on(&#39;close&#39;, function close() { clearInterval(interval); }); . Pong messages are automatically sent in response to ping messages as required by the spec. . Just like the server example above your clients might as well lose connection without knowing it. You might want to add a ping listener on your clients to prevent that. A simple implementation would be: . import WebSocket from &#39;ws&#39;; function heartbeat() { clearTimeout(this.pingTimeout); // Use `WebSocket#terminate()`, which immediately destroys the connection, // instead of `WebSocket#close()`, which waits for the close timer. // Delay should be equal to the interval at which your server // sends out pings plus a conservative assumption of the latency. this.pingTimeout = setTimeout(() =&gt; { this.terminate(); }, 30000 + 1000); } const client = new WebSocket(&#39;wss://websocket-echo.com/&#39;); client.on(&#39;open&#39;, heartbeat); client.on(&#39;ping&#39;, heartbeat); client.on(&#39;close&#39;, function clear() { clearTimeout(this.pingTimeout); }); . How to connect via a proxy? . Use a custom http.Agent implementation like https-proxy-agent or [socks-proxy-agent][]. . Changelog . We’re using the GitHub releases for changelog entries. . License . MIT . [node-zlib-deflaterawdocs]: https://nodejs.org/api/zlib.html#zlib_zlib_createdeflateraw_options [permessage-deflate]: https://tools.ietf.org/html/rfc7692 [server-report]: http://websockets.github.io/ws/autobahn/servers/ [session-parse-example]: ./examples/express-session-parse [socks-proxy-agent]: https://github.com/TooTallNate/node-socks-proxy-agent [ws-server-options]: ./doc/ws.md#new-websocketserveroptions-callback .",
          "url": "http://localhost:4100/Multiplayer/node_backend_Trystan/node_modules/ws/",
          "relUrl": "/node_backend_Trystan/node_modules/ws/",
          "date": ""
      }
      
  

}